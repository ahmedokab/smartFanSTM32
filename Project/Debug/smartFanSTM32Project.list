
smartFanSTM32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000190c  0800a558  0800a558  0000b558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be64  0800be64  0000d1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800be64  0800be64  0000ce64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be6c  0800be6c  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be6c  0800be6c  0000ce6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be70  0800be70  0000ce70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800be74  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200001e4  0800c058  0000d1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800c058  0000d964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014071  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f08  00000000  00000000  00021285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00024190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9d  00000000  00000000  00025448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a378  00000000  00000000  000262e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001810f  00000000  00000000  0004065d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a00d6  00000000  00000000  0005876c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8842  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000613c  00000000  00000000  000f8888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000fe9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a53c 	.word	0x0800a53c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800a53c 	.word	0x0800a53c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9d3 	b.w	8001020 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b988 	b.w	8001020 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	468e      	mov	lr, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	4688      	mov	r8, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d962      	bls.n	8000e04 <__udivmoddi4+0xdc>
 8000d3e:	fab2 f682 	clz	r6, r2
 8000d42:	b14e      	cbz	r6, 8000d58 <__udivmoddi4+0x30>
 8000d44:	f1c6 0320 	rsb	r3, r6, #32
 8000d48:	fa01 f806 	lsl.w	r8, r1, r6
 8000d4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	ea43 0808 	orr.w	r8, r3, r8
 8000d56:	40b4      	lsls	r4, r6
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7c:	f080 80ea 	bcs.w	8000f54 <__udivmoddi4+0x22c>
 8000d80:	429a      	cmp	r2, r3
 8000d82:	f240 80e7 	bls.w	8000f54 <__udivmoddi4+0x22c>
 8000d86:	3902      	subs	r1, #2
 8000d88:	443b      	add	r3, r7
 8000d8a:	1a9a      	subs	r2, r3, r2
 8000d8c:	b2a3      	uxth	r3, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9e:	459c      	cmp	ip, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x8e>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da8:	f080 80d6 	bcs.w	8000f58 <__udivmoddi4+0x230>
 8000dac:	459c      	cmp	ip, r3
 8000dae:	f240 80d3 	bls.w	8000f58 <__udivmoddi4+0x230>
 8000db2:	443b      	add	r3, r7
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dba:	eba3 030c 	sub.w	r3, r3, ip
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40f3      	lsrs	r3, r6
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xb6>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb0>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa2>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x14c>
 8000de6:	4573      	cmp	r3, lr
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xc8>
 8000dea:	4282      	cmp	r2, r0
 8000dec:	f200 8105 	bhi.w	8000ffa <__udivmoddi4+0x2d2>
 8000df0:	1a84      	subs	r4, r0, r2
 8000df2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	4690      	mov	r8, r2
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e5      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000dfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000e02:	e7e2      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f000 8090 	beq.w	8000f2a <__udivmoddi4+0x202>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f040 80a4 	bne.w	8000f5c <__udivmoddi4+0x234>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	0c03      	lsrs	r3, r0, #16
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	b280      	uxth	r0, r0
 8000e1e:	b2bc      	uxth	r4, r7
 8000e20:	2101      	movs	r1, #1
 8000e22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x11e>
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x11c>
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	f200 80e0 	bhi.w	8001004 <__udivmoddi4+0x2dc>
 8000e44:	46c4      	mov	ip, r8
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e54:	fb02 f404 	mul.w	r4, r2, r4
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x144>
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x142>
 8000e64:	429c      	cmp	r4, r3
 8000e66:	f200 80ca 	bhi.w	8000ffe <__udivmoddi4+0x2d6>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	1b1b      	subs	r3, r3, r4
 8000e6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa0e f401 	lsl.w	r4, lr, r1
 8000e84:	fa20 f306 	lsr.w	r3, r0, r6
 8000e88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e90:	4323      	orrs	r3, r4
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	fa1f fc87 	uxth.w	ip, r7
 8000e9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9e:	0c1c      	lsrs	r4, r3, #16
 8000ea0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d909      	bls.n	8000ec8 <__udivmoddi4+0x1a0>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eba:	f080 809c 	bcs.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f240 8099 	bls.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	eba4 040e 	sub.w	r4, r4, lr
 8000ecc:	fa1f fe83 	uxth.w	lr, r3
 8000ed0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000edc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee0:	45a4      	cmp	ip, r4
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eea:	f080 8082 	bcs.w	8000ff2 <__udivmoddi4+0x2ca>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d97f      	bls.n	8000ff2 <__udivmoddi4+0x2ca>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000efa:	eba4 040c 	sub.w	r4, r4, ip
 8000efe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f02:	4564      	cmp	r4, ip
 8000f04:	4673      	mov	r3, lr
 8000f06:	46e1      	mov	r9, ip
 8000f08:	d362      	bcc.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f0a:	d05f      	beq.n	8000fcc <__udivmoddi4+0x2a4>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x1fe>
 8000f0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f12:	eb64 0409 	sbc.w	r4, r4, r9
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1e:	431e      	orrs	r6, r3
 8000f20:	40cc      	lsrs	r4, r1
 8000f22:	e9c5 6400 	strd	r6, r4, [r5]
 8000f26:	2100      	movs	r1, #0
 8000f28:	e74f      	b.n	8000dca <__udivmoddi4+0xa2>
 8000f2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2e:	0c01      	lsrs	r1, r0, #16
 8000f30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f34:	b280      	uxth	r0, r0
 8000f36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	463c      	mov	r4, r7
 8000f40:	46b8      	mov	r8, r7
 8000f42:	46be      	mov	lr, r7
 8000f44:	2620      	movs	r6, #32
 8000f46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f4a:	eba2 0208 	sub.w	r2, r2, r8
 8000f4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f52:	e766      	b.n	8000e22 <__udivmoddi4+0xfa>
 8000f54:	4601      	mov	r1, r0
 8000f56:	e718      	b.n	8000d8a <__udivmoddi4+0x62>
 8000f58:	4610      	mov	r0, r2
 8000f5a:	e72c      	b.n	8000db6 <__udivmoddi4+0x8e>
 8000f5c:	f1c6 0220 	rsb	r2, r6, #32
 8000f60:	fa2e f302 	lsr.w	r3, lr, r2
 8000f64:	40b7      	lsls	r7, r6
 8000f66:	40b1      	lsls	r1, r6
 8000f68:	fa20 f202 	lsr.w	r2, r0, r2
 8000f6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f70:	430a      	orrs	r2, r1
 8000f72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f76:	b2bc      	uxth	r4, r7
 8000f78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f82:	fb08 f904 	mul.w	r9, r8, r4
 8000f86:	40b0      	lsls	r0, r6
 8000f88:	4589      	cmp	r9, r1
 8000f8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8e:	b280      	uxth	r0, r0
 8000f90:	d93e      	bls.n	8001010 <__udivmoddi4+0x2e8>
 8000f92:	1879      	adds	r1, r7, r1
 8000f94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f98:	d201      	bcs.n	8000f9e <__udivmoddi4+0x276>
 8000f9a:	4589      	cmp	r9, r1
 8000f9c:	d81f      	bhi.n	8000fde <__udivmoddi4+0x2b6>
 8000f9e:	eba1 0109 	sub.w	r1, r1, r9
 8000fa2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa6:	fb09 f804 	mul.w	r8, r9, r4
 8000faa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb4:	4542      	cmp	r2, r8
 8000fb6:	d229      	bcs.n	800100c <__udivmoddi4+0x2e4>
 8000fb8:	18ba      	adds	r2, r7, r2
 8000fba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fbe:	d2c4      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d2c2      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc8:	443a      	add	r2, r7
 8000fca:	e7be      	b.n	8000f4a <__udivmoddi4+0x222>
 8000fcc:	45f0      	cmp	r8, lr
 8000fce:	d29d      	bcs.n	8000f0c <__udivmoddi4+0x1e4>
 8000fd0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd8:	3801      	subs	r0, #1
 8000fda:	46e1      	mov	r9, ip
 8000fdc:	e796      	b.n	8000f0c <__udivmoddi4+0x1e4>
 8000fde:	eba7 0909 	sub.w	r9, r7, r9
 8000fe2:	4449      	add	r1, r9
 8000fe4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fec:	fb09 f804 	mul.w	r8, r9, r4
 8000ff0:	e7db      	b.n	8000faa <__udivmoddi4+0x282>
 8000ff2:	4673      	mov	r3, lr
 8000ff4:	e77f      	b.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ff6:	4650      	mov	r0, sl
 8000ff8:	e766      	b.n	8000ec8 <__udivmoddi4+0x1a0>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e6fd      	b.n	8000dfa <__udivmoddi4+0xd2>
 8000ffe:	443b      	add	r3, r7
 8001000:	3a02      	subs	r2, #2
 8001002:	e733      	b.n	8000e6c <__udivmoddi4+0x144>
 8001004:	f1ac 0c02 	sub.w	ip, ip, #2
 8001008:	443b      	add	r3, r7
 800100a:	e71c      	b.n	8000e46 <__udivmoddi4+0x11e>
 800100c:	4649      	mov	r1, r9
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x222>
 8001010:	eba1 0109 	sub.w	r1, r1, r9
 8001014:	46c4      	mov	ip, r8
 8001016:	fbb1 f9fe 	udiv	r9, r1, lr
 800101a:	fb09 f804 	mul.w	r8, r9, r4
 800101e:	e7c4      	b.n	8000faa <__udivmoddi4+0x282>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 800102c:	2305      	movs	r3, #5
 800102e:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f001 fad9 	bl	80025ec <null_ptr_check>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d133      	bne.n	80010ae <bme280_init+0x8a>
		while (try_count) {
 8001046:	e028      	b.n	800109a <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001048:	f107 010d 	add.w	r1, r7, #13
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	20d0      	movs	r0, #208	@ 0xd0
 8001052:	f000 f832 	bl	80010ba <bme280_get_regs>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d114      	bne.n	800108c <bme280_init+0x68>
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	2b60      	cmp	r3, #96	@ 0x60
 8001066:	d111      	bne.n	800108c <bme280_init+0x68>
				dev->chip_id = chip_id;
 8001068:	7b7a      	ldrb	r2, [r7, #13]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f978 	bl	8001364 <bme280_soft_reset>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8001078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d110      	bne.n	80010a2 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f001 f91b 	bl	80022bc <get_calib_data>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800108a:	e00a      	b.n	80010a2 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2001      	movs	r0, #1
 8001092:	4798      	blx	r3
			--try_count;
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	3b01      	subs	r3, #1
 8001098:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1d3      	bne.n	8001048 <bme280_init+0x24>
 80010a0:	e000      	b.n	80010a4 <bme280_init+0x80>
				break;
 80010a2:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 80010a4:	7bbb      	ldrb	r3, [r7, #14]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 80010aa:	23fe      	movs	r3, #254	@ 0xfe
 80010ac:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80010ba:	b590      	push	{r4, r7, lr}
 80010bc:	b087      	sub	sp, #28
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4603      	mov	r3, r0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	4613      	mov	r3, r2
 80010ca:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f001 fa8d 	bl	80025ec <null_ptr_check>
 80010d2:	4603      	mov	r3, r0
 80010d4:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80010d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d117      	bne.n	800110e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	789b      	ldrb	r3, [r3, #2]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d003      	beq.n	80010ee <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010ec:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685c      	ldr	r4, [r3, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7858      	ldrb	r0, [r3, #1]
 80010f6:	89bb      	ldrh	r3, [r7, #12]
 80010f8:	7bf9      	ldrb	r1, [r7, #15]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	47a0      	blx	r4
 80010fe:	4603      	mov	r3, r0
 8001100:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8001102:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800110a:	23fc      	movs	r3, #252	@ 0xfc
 800110c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800110e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001112:	4618      	mov	r0, r3
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}

0800111a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800111a:	b590      	push	{r4, r7, lr}
 800111c:	b08d      	sub	sp, #52	@ 0x34
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4613      	mov	r3, r2
 8001128:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b0a      	cmp	r3, #10
 800112e:	d901      	bls.n	8001134 <bme280_set_regs+0x1a>
		len = 10;
 8001130:	230a      	movs	r3, #10
 8001132:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001134:	6838      	ldr	r0, [r7, #0]
 8001136:	f001 fa59 	bl	80025ec <null_ptr_check>
 800113a:	4603      	mov	r3, r0
 800113c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8001140:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001144:	2b00      	cmp	r3, #0
 8001146:	d156      	bne.n	80011f6 <bme280_set_regs+0xdc>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d053      	beq.n	80011f6 <bme280_set_regs+0xdc>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d050      	beq.n	80011f6 <bme280_set_regs+0xdc>
		if (len != 0) {
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d049      	beq.n	80011ee <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	789b      	ldrb	r3, [r3, #2]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d01a      	beq.n	800119e <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001168:	2300      	movs	r3, #0
 800116a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800116e:	e011      	b.n	8001194 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001170:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800117e:	68f9      	ldr	r1, [r7, #12]
 8001180:	440b      	add	r3, r1
 8001182:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800118a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800118e:	3301      	adds	r3, #1
 8001190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001194:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	429a      	cmp	r2, r3
 800119c:	d3e8      	bcc.n	8001170 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d90d      	bls.n	80011c0 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f107 0114 	add.w	r1, r7, #20
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f001 f8c9 	bl	8002344 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	3b01      	subs	r3, #1
 80011bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80011be:	e001      	b.n	80011c4 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689c      	ldr	r4, [r3, #8]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	7858      	ldrb	r0, [r3, #1]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	7819      	ldrb	r1, [r3, #0]
 80011d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011d2:	f107 0214 	add.w	r2, r7, #20
 80011d6:	47a0      	blx	r4
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80011de:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 80011e6:	23fc      	movs	r3, #252	@ 0xfc
 80011e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80011ec:	e007      	b.n	80011fe <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80011ee:	23fd      	movs	r3, #253	@ 0xfd
 80011f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80011f4:	e003      	b.n	80011fe <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80011f6:	23ff      	movs	r3, #255	@ 0xff
 80011f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011fc:	e000      	b.n	8001200 <bme280_set_regs+0xe6>
		if (len != 0) {
 80011fe:	bf00      	nop
	}


	return rslt;
 8001200:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001204:	4618      	mov	r0, r3
 8001206:	3734      	adds	r7, #52	@ 0x34
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}

0800120c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001218:	6838      	ldr	r0, [r7, #0]
 800121a:	f001 f9e7 	bl	80025ec <null_ptr_check>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d13f      	bne.n	80012aa <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800122a:	f107 030e 	add.w	r3, r7, #14
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f874 	bl	800131e <bme280_get_sensor_mode>
 8001236:	4603      	mov	r3, r0
 8001238:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800123a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d107      	bne.n	8001252 <bme280_set_sensor_settings+0x46>
 8001242:	7bbb      	ldrb	r3, [r7, #14]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d004      	beq.n	8001252 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001248:	6838      	ldr	r0, [r7, #0]
 800124a:	f000 fb3b 	bl	80018c4 <put_device_to_sleep>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d127      	bne.n	80012aa <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4619      	mov	r1, r3
 800125e:	2007      	movs	r0, #7
 8001260:	f001 f9a8 	bl	80025b4 <are_settings_changed>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d009      	beq.n	800127e <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f973 	bl	8001560 <set_osr_settings>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d111      	bne.n	80012aa <bme280_set_sensor_settings+0x9e>
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4619      	mov	r1, r3
 800128a:	2018      	movs	r0, #24
 800128c:	f001 f992 	bl	80025b4 <are_settings_changed>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d009      	beq.n	80012aa <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f9fa 	bl	800169a <set_filter_standby_settings>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	6039      	str	r1, [r7, #0]
 80012c0:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012c2:	6838      	ldr	r0, [r7, #0]
 80012c4:	f001 f992 	bl	80025ec <null_ptr_check>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80012cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d11e      	bne.n	8001312 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80012d4:	f107 030e 	add.w	r3, r7, #14
 80012d8:	6839      	ldr	r1, [r7, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f81f 	bl	800131e <bme280_get_sensor_mode>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80012e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d107      	bne.n	80012fc <bme280_set_sensor_mode+0x46>
 80012ec:	7bbb      	ldrb	r3, [r7, #14]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f000 fae6 	bl	80018c4 <put_device_to_sleep>
 80012f8:	4603      	mov	r3, r0
 80012fa:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 80012fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d106      	bne.n	8001312 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 faa8 	bl	800185e <write_power_mode>
 800130e:	4603      	mov	r3, r0
 8001310:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f001 f95f 	bl	80025ec <null_ptr_check>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10e      	bne.n	8001358 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2201      	movs	r2, #1
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	20f4      	movs	r0, #244	@ 0xf4
 8001342:	f7ff feba 	bl	80010ba <bme280_get_regs>
 8001346:	4603      	mov	r3, r0
 8001348:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	b2da      	uxtb	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001358:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 800136c:	23e0      	movs	r3, #224	@ 0xe0
 800136e:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001370:	23b6      	movs	r3, #182	@ 0xb6
 8001372:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f001 f939 	bl	80025ec <null_ptr_check>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10d      	bne.n	80013a2 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001386:	f107 010d 	add.w	r1, r7, #13
 800138a:	f107 000e 	add.w	r0, r7, #14
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f7ff fec2 	bl	800111a <bme280_set_regs>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2002      	movs	r0, #2
 80013a0:	4798      	blx	r3
	}

	return rslt;
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b08a      	sub	sp, #40	@ 0x28
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
	struct bme280_uncomp_data uncomp_data = {0};
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f001 f90a 	bl	80025ec <null_ptr_check>
 80013d8:	4603      	mov	r3, r0
 80013da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80013de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d124      	bne.n	8001430 <bme280_get_sensor_data+0x82>
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d021      	beq.n	8001430 <bme280_get_sensor_data+0x82>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80013ec:	f107 011c 	add.w	r1, r7, #28
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2208      	movs	r2, #8
 80013f4:	20f7      	movs	r0, #247	@ 0xf7
 80013f6:	f7ff fe60 	bl	80010ba <bme280_get_regs>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 8001400:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001404:	2b00      	cmp	r3, #0
 8001406:	d116      	bne.n	8001436 <bme280_get_sensor_data+0x88>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001408:	f107 0210 	add.w	r2, r7, #16
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f815 	bl	8001442 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3310      	adds	r3, #16
 800141c:	f107 0110 	add.w	r1, r7, #16
 8001420:	7bf8      	ldrb	r0, [r7, #15]
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f000 f853 	bl	80014ce <bme280_compensate_data>
 8001428:	4603      	mov	r3, r0
 800142a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 800142e:	e002      	b.n	8001436 <bme280_get_sensor_data+0x88>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001430:	23ff      	movs	r3, #255	@ 0xff
 8001432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 8001436:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800143a:	4618      	mov	r0, r3
 800143c:	3728      	adds	r7, #40	@ 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001442:	b480      	push	{r7}
 8001444:	b087      	sub	sp, #28
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	031b      	lsls	r3, r3, #12
 8001452:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3301      	adds	r3, #1
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3302      	adds	r3, #2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	b2db      	uxtb	r3, r3
 8001468:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	431a      	orrs	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	431a      	orrs	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3303      	adds	r3, #3
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	031b      	lsls	r3, r3, #12
 8001480:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3305      	adds	r3, #5
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	b2db      	uxtb	r3, r3
 8001496:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	431a      	orrs	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	431a      	orrs	r2, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3306      	adds	r3, #6
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3307      	adds	r3, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	431a      	orrs	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	609a      	str	r2, [r3, #8]
}
 80014c2:	bf00      	nop
 80014c4:	371c      	adds	r7, #28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4603      	mov	r3, r0
 80014dc:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d033      	beq.n	8001550 <bme280_compensate_data+0x82>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d030      	beq.n	8001550 <bme280_compensate_data+0x82>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d02d      	beq.n	8001550 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	68b8      	ldr	r0, [r7, #8]
 8001514:	f000 fa24 	bl	8001960 <compensate_temperature>
 8001518:	4602      	mov	r2, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d006      	beq.n	8001536 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f000 fa7a 	bl	8001a24 <compensate_pressure>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d009      	beq.n	8001554 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001540:	6839      	ldr	r1, [r7, #0]
 8001542:	68b8      	ldr	r0, [r7, #8]
 8001544:	f000 fe0e 	bl	8002164 <compensate_humidity>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 800154e:	e001      	b.n	8001554 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001550:	23ff      	movs	r3, #255	@ 0xff
 8001552:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001554:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800156e:	2301      	movs	r3, #1
 8001570:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	68b8      	ldr	r0, [r7, #8]
 8001580:	f000 f815 	bl	80015ae <set_osr_humidity_settings>
 8001584:	4603      	mov	r3, r0
 8001586:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f842 	bl	8001622 <set_osr_press_temp_settings>
 800159e:	4603      	mov	r3, r0
 80015a0:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80015a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80015b8:	23f2      	movs	r3, #242	@ 0xf2
 80015ba:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	789b      	ldrb	r3, [r3, #2]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80015c8:	f107 010e 	add.w	r1, r7, #14
 80015cc:	f107 000c 	add.w	r0, r7, #12
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f7ff fda1 	bl	800111a <bme280_set_regs>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 80015dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d118      	bne.n	8001616 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80015e4:	23f4      	movs	r3, #244	@ 0xf4
 80015e6:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80015e8:	7b38      	ldrb	r0, [r7, #12]
 80015ea:	f107 010d 	add.w	r1, r7, #13
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f7ff fd62 	bl	80010ba <bme280_get_regs>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001602:	f107 010d 	add.w	r1, r7, #13
 8001606:	f107 000c 	add.w	r0, r7, #12
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2201      	movs	r2, #1
 800160e:	f7ff fd84 	bl	800111a <bme280_set_regs>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001630:	23f4      	movs	r3, #244	@ 0xf4
 8001632:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001634:	7db8      	ldrb	r0, [r7, #22]
 8001636:	f107 0115 	add.w	r1, r7, #21
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f7ff fd3c 	bl	80010ba <bme280_get_regs>
 8001642:	4603      	mov	r3, r0
 8001644:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d11f      	bne.n	800168e <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8001658:	f107 0315 	add.w	r3, r7, #21
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f890 	bl	8001784 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 800166e:	f107 0315 	add.w	r3, r7, #21
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f8a3 	bl	80017c0 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800167a:	f107 0115 	add.w	r1, r7, #21
 800167e:	f107 0016 	add.w	r0, r7, #22
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f7ff fd48 	bl	800111a <bme280_set_regs>
 800168a:	4603      	mov	r3, r0
 800168c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800168e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80016a8:	23f5      	movs	r3, #245	@ 0xf5
 80016aa:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80016ac:	7db8      	ldrb	r0, [r7, #22]
 80016ae:	f107 0115 	add.w	r1, r7, #21
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f7ff fd00 	bl	80010ba <bme280_get_regs>
 80016ba:	4603      	mov	r3, r0
 80016bc:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80016be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d11f      	bne.n	8001706 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 80016d0:	f107 0315 	add.w	r3, r7, #21
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f81b 	bl	8001712 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80016e6:	f107 0315 	add.w	r3, r7, #21
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f82e 	bl	800174e <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80016f2:	f107 0115 	add.w	r1, r7, #21
 80016f6:	f107 0016 	add.w	r0, r7, #22
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f7ff fd0c 	bl	800111a <bme280_set_regs>
 8001702:	4603      	mov	r3, r0
 8001704:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001706:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b25b      	sxtb	r3, r3
 8001722:	f023 031c 	bic.w	r3, r3, #28
 8001726:	b25a      	sxtb	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	78db      	ldrb	r3, [r3, #3]
 800172c:	b25b      	sxtb	r3, r3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	b25b      	sxtb	r3, r3
 8001732:	f003 031c 	and.w	r3, r3, #28
 8001736:	b25b      	sxtb	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b25b      	sxtb	r3, r3
 800173c:	b2da      	uxtb	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	701a      	strb	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b25b      	sxtb	r3, r3
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	b25a      	sxtb	r2, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	791b      	ldrb	r3, [r3, #4]
 8001768:	b25b      	sxtb	r3, r3
 800176a:	015b      	lsls	r3, r3, #5
 800176c:	b25b      	sxtb	r3, r3
 800176e:	4313      	orrs	r3, r2
 8001770:	b25b      	sxtb	r3, r3
 8001772:	b2da      	uxtb	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	701a      	strb	r2, [r3, #0]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b25b      	sxtb	r3, r3
 8001794:	f023 031c 	bic.w	r3, r3, #28
 8001798:	b25a      	sxtb	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	f003 031c 	and.w	r3, r3, #28
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	701a      	strb	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	b25a      	sxtb	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	015b      	lsls	r3, r3, #5
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	701a      	strb	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	b2da      	uxtb	r2, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3302      	adds	r3, #2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	109b      	asrs	r3, r3, #2
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	b2da      	uxtb	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3302      	adds	r3, #2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	095b      	lsrs	r3, r3, #5
 800182a:	b2da      	uxtb	r2, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3303      	adds	r3, #3
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	109b      	asrs	r3, r3, #2
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	b2da      	uxtb	r2, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3303      	adds	r3, #3
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	b2da      	uxtb	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	711a      	strb	r2, [r3, #4]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	6039      	str	r1, [r7, #0]
 8001868:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800186a:	23f4      	movs	r3, #244	@ 0xf4
 800186c:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 800186e:	7bb8      	ldrb	r0, [r7, #14]
 8001870:	f107 010d 	add.w	r1, r7, #13
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	f7ff fc1f 	bl	80010ba <bme280_get_regs>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d117      	bne.n	80018b8 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001888:	7b7b      	ldrb	r3, [r7, #13]
 800188a:	b25b      	sxtb	r3, r3
 800188c:	f023 0303 	bic.w	r3, r3, #3
 8001890:	b25a      	sxtb	r2, r3
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	b25b      	sxtb	r3, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80018a4:	f107 010d 	add.w	r1, r7, #13
 80018a8:	f107 000e 	add.w	r0, r7, #14
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f7ff fc33 	bl	800111a <bme280_set_regs>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80018b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80018cc:	f107 0110 	add.w	r1, r7, #16
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2204      	movs	r2, #4
 80018d4:	20f2      	movs	r0, #242	@ 0xf2
 80018d6:	f7ff fbf0 	bl	80010ba <bme280_get_regs>
 80018da:	4603      	mov	r3, r0
 80018dc:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80018de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80018e6:	f107 0208 	add.w	r2, r7, #8
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff80 	bl	80017f6 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fd34 	bl	8001364 <bme280_soft_reset>
 80018fc:	4603      	mov	r3, r0
 80018fe:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f808 	bl	8001924 <reload_device_settings>
 8001914:	4603      	mov	r3, r0
 8001916:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001918:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	201f      	movs	r0, #31
 8001934:	f7ff fe14 	bl	8001560 <set_osr_settings>
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d106      	bne.n	8001952 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	201f      	movs	r0, #31
 800194a:	f7ff fea6 	bl	800169a <set_filter_standby_settings>
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	@ 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 800196a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a20 <compensate_temperature+0xc0>)
 800196c:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 800196e:	f242 1334 	movw	r3, #8500	@ 0x2134
 8001972:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	8812      	ldrh	r2, [r2, #0]
 800197e:	0052      	lsls	r2, r2, #1
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800198a:	461a      	mov	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	da01      	bge.n	800199a <compensate_temperature+0x3a>
 8001996:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800199a:	12db      	asrs	r3, r3, #11
 800199c:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	8812      	ldrh	r2, [r2, #0]
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	fb03 f303 	mul.w	r3, r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da01      	bge.n	80019ba <compensate_temperature+0x5a>
 80019b6:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80019ba:	131b      	asrs	r3, r3, #12
 80019bc:	461a      	mov	r2, r3
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da02      	bge.n	80019d2 <compensate_temperature+0x72>
 80019cc:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80019d0:	333f      	adds	r3, #63	@ 0x3f
 80019d2:	139b      	asrs	r3, r3, #14
 80019d4:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	441a      	add	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	3380      	adds	r3, #128	@ 0x80
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	da00      	bge.n	80019f2 <compensate_temperature+0x92>
 80019f0:	33ff      	adds	r3, #255	@ 0xff
 80019f2:	121b      	asrs	r3, r3, #8
 80019f4:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	da02      	bge.n	8001a04 <compensate_temperature+0xa4>
		temperature = temperature_min;
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	e005      	b.n	8001a10 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dd01      	ble.n	8001a10 <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001a10:	69fb      	ldr	r3, [r7, #28]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	@ 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	fffff060 	.word	0xfffff060

08001a24 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a28:	b0e8      	sub	sp, #416	@ 0x1a0
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
 8001a30:	f8c7 1168 	str.w	r1, [r7, #360]	@ 0x168
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001a34:	4bbf      	ldr	r3, [pc, #764]	@ (8001d34 <compensate_pressure+0x310>)
 8001a36:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
	uint32_t pressure_max = 11000000;
 8001a3a:	4bbf      	ldr	r3, [pc, #764]	@ (8001d38 <compensate_pressure+0x314>)
 8001a3c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001a40:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a46:	17da      	asrs	r2, r3, #31
 8001a48:	4698      	mov	r8, r3
 8001a4a:	4691      	mov	r9, r2
 8001a4c:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 8001a50:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001a54:	e9c7 ab62 	strd	sl, fp, [r7, #392]	@ 0x188
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001a58:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8001a5c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001a60:	fb03 f102 	mul.w	r1, r3, r2
 8001a64:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8001a68:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	18ca      	adds	r2, r1, r3
 8001a72:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001a76:	fba3 4503 	umull	r4, r5, r3, r3
 8001a7a:	1953      	adds	r3, r2, r5
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001a82:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	17da      	asrs	r2, r3, #31
 8001a8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001a8e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001a92:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001a96:	4603      	mov	r3, r0
 8001a98:	fb03 f205 	mul.w	r2, r3, r5
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	fb04 f303 	mul.w	r3, r4, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	fba4 1202 	umull	r1, r2, r4, r2
 8001aaa:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001aae:	460a      	mov	r2, r1
 8001ab0:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 8001ab4:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001ab8:	4413      	add	r3, r2
 8001aba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001abe:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8001ac2:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
 8001ac6:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001aca:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001ace:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	17da      	asrs	r2, r3, #31
 8001ad6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001ada:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001ade:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ae2:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8001ae6:	462a      	mov	r2, r5
 8001ae8:	fb02 f203 	mul.w	r2, r2, r3
 8001aec:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001af0:	4621      	mov	r1, r4
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	441a      	add	r2, r3
 8001af8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001afc:	4621      	mov	r1, r4
 8001afe:	fba3 1301 	umull	r1, r3, r3, r1
 8001b02:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001b06:	460b      	mov	r3, r1
 8001b08:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001b0c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001b10:	18d3      	adds	r3, r2, r3
 8001b12:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001b16:	f04f 0000 	mov.w	r0, #0
 8001b1a:	f04f 0100 	mov.w	r1, #0
 8001b1e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001b22:	462b      	mov	r3, r5
 8001b24:	0459      	lsls	r1, r3, #17
 8001b26:	4623      	mov	r3, r4
 8001b28:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001b2c:	4623      	mov	r3, r4
 8001b2e:	0458      	lsls	r0, r3, #17
 8001b30:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8001b34:	1814      	adds	r4, r2, r0
 8001b36:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001b3a:	414b      	adcs	r3, r1
 8001b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001b40:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001b44:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001b48:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001b4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	17da      	asrs	r2, r3, #31
 8001b54:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001b58:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001b5c:	f04f 0000 	mov.w	r0, #0
 8001b60:	f04f 0100 	mov.w	r1, #0
 8001b64:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001b68:	00d9      	lsls	r1, r3, #3
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8001b70:	1814      	adds	r4, r2, r0
 8001b72:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8001b76:	414b      	adcs	r3, r1
 8001b78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001b7c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8001b80:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001b84:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8001b88:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001b8c:	fb03 f102 	mul.w	r1, r3, r2
 8001b90:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8001b94:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	18ca      	adds	r2, r1, r3
 8001b9e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ba2:	fba3 1303 	umull	r1, r3, r3, r3
 8001ba6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001baa:	460b      	mov	r3, r1
 8001bac:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001bb0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001bb4:	18d3      	adds	r3, r2, r3
 8001bb6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001bba:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001bbe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	17da      	asrs	r2, r3, #31
 8001bc6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001bca:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001bce:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8001bd2:	462b      	mov	r3, r5
 8001bd4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001bd8:	4642      	mov	r2, r8
 8001bda:	fb02 f203 	mul.w	r2, r2, r3
 8001bde:	464b      	mov	r3, r9
 8001be0:	4621      	mov	r1, r4
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	4622      	mov	r2, r4
 8001bea:	4641      	mov	r1, r8
 8001bec:	fba2 1201 	umull	r1, r2, r2, r1
 8001bf0:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8001bfa:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8001bfe:	4413      	add	r3, r2
 8001c00:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c04:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da09      	bge.n	8001c20 <compensate_pressure+0x1fc>
 8001c0c:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001c10:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001c14:	f143 0300 	adc.w	r3, r3, #0
 8001c18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c1c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	0a10      	lsrs	r0, r2, #8
 8001c2a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001c2e:	1219      	asrs	r1, r3, #8
 8001c30:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001c34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	17da      	asrs	r2, r3, #31
 8001c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001c40:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001c44:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c48:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001c4c:	464a      	mov	r2, r9
 8001c4e:	fb02 f203 	mul.w	r2, r2, r3
 8001c52:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001c56:	4644      	mov	r4, r8
 8001c58:	fb04 f303 	mul.w	r3, r4, r3
 8001c5c:	441a      	add	r2, r3
 8001c5e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c62:	4644      	mov	r4, r8
 8001c64:	fba3 4304 	umull	r4, r3, r3, r4
 8001c68:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001c72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001c76:	18d3      	adds	r3, r2, r3
 8001c78:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8001c88:	464c      	mov	r4, r9
 8001c8a:	0323      	lsls	r3, r4, #12
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001c92:	4644      	mov	r4, r8
 8001c94:	0322      	lsls	r2, r4, #12
 8001c96:	1884      	adds	r4, r0, r2
 8001c98:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001c9c:	eb41 0303 	adc.w	r3, r1, r3
 8001ca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001ca4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8001ca8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var3 = ((int64_t)1) * 140737488355328;
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cb4:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001cb8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8001cbc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001cc0:	1884      	adds	r4, r0, r2
 8001cc2:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8001cc6:	eb41 0303 	adc.w	r3, r1, r3
 8001cca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001cce:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001cd2:	88db      	ldrh	r3, [r3, #6]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001cdc:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001ce0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001ce4:	462b      	mov	r3, r5
 8001ce6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001cea:	4642      	mov	r2, r8
 8001cec:	fb02 f203 	mul.w	r2, r2, r3
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	fba2 1201 	umull	r1, r2, r2, r1
 8001d02:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8001d06:	460a      	mov	r2, r1
 8001d08:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 8001d0c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001d10:	4413      	add	r3, r2
 8001d12:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001d16:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	da0e      	bge.n	8001d3c <compensate_pressure+0x318>
 8001d1e:	1e51      	subs	r1, r2, #1
 8001d20:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001d24:	f143 0301 	adc.w	r3, r3, #1
 8001d28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d2c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001d30:	e004      	b.n	8001d3c <compensate_pressure+0x318>
 8001d32:	bf00      	nop
 8001d34:	002dc6c0 	.word	0x002dc6c0
 8001d38:	00a7d8c0 	.word	0x00a7d8c0
 8001d3c:	f04f 0000 	mov.w	r0, #0
 8001d40:	f04f 0100 	mov.w	r1, #0
 8001d44:	1058      	asrs	r0, r3, #1
 8001d46:	17d9      	asrs	r1, r3, #31
 8001d48:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001d4c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001d50:	4313      	orrs	r3, r2
 8001d52:	f000 81f8 	beq.w	8002146 <compensate_pressure+0x722>
		var4 = 1048576 - uncomp_data->pressure;
 8001d56:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001d60:	2200      	movs	r2, #0
 8001d62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d64:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d66:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8001d6a:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001d6e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8001d72:	f04f 0000 	mov.w	r0, #0
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	07d9      	lsls	r1, r3, #31
 8001d7c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001d80:	07d0      	lsls	r0, r2, #31
 8001d82:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8001d86:	1a84      	subs	r4, r0, r2
 8001d88:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8001d8c:	eb61 0303 	sbc.w	r3, r1, r3
 8001d90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d94:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001d98:	4622      	mov	r2, r4
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	1891      	adds	r1, r2, r2
 8001d9e:	6739      	str	r1, [r7, #112]	@ 0x70
 8001da0:	415b      	adcs	r3, r3
 8001da2:	677b      	str	r3, [r7, #116]	@ 0x74
 8001da4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001da8:	4621      	mov	r1, r4
 8001daa:	1851      	adds	r1, r2, r1
 8001dac:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001dae:	4629      	mov	r1, r5
 8001db0:	414b      	adcs	r3, r1
 8001db2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001dc0:	4649      	mov	r1, r9
 8001dc2:	018b      	lsls	r3, r1, #6
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dca:	4641      	mov	r1, r8
 8001dcc:	018a      	lsls	r2, r1, #6
 8001dce:	4641      	mov	r1, r8
 8001dd0:	1889      	adds	r1, r1, r2
 8001dd2:	6639      	str	r1, [r7, #96]	@ 0x60
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	eb43 0101 	adc.w	r1, r3, r1
 8001dda:	6679      	str	r1, [r7, #100]	@ 0x64
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001de8:	4649      	mov	r1, r9
 8001dea:	008b      	lsls	r3, r1, #2
 8001dec:	4641      	mov	r1, r8
 8001dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001df2:	4641      	mov	r1, r8
 8001df4:	008a      	lsls	r2, r1, #2
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	189b      	adds	r3, r3, r2
 8001e00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e02:	460b      	mov	r3, r1
 8001e04:	462a      	mov	r2, r5
 8001e06:	eb42 0303 	adc.w	r3, r2, r3
 8001e0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001e18:	4649      	mov	r1, r9
 8001e1a:	008b      	lsls	r3, r1, #2
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e22:	4641      	mov	r1, r8
 8001e24:	008a      	lsls	r2, r1, #2
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	189b      	adds	r3, r3, r2
 8001e30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e34:	462b      	mov	r3, r5
 8001e36:	460a      	mov	r2, r1
 8001e38:	eb42 0303 	adc.w	r3, r2, r3
 8001e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e40:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001e44:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001e48:	f7fe ff06 	bl	8000c58 <__aeabi_ldivmod>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001e54:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001e58:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	17da      	asrs	r2, r3, #31
 8001e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e68:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da08      	bge.n	8001e82 <compensate_pressure+0x45e>
 8001e70:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001e74:	1851      	adds	r1, r2, r1
 8001e76:	6539      	str	r1, [r7, #80]	@ 0x50
 8001e78:	f143 0300 	adc.w	r3, r3, #0
 8001e7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e7e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e82:	f04f 0000 	mov.w	r0, #0
 8001e86:	f04f 0100 	mov.w	r1, #0
 8001e8a:	0b50      	lsrs	r0, r2, #13
 8001e8c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e90:	1359      	asrs	r1, r3, #13
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	fb02 f001 	mul.w	r0, r2, r1
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	fb01 f103 	mul.w	r1, r1, r3
 8001ea6:	4401      	add	r1, r0
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	fba0 2302 	umull	r2, r3, r0, r2
 8001eae:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001eb8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001ebc:	18cb      	adds	r3, r1, r3
 8001ebe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001ec2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da08      	bge.n	8001edc <compensate_pressure+0x4b8>
 8001eca:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001ece:	1851      	adds	r1, r2, r1
 8001ed0:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ed2:	f143 0300 	adc.w	r3, r3, #0
 8001ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001edc:	f04f 0000 	mov.w	r0, #0
 8001ee0:	f04f 0100 	mov.w	r1, #0
 8001ee4:	0b50      	lsrs	r0, r2, #13
 8001ee6:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001eea:	1359      	asrs	r1, r3, #13
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	fb02 f001 	mul.w	r0, r2, r1
 8001efa:	4621      	mov	r1, r4
 8001efc:	fb01 f103 	mul.w	r1, r1, r3
 8001f00:	4401      	add	r1, r0
 8001f02:	4620      	mov	r0, r4
 8001f04:	fba0 2302 	umull	r2, r3, r0, r2
 8001f08:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001f12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001f16:	18cb      	adds	r3, r1, r3
 8001f18:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001f1c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	da08      	bge.n	8001f36 <compensate_pressure+0x512>
 8001f24:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001f28:	1851      	adds	r1, r2, r1
 8001f2a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f2c:	f143 0300 	adc.w	r3, r3, #0
 8001f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	0e50      	lsrs	r0, r2, #25
 8001f40:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001f44:	1659      	asrs	r1, r3, #25
 8001f46:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001f4a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f4e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	17da      	asrs	r2, r3, #31
 8001f56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f5a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001f5e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001f62:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001f66:	462a      	mov	r2, r5
 8001f68:	fb02 f203 	mul.w	r2, r2, r3
 8001f6c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001f70:	4621      	mov	r1, r4
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	441a      	add	r2, r3
 8001f78:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	fba3 1301 	umull	r1, r3, r3, r1
 8001f82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001f86:	460b      	mov	r3, r1
 8001f88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f90:	18d3      	adds	r3, r2, r3
 8001f92:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001f96:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da07      	bge.n	8001fae <compensate_pressure+0x58a>
 8001f9e:	4970      	ldr	r1, [pc, #448]	@ (8002160 <compensate_pressure+0x73c>)
 8001fa0:	1851      	adds	r1, r2, r1
 8001fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001fa4:	f143 0300 	adc.w	r3, r3, #0
 8001fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001faa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	0cd0      	lsrs	r0, r2, #19
 8001fb8:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001fbc:	14d9      	asrs	r1, r3, #19
 8001fbe:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001fc2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8001fc6:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001fca:	1884      	adds	r4, r0, r2
 8001fcc:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 8001fd0:	eb41 0303 	adc.w	r3, r1, r3
 8001fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001fd8:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8001fdc:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	1889      	adds	r1, r1, r2
 8001fe4:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8001fe8:	4629      	mov	r1, r5
 8001fea:	eb43 0101 	adc.w	r1, r3, r1
 8001fee:	f8c7 10bc 	str.w	r1, [r7, #188]	@ 0xbc
 8001ff2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da07      	bge.n	800200a <compensate_pressure+0x5e6>
 8001ffa:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001ffe:	6339      	str	r1, [r7, #48]	@ 0x30
 8002000:	f143 0300 	adc.w	r3, r3, #0
 8002004:	637b      	str	r3, [r7, #52]	@ 0x34
 8002006:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	0a10      	lsrs	r0, r2, #8
 8002014:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002018:	1219      	asrs	r1, r3, #8
 800201a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800201e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002022:	b21b      	sxth	r3, r3
 8002024:	17da      	asrs	r2, r3, #31
 8002026:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800202a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 800203a:	464c      	mov	r4, r9
 800203c:	0123      	lsls	r3, r4, #4
 800203e:	4644      	mov	r4, r8
 8002040:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002044:	4644      	mov	r4, r8
 8002046:	0122      	lsls	r2, r4, #4
 8002048:	1884      	adds	r4, r0, r2
 800204a:	62bc      	str	r4, [r7, #40]	@ 0x28
 800204c:	eb41 0303 	adc.w	r3, r1, r3
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002052:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002056:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 800205a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 800205e:	f04f 0000 	mov.w	r0, #0
 8002062:	f04f 0100 	mov.w	r1, #0
 8002066:	0fd8      	lsrs	r0, r3, #31
 8002068:	2100      	movs	r1, #0
 800206a:	1884      	adds	r4, r0, r2
 800206c:	623c      	str	r4, [r7, #32]
 800206e:	eb41 0303 	adc.w	r3, r1, r3
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002080:	4621      	mov	r1, r4
 8002082:	084a      	lsrs	r2, r1, #1
 8002084:	4629      	mov	r1, r5
 8002086:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800208a:	4629      	mov	r1, r5
 800208c:	104b      	asrs	r3, r1, #1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	1894      	adds	r4, r2, r2
 8002098:	61bc      	str	r4, [r7, #24]
 800209a:	415b      	adcs	r3, r3
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020a2:	1814      	adds	r4, r2, r0
 80020a4:	613c      	str	r4, [r7, #16]
 80020a6:	414b      	adcs	r3, r1
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80020b6:	464c      	mov	r4, r9
 80020b8:	0163      	lsls	r3, r4, #5
 80020ba:	4644      	mov	r4, r8
 80020bc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80020c0:	4644      	mov	r4, r8
 80020c2:	0162      	lsls	r2, r4, #5
 80020c4:	4644      	mov	r4, r8
 80020c6:	18a4      	adds	r4, r4, r2
 80020c8:	60bc      	str	r4, [r7, #8]
 80020ca:	464c      	mov	r4, r9
 80020cc:	eb43 0404 	adc.w	r4, r3, r4
 80020d0:	60fc      	str	r4, [r7, #12]
 80020d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020d6:	4623      	mov	r3, r4
 80020d8:	181b      	adds	r3, r3, r0
 80020da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80020de:	462b      	mov	r3, r5
 80020e0:	eb41 0303 	adc.w	r3, r1, r3
 80020e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80020e8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da07      	bge.n	8002100 <compensate_pressure+0x6dc>
 80020f0:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	f143 0300 	adc.w	r3, r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	09d0      	lsrs	r0, r2, #7
 800210a:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800210e:	11d9      	asrs	r1, r3, #7
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4613      	mov	r3, r2
 8002116:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

		if (pressure < pressure_min)
 800211a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800211e:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8002122:	429a      	cmp	r2, r3
 8002124:	d204      	bcs.n	8002130 <compensate_pressure+0x70c>
			pressure = pressure_min;
 8002126:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800212a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800212e:	e00e      	b.n	800214e <compensate_pressure+0x72a>
		else if (pressure > pressure_max)
 8002130:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002134:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002138:	429a      	cmp	r2, r3
 800213a:	d908      	bls.n	800214e <compensate_pressure+0x72a>
			pressure = pressure_max;
 800213c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002140:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002144:	e003      	b.n	800214e <compensate_pressure+0x72a>
	} else {
		pressure = pressure_min;
 8002146:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800214a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
	}

	return pressure;
 800214e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
}
 8002152:	4618      	mov	r0, r3
 8002154:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8002158:	46bd      	mov	sp, r7
 800215a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800215e:	bf00      	nop
 8002160:	0007ffff 	.word	0x0007ffff

08002164 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8002164:	b480      	push	{r7}
 8002166:	b08b      	sub	sp, #44	@ 0x2c
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 800216e:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8002172:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800217c:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	039b      	lsls	r3, r3, #14
 8002184:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800218c:	051b      	lsls	r3, r3, #20
 800218e:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002196:	461a      	mov	r2, r3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	1ad2      	subs	r2, r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da02      	bge.n	80021b8 <compensate_humidity+0x54>
 80021b2:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80021b6:	337f      	adds	r3, #127	@ 0x7f
 80021b8:	13db      	asrs	r3, r3, #15
 80021ba:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 80021c2:	461a      	mov	r2, r3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da01      	bge.n	80021d2 <compensate_humidity+0x6e>
 80021ce:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80021d2:	129b      	asrs	r3, r3, #10
 80021d4:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	7f1b      	ldrb	r3, [r3, #28]
 80021da:	461a      	mov	r2, r3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da01      	bge.n	80021ea <compensate_humidity+0x86>
 80021e6:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80021ea:	12db      	asrs	r3, r3, #11
 80021ec:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	da01      	bge.n	8002202 <compensate_humidity+0x9e>
 80021fe:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002202:	129b      	asrs	r3, r3, #10
 8002204:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8002208:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002210:	461a      	mov	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800221c:	2b00      	cmp	r3, #0
 800221e:	da02      	bge.n	8002226 <compensate_humidity+0xc2>
 8002220:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8002224:	333f      	adds	r3, #63	@ 0x3f
 8002226:	139b      	asrs	r3, r3, #14
 8002228:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	da02      	bge.n	8002240 <compensate_humidity+0xdc>
 800223a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800223e:	337f      	adds	r3, #127	@ 0x7f
 8002240:	13db      	asrs	r3, r3, #15
 8002242:	461a      	mov	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	da02      	bge.n	8002250 <compensate_humidity+0xec>
 800224a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800224e:	337f      	adds	r3, #127	@ 0x7f
 8002250:	13db      	asrs	r3, r3, #15
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	da00      	bge.n	800225c <compensate_humidity+0xf8>
 800225a:	337f      	adds	r3, #127	@ 0x7f
 800225c:	11db      	asrs	r3, r3, #7
 800225e:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	7e1b      	ldrb	r3, [r3, #24]
 8002264:	461a      	mov	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	da00      	bge.n	8002272 <compensate_humidity+0x10e>
 8002270:	330f      	adds	r3, #15
 8002272:	111b      	asrs	r3, r3, #4
 8002274:	425b      	negs	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002284:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800228c:	bfa8      	it	ge
 800228e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8002292:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	da01      	bge.n	800229e <compensate_humidity+0x13a>
 800229a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800229e:	131b      	asrs	r3, r3, #12
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 80022a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d901      	bls.n	80022ae <compensate_humidity+0x14a>
		humidity = humidity_max;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	372c      	adds	r7, #44	@ 0x2c
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	@ 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80022c4:	2388      	movs	r3, #136	@ 0x88
 80022c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80022ca:	f107 030c 	add.w	r3, r7, #12
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
 80022d8:	611a      	str	r2, [r3, #16]
 80022da:	615a      	str	r2, [r3, #20]
 80022dc:	831a      	strh	r2, [r3, #24]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80022de:	f107 010c 	add.w	r1, r7, #12
 80022e2:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	221a      	movs	r2, #26
 80022ea:	f7fe fee6 	bl	80010ba <bme280_get_regs>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 80022f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d11d      	bne.n	8002338 <get_calib_data+0x7c>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f84a 	bl	800239c <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002308:	23e1      	movs	r3, #225	@ 0xe1
 800230a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800230e:	f107 010c 	add.w	r1, r7, #12
 8002312:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2207      	movs	r2, #7
 800231a:	f7fe fece 	bl	80010ba <bme280_get_regs>
 800231e:	4603      	mov	r3, r0
 8002320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 8002324:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <get_calib_data+0x7c>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f8ee 	bl	8002514 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8002338:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800233c:	4618      	mov	r0, r3
 800233e:	3728      	adds	r7, #40	@ 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
 8002356:	e016      	b.n	8002386 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	441a      	add	r2, r3
 800235e:	7dfb      	ldrb	r3, [r7, #23]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	3b01      	subs	r3, #1
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	440b      	add	r3, r1
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	441a      	add	r2, r3
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4619      	mov	r1, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	440b      	add	r3, r1
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8002380:	7dfb      	ldrb	r3, [r7, #23]
 8002382:	3301      	adds	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
 8002386:	7dfa      	ldrb	r2, [r7, #23]
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	429a      	cmp	r2, r3
 800238c:	d3e4      	bcc.n	8002358 <interleave_reg_addr+0x14>
	}
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	3310      	adds	r3, #16
 80023aa:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3301      	adds	r3, #1
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b21b      	sxth	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3303      	adds	r3, #3
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	b21a      	sxth	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3302      	adds	r3, #2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b21b      	sxth	r3, r3
 80023dc:	4313      	orrs	r3, r2
 80023de:	b21a      	sxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3305      	adds	r3, #5
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	b21b      	sxth	r3, r3
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	b21a      	sxth	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b21a      	sxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3307      	adds	r3, #7
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b21b      	sxth	r3, r3
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	b21a      	sxth	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3306      	adds	r3, #6
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b21b      	sxth	r3, r3
 8002414:	4313      	orrs	r3, r2
 8002416:	b21b      	sxth	r3, r3
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3309      	adds	r3, #9
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b21b      	sxth	r3, r3
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	b21a      	sxth	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3308      	adds	r3, #8
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b21b      	sxth	r3, r3
 8002432:	4313      	orrs	r3, r2
 8002434:	b21a      	sxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	330b      	adds	r3, #11
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b21b      	sxth	r3, r3
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	b21a      	sxth	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	330a      	adds	r3, #10
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b21b      	sxth	r3, r3
 800244e:	4313      	orrs	r3, r2
 8002450:	b21a      	sxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	330d      	adds	r3, #13
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b21b      	sxth	r3, r3
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	b21a      	sxth	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	330c      	adds	r3, #12
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b21b      	sxth	r3, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	b21a      	sxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	330f      	adds	r3, #15
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b21b      	sxth	r3, r3
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	b21a      	sxth	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	330e      	adds	r3, #14
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b21b      	sxth	r3, r3
 8002486:	4313      	orrs	r3, r2
 8002488:	b21a      	sxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3311      	adds	r3, #17
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b21b      	sxth	r3, r3
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	b21a      	sxth	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3310      	adds	r3, #16
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3313      	adds	r3, #19
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	b21a      	sxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3312      	adds	r3, #18
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b21b      	sxth	r3, r3
 80024be:	4313      	orrs	r3, r2
 80024c0:	b21a      	sxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3315      	adds	r3, #21
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3314      	adds	r3, #20
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b21b      	sxth	r3, r3
 80024da:	4313      	orrs	r3, r2
 80024dc:	b21a      	sxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3317      	adds	r3, #23
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3316      	adds	r3, #22
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b21b      	sxth	r3, r3
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3319      	adds	r3, #25
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	761a      	strb	r2, [r3, #24]

}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	3310      	adds	r3, #16
 8002522:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3301      	adds	r3, #1
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b21b      	sxth	r3, r3
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b21a      	sxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b21b      	sxth	r3, r3
 8002536:	4313      	orrs	r3, r2
 8002538:	b21a      	sxth	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3302      	adds	r3, #2
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3303      	adds	r3, #3
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b25b      	sxtb	r3, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	b29b      	uxth	r3, r3
 8002556:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b21b      	sxth	r3, r3
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8002566:	8a7a      	ldrh	r2, [r7, #18]
 8002568:	8a3b      	ldrh	r3, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	b21a      	sxth	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3305      	adds	r3, #5
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b25b      	sxtb	r3, r3
 800257a:	b29b      	uxth	r3, r3
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	b29b      	uxth	r3, r3
 8002580:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	b2db      	uxtb	r3, r3
 800258c:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 800258e:	89fa      	ldrh	r2, [r7, #14]
 8002590:	89bb      	ldrh	r3, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	b21a      	sxth	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3306      	adds	r3, #6
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b25a      	sxtb	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80025a8:	bf00      	nop
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	460a      	mov	r2, r1
 80025be:	71fb      	strb	r3, [r7, #7]
 80025c0:	4613      	mov	r3, r2
 80025c2:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 80025c8:	79fa      	ldrb	r2, [r7, #7]
 80025ca:	79bb      	ldrb	r3, [r7, #6]
 80025cc:	4013      	ands	r3, r2
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
 80025d8:	e001      	b.n	80025de <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 80025da:	2300      	movs	r3, #0
 80025dc:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <null_ptr_check+0x26>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <null_ptr_check+0x26>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <null_ptr_check+0x26>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002612:	23ff      	movs	r3, #255	@ 0xff
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e001      	b.n	800261c <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800261c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002632:	463b      	mov	r3, r7
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800263e:	4b21      	ldr	r3, [pc, #132]	@ (80026c4 <MX_ADC1_Init+0x98>)
 8002640:	4a21      	ldr	r2, [pc, #132]	@ (80026c8 <MX_ADC1_Init+0x9c>)
 8002642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002644:	4b1f      	ldr	r3, [pc, #124]	@ (80026c4 <MX_ADC1_Init+0x98>)
 8002646:	2200      	movs	r2, #0
 8002648:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800264a:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <MX_ADC1_Init+0x98>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002650:	4b1c      	ldr	r3, [pc, #112]	@ (80026c4 <MX_ADC1_Init+0x98>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002656:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <MX_ADC1_Init+0x98>)
 8002658:	2200      	movs	r2, #0
 800265a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800265c:	4b19      	ldr	r3, [pc, #100]	@ (80026c4 <MX_ADC1_Init+0x98>)
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002664:	4b17      	ldr	r3, [pc, #92]	@ (80026c4 <MX_ADC1_Init+0x98>)
 8002666:	2200      	movs	r2, #0
 8002668:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800266a:	4b16      	ldr	r3, [pc, #88]	@ (80026c4 <MX_ADC1_Init+0x98>)
 800266c:	4a17      	ldr	r2, [pc, #92]	@ (80026cc <MX_ADC1_Init+0xa0>)
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002670:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <MX_ADC1_Init+0x98>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002676:	4b13      	ldr	r3, [pc, #76]	@ (80026c4 <MX_ADC1_Init+0x98>)
 8002678:	2201      	movs	r2, #1
 800267a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800267c:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <MX_ADC1_Init+0x98>)
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002684:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <MX_ADC1_Init+0x98>)
 8002686:	2201      	movs	r2, #1
 8002688:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800268a:	480e      	ldr	r0, [pc, #56]	@ (80026c4 <MX_ADC1_Init+0x98>)
 800268c:	f001 fa8a 	bl	8003ba4 <HAL_ADC_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002696:	f000 fc73 	bl	8002f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800269a:	2300      	movs	r3, #0
 800269c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026a6:	463b      	mov	r3, r7
 80026a8:	4619      	mov	r1, r3
 80026aa:	4806      	ldr	r0, [pc, #24]	@ (80026c4 <MX_ADC1_Init+0x98>)
 80026ac:	f001 fc0a 	bl	8003ec4 <HAL_ADC_ConfigChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80026b6:	f000 fc63 	bl	8002f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000200 	.word	0x20000200
 80026c8:	40012000 	.word	0x40012000
 80026cc:	0f000001 	.word	0x0f000001

080026d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	@ 0x28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a17      	ldr	r2, [pc, #92]	@ (800274c <HAL_ADC_MspInit+0x7c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d127      	bne.n	8002742 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <HAL_ADC_MspInit+0x80>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	4a15      	ldr	r2, [pc, #84]	@ (8002750 <HAL_ADC_MspInit+0x80>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002700:	6453      	str	r3, [r2, #68]	@ 0x44
 8002702:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <HAL_ADC_MspInit+0x80>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <HAL_ADC_MspInit+0x80>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4a0e      	ldr	r2, [pc, #56]	@ (8002750 <HAL_ADC_MspInit+0x80>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6313      	str	r3, [r2, #48]	@ 0x30
 800271e:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <HAL_ADC_MspInit+0x80>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800272a:	2301      	movs	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800272e:	2303      	movs	r3, #3
 8002730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	4619      	mov	r1, r3
 800273c:	4805      	ldr	r0, [pc, #20]	@ (8002754 <HAL_ADC_MspInit+0x84>)
 800273e:	f001 fed5 	bl	80044ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002742:	bf00      	nop
 8002744:	3728      	adds	r7, #40	@ 0x28
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40012000 	.word	0x40012000
 8002750:	40023800 	.word	0x40023800
 8002754:	40020000 	.word	0x40020000

08002758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <MX_GPIO_Init+0x68>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4a16      	ldr	r2, [pc, #88]	@ (80027c0 <MX_GPIO_Init+0x68>)
 8002768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800276c:	6313      	str	r3, [r2, #48]	@ 0x30
 800276e:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <MX_GPIO_Init+0x68>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <MX_GPIO_Init+0x68>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a0f      	ldr	r2, [pc, #60]	@ (80027c0 <MX_GPIO_Init+0x68>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <MX_GPIO_Init+0x68>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <MX_GPIO_Init+0x68>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	4a08      	ldr	r2, [pc, #32]	@ (80027c0 <MX_GPIO_Init+0x68>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a6:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <MX_GPIO_Init+0x68>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]

}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800

080027c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027c8:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <MX_I2C1_Init+0x50>)
 80027ca:	4a13      	ldr	r2, [pc, #76]	@ (8002818 <MX_I2C1_Init+0x54>)
 80027cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80027ce:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <MX_I2C1_Init+0x50>)
 80027d0:	4a12      	ldr	r2, [pc, #72]	@ (800281c <MX_I2C1_Init+0x58>)
 80027d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <MX_I2C1_Init+0x50>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027da:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <MX_I2C1_Init+0x50>)
 80027dc:	2200      	movs	r2, #0
 80027de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <MX_I2C1_Init+0x50>)
 80027e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <MX_I2C1_Init+0x50>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027ee:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <MX_I2C1_Init+0x50>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027f4:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <MX_I2C1_Init+0x50>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027fa:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <MX_I2C1_Init+0x50>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002800:	4804      	ldr	r0, [pc, #16]	@ (8002814 <MX_I2C1_Init+0x50>)
 8002802:	f001 fff7 	bl	80047f4 <HAL_I2C_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800280c:	f000 fbb8 	bl	8002f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000248 	.word	0x20000248
 8002818:	40005400 	.word	0x40005400
 800281c:	00061a80 	.word	0x00061a80

08002820 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a19      	ldr	r2, [pc, #100]	@ (80028a4 <HAL_I2C_MspInit+0x84>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d12b      	bne.n	800289a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <HAL_I2C_MspInit+0x88>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	4a17      	ldr	r2, [pc, #92]	@ (80028a8 <HAL_I2C_MspInit+0x88>)
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	6313      	str	r3, [r2, #48]	@ 0x30
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_I2C_MspInit+0x88>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800285e:	23c0      	movs	r3, #192	@ 0xc0
 8002860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002862:	2312      	movs	r3, #18
 8002864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286a:	2303      	movs	r3, #3
 800286c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800286e:	2304      	movs	r3, #4
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	4619      	mov	r1, r3
 8002878:	480c      	ldr	r0, [pc, #48]	@ (80028ac <HAL_I2C_MspInit+0x8c>)
 800287a:	f001 fe37 	bl	80044ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_I2C_MspInit+0x88>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	4a08      	ldr	r2, [pc, #32]	@ (80028a8 <HAL_I2C_MspInit+0x88>)
 8002888:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800288c:	6413      	str	r3, [r2, #64]	@ 0x40
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_I2C_MspInit+0x88>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	@ 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40005400 	.word	0x40005400
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020400 	.word	0x40020400

080028b0 <read_temperature>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

float read_temperature(void) {
 80028b0:	b5b0      	push	{r4, r5, r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
    // Start ADC
    HAL_ADC_Start(&hadc1);
 80028b6:	4856      	ldr	r0, [pc, #344]	@ (8002a10 <read_temperature+0x160>)
 80028b8:	f001 f9b8 	bl	8003c2c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80028bc:	f04f 31ff 	mov.w	r1, #4294967295
 80028c0:	4853      	ldr	r0, [pc, #332]	@ (8002a10 <read_temperature+0x160>)
 80028c2:	f001 fa67 	bl	8003d94 <HAL_ADC_PollForConversion>
    uint32_t adc_val = HAL_ADC_GetValue(&hadc1);
 80028c6:	4852      	ldr	r0, [pc, #328]	@ (8002a10 <read_temperature+0x160>)
 80028c8:	f001 faef 	bl	8003eaa <HAL_ADC_GetValue>
 80028cc:	6178      	str	r0, [r7, #20]

    // Converting ADC value recorded to voltage using formula
    float v_out = (adc_val / 4095.0) * 3.3;
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7fd fe20 	bl	8000514 <__aeabi_ui2d>
 80028d4:	a342      	add	r3, pc, #264	@ (adr r3, 80029e0 <read_temperature+0x130>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f7fd ffbf 	bl	800085c <__aeabi_ddiv>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	a340      	add	r3, pc, #256	@ (adr r3, 80029e8 <read_temperature+0x138>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	f7fd fe8c 	bl	8000608 <__aeabi_dmul>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	f7fe f95e 	bl	8000bb8 <__aeabi_d2f>
 80028fc:	4603      	mov	r3, r0
 80028fe:	613b      	str	r3, [r7, #16]

    // Calculate NTC resistance, using resistance formula
    float r_ntc = (R_FIXED * v_out) / (3.3 - v_out);
 8002900:	6938      	ldr	r0, [r7, #16]
 8002902:	f7fd fe29 	bl	8000558 <__aeabi_f2d>
 8002906:	a33a      	add	r3, pc, #232	@ (adr r3, 80029f0 <read_temperature+0x140>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f7fd fe7c 	bl	8000608 <__aeabi_dmul>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4614      	mov	r4, r2
 8002916:	461d      	mov	r5, r3
 8002918:	6938      	ldr	r0, [r7, #16]
 800291a:	f7fd fe1d 	bl	8000558 <__aeabi_f2d>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	a131      	add	r1, pc, #196	@ (adr r1, 80029e8 <read_temperature+0x138>)
 8002924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002928:	f7fd fcb6 	bl	8000298 <__aeabi_dsub>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4620      	mov	r0, r4
 8002932:	4629      	mov	r1, r5
 8002934:	f7fd ff92 	bl	800085c <__aeabi_ddiv>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f7fe f93a 	bl	8000bb8 <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	60fb      	str	r3, [r7, #12]

    // using the beta steinhart eq
    float tempK = 1.0 / ((1.0/T0) + (1.0/BETA) * log(r_ntc / R0));
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7fd fe05 	bl	8000558 <__aeabi_f2d>
 800294e:	a328      	add	r3, pc, #160	@ (adr r3, 80029f0 <read_temperature+0x140>)
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f7fd ff82 	bl	800085c <__aeabi_ddiv>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	ec43 2b17 	vmov	d7, r2, r3
 8002960:	eeb0 0a47 	vmov.f32	s0, s14
 8002964:	eef0 0a67 	vmov.f32	s1, s15
 8002968:	f007 fbea 	bl	800a140 <log>
 800296c:	ec51 0b10 	vmov	r0, r1, d0
 8002970:	a321      	add	r3, pc, #132	@ (adr r3, 80029f8 <read_temperature+0x148>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f7fd fe47 	bl	8000608 <__aeabi_dmul>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	a31f      	add	r3, pc, #124	@ (adr r3, 8002a00 <read_temperature+0x150>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd fc88 	bl	800029c <__adddf3>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	f04f 0000 	mov.w	r0, #0
 8002994:	491f      	ldr	r1, [pc, #124]	@ (8002a14 <read_temperature+0x164>)
 8002996:	f7fd ff61 	bl	800085c <__aeabi_ddiv>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f7fe f909 	bl	8000bb8 <__aeabi_d2f>
 80029a6:	4603      	mov	r3, r0
 80029a8:	60bb      	str	r3, [r7, #8]
    float tempC = tempK - 273.15;
 80029aa:	68b8      	ldr	r0, [r7, #8]
 80029ac:	f7fd fdd4 	bl	8000558 <__aeabi_f2d>
 80029b0:	a315      	add	r3, pc, #84	@ (adr r3, 8002a08 <read_temperature+0x158>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fd fc6f 	bl	8000298 <__aeabi_dsub>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f7fe f8f9 	bl	8000bb8 <__aeabi_d2f>
 80029c6:	4603      	mov	r3, r0
 80029c8:	607b      	str	r3, [r7, #4]

    return tempC; // returning temp in celsius because its better
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	ee07 3a90 	vmov	s15, r3
}
 80029d0:	eeb0 0a67 	vmov.f32	s0, s15
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bdb0      	pop	{r4, r5, r7, pc}
 80029da:	bf00      	nop
 80029dc:	f3af 8000 	nop.w
 80029e0:	00000000 	.word	0x00000000
 80029e4:	40affe00 	.word	0x40affe00
 80029e8:	66666666 	.word	0x66666666
 80029ec:	400a6666 	.word	0x400a6666
 80029f0:	00000000 	.word	0x00000000
 80029f4:	40c38800 	.word	0x40c38800
 80029f8:	61550905 	.word	0x61550905
 80029fc:	3f331432 	.word	0x3f331432
 8002a00:	dcb5db83 	.word	0xdcb5db83
 8002a04:	3f6b79e1 	.word	0x3f6b79e1
 8002a08:	66666666 	.word	0x66666666
 8002a0c:	40711266 	.word	0x40711266
 8002a10:	20000200 	.word	0x20000200
 8002a14:	3ff00000 	.word	0x3ff00000

08002a18 <user_i2c_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	603a      	str	r2, [r7, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
 8002a26:	460b      	mov	r3, r1
 8002a28:	71bb      	strb	r3, [r7, #6]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	b299      	uxth	r1, r3
 8002a36:	1dba      	adds	r2, r7, #6
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	2301      	movs	r3, #1
 8002a40:	480f      	ldr	r0, [pc, #60]	@ (8002a80 <user_i2c_read+0x68>)
 8002a42:	f002 f81b 	bl	8004a7c <HAL_I2C_Master_Transmit>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <user_i2c_read+0x3a>
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a50:	e012      	b.n	8002a78 <user_i2c_read+0x60>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1), data, len, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	b299      	uxth	r1, r3
 8002a5a:	88bb      	ldrh	r3, [r7, #4]
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a60:	9200      	str	r2, [sp, #0]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	4806      	ldr	r0, [pc, #24]	@ (8002a80 <user_i2c_read+0x68>)
 8002a66:	f002 f907 	bl	8004c78 <HAL_I2C_Master_Receive>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <user_i2c_read+0x5e>
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
 8002a74:	e000      	b.n	8002a78 <user_i2c_read+0x60>
  return 0;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000248 	.word	0x20000248

08002a84 <user_i2c_write>:

// I2C write function for BME280
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	603a      	str	r2, [r7, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
 8002a92:	460b      	mov	r3, r1
 8002a94:	71bb      	strb	r3, [r7, #6]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80bb      	strh	r3, [r7, #4]
  uint8_t buf[16];   // using static buffer instead of malloc to avoid memory leaks
  buf[0] = reg_addr;
 8002a9a:	79bb      	ldrb	r3, [r7, #6]
 8002a9c:	723b      	strb	r3, [r7, #8]
  memcpy(&buf[1], data, len);
 8002a9e:	88ba      	ldrh	r2, [r7, #4]
 8002aa0:	f107 0308 	add.w	r3, r7, #8
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	6839      	ldr	r1, [r7, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f005 faf8 	bl	800809e <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	b299      	uxth	r1, r3
 8002ab6:	88bb      	ldrh	r3, [r7, #4]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	f107 0208 	add.w	r2, r7, #8
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	9000      	str	r0, [sp, #0]
 8002ac6:	4807      	ldr	r0, [pc, #28]	@ (8002ae4 <user_i2c_write+0x60>)
 8002ac8:	f001 ffd8 	bl	8004a7c <HAL_I2C_Master_Transmit>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <user_i2c_write+0x54>
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	e000      	b.n	8002ada <user_i2c_write+0x56>
  return 0;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000248 	.word	0x20000248

08002ae8 <user_delay_ms>:

/* Delay function for BME280 driver */
void user_delay_ms(uint32_t period)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
    HAL_Delay(period);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f001 f833 	bl	8003b5c <HAL_Delay>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b06:	f000 ffb7 	bl	8003a78 <HAL_Init>

  /* USER CODE BEGIN Init */
  int NTCMode = 0; //mode 1 is for ntc thermistor and voltage divider, mode 0 is for BME sensor. Both displayed on OLED
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]

  result = bme280_init(&dev);
 8002b0e:	48b6      	ldr	r0, [pc, #728]	@ (8002de8 <main+0x2e8>)
 8002b10:	f7fe fa88 	bl	8001024 <bme280_init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	4bb4      	ldr	r3, [pc, #720]	@ (8002dec <main+0x2ec>)
 8002b1a:	701a      	strb	r2, [r3, #0]
  if (result != BME280_OK) {
 8002b1c:	4bb3      	ldr	r3, [pc, #716]	@ (8002dec <main+0x2ec>)
 8002b1e:	f993 3000 	ldrsb.w	r3, [r3]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <main+0x34>
      printf("BME280 init failed: %d\r\n", result);
 8002b26:	4bb1      	ldr	r3, [pc, #708]	@ (8002dec <main+0x2ec>)
 8002b28:	f993 3000 	ldrsb.w	r3, [r3]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	48b0      	ldr	r0, [pc, #704]	@ (8002df0 <main+0x2f0>)
 8002b30:	f005 f9be 	bl	8007eb0 <iprintf>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b34:	f000 f9c6 	bl	8002ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b38:	f7ff fe0e 	bl	8002758 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002b3c:	f7ff fd76 	bl	800262c <MX_ADC1_Init>
  MX_TIM1_Init();
 8002b40:	f000 fe1e 	bl	8003780 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002b44:	f000 fefc 	bl	8003940 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002b48:	f7ff fe3c 	bl	80027c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t duty = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b50:	2100      	movs	r1, #0
 8002b52:	48a8      	ldr	r0, [pc, #672]	@ (8002df4 <main+0x2f4>)
 8002b54:	f003 fc1e 	bl	8006394 <HAL_TIM_PWM_Start>
  dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002b58:	4ba3      	ldr	r3, [pc, #652]	@ (8002de8 <main+0x2e8>)
 8002b5a:	2276      	movs	r2, #118	@ 0x76
 8002b5c:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 8002b5e:	4ba2      	ldr	r3, [pc, #648]	@ (8002de8 <main+0x2e8>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 8002b64:	4ba0      	ldr	r3, [pc, #640]	@ (8002de8 <main+0x2e8>)
 8002b66:	4aa4      	ldr	r2, [pc, #656]	@ (8002df8 <main+0x2f8>)
 8002b68:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 8002b6a:	4b9f      	ldr	r3, [pc, #636]	@ (8002de8 <main+0x2e8>)
 8002b6c:	4aa3      	ldr	r2, [pc, #652]	@ (8002dfc <main+0x2fc>)
 8002b6e:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 8002b70:	4b9d      	ldr	r3, [pc, #628]	@ (8002de8 <main+0x2e8>)
 8002b72:	4aa3      	ldr	r2, [pc, #652]	@ (8002e00 <main+0x300>)
 8002b74:	60da      	str	r2, [r3, #12]
  result = bme280_init(&dev);
 8002b76:	489c      	ldr	r0, [pc, #624]	@ (8002de8 <main+0x2e8>)
 8002b78:	f7fe fa54 	bl	8001024 <bme280_init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b9a      	ldr	r3, [pc, #616]	@ (8002dec <main+0x2ec>)
 8002b82:	701a      	strb	r2, [r3, #0]

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002b84:	4b98      	ldr	r3, [pc, #608]	@ (8002de8 <main+0x2e8>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
   dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002b8c:	4b96      	ldr	r3, [pc, #600]	@ (8002de8 <main+0x2e8>)
 8002b8e:	2205      	movs	r2, #5
 8002b90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
   dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002b94:	4b94      	ldr	r3, [pc, #592]	@ (8002de8 <main+0x2e8>)
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
   dev.settings.filter = BME280_FILTER_COEFF_16;
 8002b9c:	4b92      	ldr	r3, [pc, #584]	@ (8002de8 <main+0x2e8>)
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
   result = bme280_set_sensor_settings(
 8002ba4:	4990      	ldr	r1, [pc, #576]	@ (8002de8 <main+0x2e8>)
 8002ba6:	200f      	movs	r0, #15
 8002ba8:	f7fe fb30 	bl	800120c <bme280_set_sensor_settings>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4b8e      	ldr	r3, [pc, #568]	@ (8002dec <main+0x2ec>)
 8002bb2:	701a      	strb	r2, [r3, #0]
       BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL |
       BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);

   SSD1306_Init();
 8002bb4:	f000 f9fc 	bl	8002fb0 <SSD1306_Init>

   SSD1306_GotoXY(12, 12);
 8002bb8:	210c      	movs	r1, #12
 8002bba:	200c      	movs	r0, #12
 8002bbc:	f000 fb66 	bl	800328c <SSD1306_GotoXY>
   SSD1306_Puts("Ahmed's", &Font_11x18, 1);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4990      	ldr	r1, [pc, #576]	@ (8002e04 <main+0x304>)
 8002bc4:	4890      	ldr	r0, [pc, #576]	@ (8002e08 <main+0x308>)
 8002bc6:	f000 fbf5 	bl	80033b4 <SSD1306_Puts>
   SSD1306_GotoXY(10, 35);
 8002bca:	2123      	movs	r1, #35	@ 0x23
 8002bcc:	200a      	movs	r0, #10
 8002bce:	f000 fb5d 	bl	800328c <SSD1306_GotoXY>
   SSD1306_Puts("Weather Station", &Font_7x10, 1);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	498d      	ldr	r1, [pc, #564]	@ (8002e0c <main+0x30c>)
 8002bd6:	488e      	ldr	r0, [pc, #568]	@ (8002e10 <main+0x310>)
 8002bd8:	f000 fbec 	bl	80033b4 <SSD1306_Puts>
   SSD1306_UpdateScreen();
 8002bdc:	f000 faa6 	bl	800312c <SSD1306_UpdateScreen>
   HAL_Delay(2000);
 8002be0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002be4:	f000 ffba 	bl	8003b5c <HAL_Delay>
   SSD1306_Clear();
 8002be8:	f000 face 	bl	8003188 <SSD1306_Clear>
    /* USER CODE BEGIN 3 */

	  // code utilizing NTC Thermistor


	  if(NTCMode){
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d066      	beq.n	8002cc0 <main+0x1c0>
      float temp = read_temperature();
 8002bf2:	f7ff fe5d 	bl	80028b0 <read_temperature>
 8002bf6:	ed87 0a01 	vstr	s0, [r7, #4]

      // Map temperature to fan duty
      uint32_t duty = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
      if (temp < 20) duty = 0;          // Fan OFF
 8002bfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c02:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	d502      	bpl.n	8002c16 <main+0x116>
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e01c      	b.n	8002c50 <main+0x150>
      else if (temp < 24) duty = 500;   // 50% duty cycle, fan on half of the time
 8002c16:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c1a:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8002c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c26:	d503      	bpl.n	8002c30 <main+0x130>
 8002c28:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e00f      	b.n	8002c50 <main+0x150>
      else if (temp < 35) duty = 800;   // 70% duty cycle
 8002c30:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c34:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8002e14 <main+0x314>
 8002c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c40:	d503      	bpl.n	8002c4a <main+0x14a>
 8002c42:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	e002      	b.n	8002c50 <main+0x150>
      else duty = 1000;                 // 100%
 8002c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c4e:	617b      	str	r3, [r7, #20]

      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 8002c50:	4b68      	ldr	r3, [pc, #416]	@ (8002df4 <main+0x2f4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	635a      	str	r2, [r3, #52]	@ 0x34

      printf("Temp = %.2f °C, Fan Duty = %lu\r\n", temp, duty);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fd fc7d 	bl	8000558 <__aeabi_f2d>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	6979      	ldr	r1, [r7, #20]
 8002c64:	9100      	str	r1, [sp, #0]
 8002c66:	486c      	ldr	r0, [pc, #432]	@ (8002e18 <main+0x318>)
 8002c68:	f005 f922 	bl	8007eb0 <iprintf>
      sprintf(temp_string, "Temp: %.1f \xB0""C", temp);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fd fc73 	bl	8000558 <__aeabi_f2d>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4969      	ldr	r1, [pc, #420]	@ (8002e1c <main+0x31c>)
 8002c78:	4869      	ldr	r0, [pc, #420]	@ (8002e20 <main+0x320>)
 8002c7a:	f005 f92b 	bl	8007ed4 <siprintf>
      sprintf(duty_string, "Temp: %.1f \xB0""C", duty);
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4966      	ldr	r1, [pc, #408]	@ (8002e1c <main+0x31c>)
 8002c82:	4868      	ldr	r0, [pc, #416]	@ (8002e24 <main+0x324>)
 8002c84:	f005 f926 	bl	8007ed4 <siprintf>

      HAL_Delay(1000); // 1 sec update
 8002c88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c8c:	f000 ff66 	bl	8003b5c <HAL_Delay>

      // Draw to OLED
      SSD1306_Clear();
 8002c90:	f000 fa7a 	bl	8003188 <SSD1306_Clear>
      SSD1306_GotoXY(0, 0);
 8002c94:	2100      	movs	r1, #0
 8002c96:	2000      	movs	r0, #0
 8002c98:	f000 faf8 	bl	800328c <SSD1306_GotoXY>
      SSD1306_Puts(temp_string, &Font_7x10, 1);
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	495b      	ldr	r1, [pc, #364]	@ (8002e0c <main+0x30c>)
 8002ca0:	485f      	ldr	r0, [pc, #380]	@ (8002e20 <main+0x320>)
 8002ca2:	f000 fb87 	bl	80033b4 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 8002ca6:	f000 fa41 	bl	800312c <SSD1306_UpdateScreen>
    	      SSD1306_GotoXY(0, 20);
 8002caa:	2114      	movs	r1, #20
 8002cac:	2000      	movs	r0, #0
 8002cae:	f000 faed 	bl	800328c <SSD1306_GotoXY>
    	      SSD1306_Puts(duty, &Font_7x10, 1);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4955      	ldr	r1, [pc, #340]	@ (8002e0c <main+0x30c>)
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fb7b 	bl	80033b4 <SSD1306_Puts>
 8002cbe:	e795      	b.n	8002bec <main+0xec>

  	  }
	  else {
	      result = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8002cc0:	4949      	ldr	r1, [pc, #292]	@ (8002de8 <main+0x2e8>)
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f7fe faf7 	bl	80012b6 <bme280_set_sensor_mode>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4b47      	ldr	r3, [pc, #284]	@ (8002dec <main+0x2ec>)
 8002cce:	701a      	strb	r2, [r3, #0]
	      dev.delay_ms(100);
 8002cd0:	4b45      	ldr	r3, [pc, #276]	@ (8002de8 <main+0x2e8>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2064      	movs	r0, #100	@ 0x64
 8002cd6:	4798      	blx	r3
	      result = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002cd8:	4a43      	ldr	r2, [pc, #268]	@ (8002de8 <main+0x2e8>)
 8002cda:	4953      	ldr	r1, [pc, #332]	@ (8002e28 <main+0x328>)
 8002cdc:	2007      	movs	r0, #7
 8002cde:	f7fe fb66 	bl	80013ae <bme280_get_sensor_data>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b41      	ldr	r3, [pc, #260]	@ (8002dec <main+0x2ec>)
 8002ce8:	701a      	strb	r2, [r3, #0]


	      // Convert fixed-point to float values
	      temperature = comp_data.temperature / 100.0f;
 8002cea:	4b4f      	ldr	r3, [pc, #316]	@ (8002e28 <main+0x328>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf6:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002e2c <main+0x32c>
 8002cfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8002e30 <main+0x330>)
 8002d00:	edc3 7a00 	vstr	s15, [r3]
	      humidity    = comp_data.humidity    / 1024.0f;
 8002d04:	4b48      	ldr	r3, [pc, #288]	@ (8002e28 <main+0x328>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d10:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002e34 <main+0x334>
 8002d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d18:	4b47      	ldr	r3, [pc, #284]	@ (8002e38 <main+0x338>)
 8002d1a:	edc3 7a00 	vstr	s15, [r3]
	      pressure    = comp_data.pressure    / 10000.0f;
 8002d1e:	4b42      	ldr	r3, [pc, #264]	@ (8002e28 <main+0x328>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d2a:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8002e3c <main+0x33c>
 8002d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d32:	4b43      	ldr	r3, [pc, #268]	@ (8002e40 <main+0x340>)
 8002d34:	edc3 7a00 	vstr	s15, [r3]

	      printf("BME280 Temp = %.2f °C, Fan Duty = %lu\r\n", temperature, duty);
 8002d38:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <main+0x330>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fc0b 	bl	8000558 <__aeabi_f2d>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	9100      	str	r1, [sp, #0]
 8002d4a:	483e      	ldr	r0, [pc, #248]	@ (8002e44 <main+0x344>)
 8002d4c:	f005 f8b0 	bl	8007eb0 <iprintf>
	      sprintf(temp_string, "Temp: %.1f \xB0""C", temperature);
 8002d50:	4b37      	ldr	r3, [pc, #220]	@ (8002e30 <main+0x330>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fbff 	bl	8000558 <__aeabi_f2d>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	492f      	ldr	r1, [pc, #188]	@ (8002e1c <main+0x31c>)
 8002d60:	482f      	ldr	r0, [pc, #188]	@ (8002e20 <main+0x320>)
 8002d62:	f005 f8b7 	bl	8007ed4 <siprintf>
	      sprintf(hum_string,  "Hum:  %.1f %%", humidity);
 8002d66:	4b34      	ldr	r3, [pc, #208]	@ (8002e38 <main+0x338>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fbf4 	bl	8000558 <__aeabi_f2d>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4934      	ldr	r1, [pc, #208]	@ (8002e48 <main+0x348>)
 8002d76:	4835      	ldr	r0, [pc, #212]	@ (8002e4c <main+0x34c>)
 8002d78:	f005 f8ac 	bl	8007ed4 <siprintf>
	      sprintf(press_string,"Press:%.1f hPa", pressure);
 8002d7c:	4b30      	ldr	r3, [pc, #192]	@ (8002e40 <main+0x340>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fbe9 	bl	8000558 <__aeabi_f2d>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4931      	ldr	r1, [pc, #196]	@ (8002e50 <main+0x350>)
 8002d8c:	4831      	ldr	r0, [pc, #196]	@ (8002e54 <main+0x354>)
 8002d8e:	f005 f8a1 	bl	8007ed4 <siprintf>

	      // reaads temperature for BME280 this time
	      uint32_t duty = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]

	      // Same fan control logic
	      if (temperature < 20) duty = 0;
 8002d96:	4b26      	ldr	r3, [pc, #152]	@ (8002e30 <main+0x330>)
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da8:	d502      	bpl.n	8002db0 <main+0x2b0>
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	e056      	b.n	8002e5e <main+0x35e>
	      else if (temperature < 24) duty = 500; // 50% duty cycle
 8002db0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e30 <main+0x330>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8002dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	d503      	bpl.n	8002dcc <main+0x2cc>
 8002dc4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	e048      	b.n	8002e5e <main+0x35e>
	      else if (temperature < 35) duty = 800;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	@ (8002e30 <main+0x330>)
 8002dce:	edd3 7a00 	vldr	s15, [r3]
 8002dd2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002e14 <main+0x314>
 8002dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dde:	d53b      	bpl.n	8002e58 <main+0x358>
 8002de0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	e03a      	b.n	8002e5e <main+0x35e>
 8002de8:	200002a8 	.word	0x200002a8
 8002dec:	200002f4 	.word	0x200002f4
 8002df0:	0800a558 	.word	0x0800a558
 8002df4:	20000784 	.word	0x20000784
 8002df8:	08002a19 	.word	0x08002a19
 8002dfc:	08002a85 	.word	0x08002a85
 8002e00:	08002ae9 	.word	0x08002ae9
 8002e04:	20000008 	.word	0x20000008
 8002e08:	0800a574 	.word	0x0800a574
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	0800a57c 	.word	0x0800a57c
 8002e14:	420c0000 	.word	0x420c0000
 8002e18:	0800a58c 	.word	0x0800a58c
 8002e1c:	0800a5b0 	.word	0x0800a5b0
 8002e20:	20000318 	.word	0x20000318
 8002e24:	20000358 	.word	0x20000358
 8002e28:	200002e8 	.word	0x200002e8
 8002e2c:	42c80000 	.word	0x42c80000
 8002e30:	2000029c 	.word	0x2000029c
 8002e34:	44800000 	.word	0x44800000
 8002e38:	200002a0 	.word	0x200002a0
 8002e3c:	461c4000 	.word	0x461c4000
 8002e40:	200002a4 	.word	0x200002a4
 8002e44:	0800a5c0 	.word	0x0800a5c0
 8002e48:	0800a5ec 	.word	0x0800a5ec
 8002e4c:	200002f8 	.word	0x200002f8
 8002e50:	0800a5fc 	.word	0x0800a5fc
 8002e54:	20000338 	.word	0x20000338
	      else duty = 1000;
 8002e58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e5c:	613b      	str	r3, [r7, #16]

	      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 8002e5e:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <main+0x3b0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	635a      	str	r2, [r3, #52]	@ 0x34

	      // Draw to OLED
	      SSD1306_Clear();
 8002e66:	f000 f98f 	bl	8003188 <SSD1306_Clear>
	      SSD1306_GotoXY(0, 0);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f000 fa0d 	bl	800328c <SSD1306_GotoXY>
	      SSD1306_Puts(temp_string, &Font_7x10, 1);
 8002e72:	2201      	movs	r2, #1
 8002e74:	490f      	ldr	r1, [pc, #60]	@ (8002eb4 <main+0x3b4>)
 8002e76:	4810      	ldr	r0, [pc, #64]	@ (8002eb8 <main+0x3b8>)
 8002e78:	f000 fa9c 	bl	80033b4 <SSD1306_Puts>
	      SSD1306_GotoXY(0, 20);
 8002e7c:	2114      	movs	r1, #20
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f000 fa04 	bl	800328c <SSD1306_GotoXY>
	      SSD1306_Puts(hum_string, &Font_7x10, 1);
 8002e84:	2201      	movs	r2, #1
 8002e86:	490b      	ldr	r1, [pc, #44]	@ (8002eb4 <main+0x3b4>)
 8002e88:	480c      	ldr	r0, [pc, #48]	@ (8002ebc <main+0x3bc>)
 8002e8a:	f000 fa93 	bl	80033b4 <SSD1306_Puts>
	      SSD1306_GotoXY(0, 40);
 8002e8e:	2128      	movs	r1, #40	@ 0x28
 8002e90:	2000      	movs	r0, #0
 8002e92:	f000 f9fb 	bl	800328c <SSD1306_GotoXY>
	      SSD1306_Puts(press_string, &Font_7x10, 1);
 8002e96:	2201      	movs	r2, #1
 8002e98:	4906      	ldr	r1, [pc, #24]	@ (8002eb4 <main+0x3b4>)
 8002e9a:	4809      	ldr	r0, [pc, #36]	@ (8002ec0 <main+0x3c0>)
 8002e9c:	f000 fa8a 	bl	80033b4 <SSD1306_Puts>
	      SSD1306_UpdateScreen();
 8002ea0:	f000 f944 	bl	800312c <SSD1306_UpdateScreen>
	      HAL_Delay(1000); // 1 sec update
 8002ea4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ea8:	f000 fe58 	bl	8003b5c <HAL_Delay>
	  if(NTCMode){
 8002eac:	e69e      	b.n	8002bec <main+0xec>
 8002eae:	bf00      	nop
 8002eb0:	20000784 	.word	0x20000784
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20000318 	.word	0x20000318
 8002ebc:	200002f8 	.word	0x200002f8
 8002ec0:	20000338 	.word	0x20000338

08002ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b094      	sub	sp, #80	@ 0x50
 8002ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eca:	f107 0320 	add.w	r3, r7, #32
 8002ece:	2230      	movs	r2, #48	@ 0x30
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f005 f863 	bl	8007f9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ed8:	f107 030c 	add.w	r3, r7, #12
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	4b22      	ldr	r3, [pc, #136]	@ (8002f78 <SystemClock_Config+0xb4>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	4a21      	ldr	r2, [pc, #132]	@ (8002f78 <SystemClock_Config+0xb4>)
 8002ef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f78 <SystemClock_Config+0xb4>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f04:	2300      	movs	r3, #0
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <SystemClock_Config+0xb8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f7c <SystemClock_Config+0xb8>)
 8002f0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <SystemClock_Config+0xb8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f20:	2302      	movs	r3, #2
 8002f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f24:	2301      	movs	r3, #1
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f28:	2310      	movs	r3, #16
 8002f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f30:	f107 0320 	add.w	r3, r7, #32
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 fd85 	bl	8005a44 <HAL_RCC_OscConfig>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002f40:	f000 f81e 	bl	8002f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f44:	230f      	movs	r3, #15
 8002f46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f002 ffe8 	bl	8005f34 <HAL_RCC_ClockConfig>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002f6a:	f000 f809 	bl	8002f80 <Error_Handler>
  }
}
 8002f6e:	bf00      	nop
 8002f70:	3750      	adds	r7, #80	@ 0x50
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40007000 	.word	0x40007000

08002f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f84:	b672      	cpsid	i
}
 8002f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f88:	bf00      	nop
 8002f8a:	e7fd      	b.n	8002f88 <Error_Handler+0x8>

08002f8c <__io_putchar>:
#include "usart.h"
#include <stdio.h>

// This function replaces low-level putchar used by printf
int __io_putchar(int ch)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002f94:	1d39      	adds	r1, r7, #4
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4803      	ldr	r0, [pc, #12]	@ (8002fac <__io_putchar+0x20>)
 8002f9e:	f003 feb3 	bl	8006d08 <HAL_UART_Transmit>
    return ch;
 8002fa2:	687b      	ldr	r3, [r7, #4]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	200007cc 	.word	0x200007cc

08002fb0 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002fb6:	f000 fa23 	bl	8003400 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002fba:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	2178      	movs	r1, #120	@ 0x78
 8002fc2:	4858      	ldr	r0, [pc, #352]	@ (8003124 <SSD1306_Init+0x174>)
 8002fc4:	f002 f88a 	bl	80050dc <HAL_I2C_IsDeviceReady>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e0a4      	b.n	800311c <SSD1306_Init+0x16c>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002fd2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002fd6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002fd8:	e002      	b.n	8002fe0 <SSD1306_Init+0x30>
		p--;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f9      	bne.n	8002fda <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002fe6:	22ae      	movs	r2, #174	@ 0xae
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2078      	movs	r0, #120	@ 0x78
 8002fec:	f000 fa7a 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2078      	movs	r0, #120	@ 0x78
 8002ff6:	f000 fa75 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2078      	movs	r0, #120	@ 0x78
 8003000:	f000 fa70 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003004:	22b0      	movs	r2, #176	@ 0xb0
 8003006:	2100      	movs	r1, #0
 8003008:	2078      	movs	r0, #120	@ 0x78
 800300a:	f000 fa6b 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800300e:	22c8      	movs	r2, #200	@ 0xc8
 8003010:	2100      	movs	r1, #0
 8003012:	2078      	movs	r0, #120	@ 0x78
 8003014:	f000 fa66 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003018:	2200      	movs	r2, #0
 800301a:	2100      	movs	r1, #0
 800301c:	2078      	movs	r0, #120	@ 0x78
 800301e:	f000 fa61 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003022:	2210      	movs	r2, #16
 8003024:	2100      	movs	r1, #0
 8003026:	2078      	movs	r0, #120	@ 0x78
 8003028:	f000 fa5c 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800302c:	2240      	movs	r2, #64	@ 0x40
 800302e:	2100      	movs	r1, #0
 8003030:	2078      	movs	r0, #120	@ 0x78
 8003032:	f000 fa57 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003036:	2281      	movs	r2, #129	@ 0x81
 8003038:	2100      	movs	r1, #0
 800303a:	2078      	movs	r0, #120	@ 0x78
 800303c:	f000 fa52 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003040:	22ff      	movs	r2, #255	@ 0xff
 8003042:	2100      	movs	r1, #0
 8003044:	2078      	movs	r0, #120	@ 0x78
 8003046:	f000 fa4d 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800304a:	22a1      	movs	r2, #161	@ 0xa1
 800304c:	2100      	movs	r1, #0
 800304e:	2078      	movs	r0, #120	@ 0x78
 8003050:	f000 fa48 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003054:	22a6      	movs	r2, #166	@ 0xa6
 8003056:	2100      	movs	r1, #0
 8003058:	2078      	movs	r0, #120	@ 0x78
 800305a:	f000 fa43 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800305e:	22a8      	movs	r2, #168	@ 0xa8
 8003060:	2100      	movs	r1, #0
 8003062:	2078      	movs	r0, #120	@ 0x78
 8003064:	f000 fa3e 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003068:	223f      	movs	r2, #63	@ 0x3f
 800306a:	2100      	movs	r1, #0
 800306c:	2078      	movs	r0, #120	@ 0x78
 800306e:	f000 fa39 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003072:	22a4      	movs	r2, #164	@ 0xa4
 8003074:	2100      	movs	r1, #0
 8003076:	2078      	movs	r0, #120	@ 0x78
 8003078:	f000 fa34 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800307c:	22d3      	movs	r2, #211	@ 0xd3
 800307e:	2100      	movs	r1, #0
 8003080:	2078      	movs	r0, #120	@ 0x78
 8003082:	f000 fa2f 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003086:	2200      	movs	r2, #0
 8003088:	2100      	movs	r1, #0
 800308a:	2078      	movs	r0, #120	@ 0x78
 800308c:	f000 fa2a 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003090:	22d5      	movs	r2, #213	@ 0xd5
 8003092:	2100      	movs	r1, #0
 8003094:	2078      	movs	r0, #120	@ 0x78
 8003096:	f000 fa25 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800309a:	22f0      	movs	r2, #240	@ 0xf0
 800309c:	2100      	movs	r1, #0
 800309e:	2078      	movs	r0, #120	@ 0x78
 80030a0:	f000 fa20 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80030a4:	22d9      	movs	r2, #217	@ 0xd9
 80030a6:	2100      	movs	r1, #0
 80030a8:	2078      	movs	r0, #120	@ 0x78
 80030aa:	f000 fa1b 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80030ae:	2222      	movs	r2, #34	@ 0x22
 80030b0:	2100      	movs	r1, #0
 80030b2:	2078      	movs	r0, #120	@ 0x78
 80030b4:	f000 fa16 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80030b8:	22da      	movs	r2, #218	@ 0xda
 80030ba:	2100      	movs	r1, #0
 80030bc:	2078      	movs	r0, #120	@ 0x78
 80030be:	f000 fa11 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80030c2:	2212      	movs	r2, #18
 80030c4:	2100      	movs	r1, #0
 80030c6:	2078      	movs	r0, #120	@ 0x78
 80030c8:	f000 fa0c 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80030cc:	22db      	movs	r2, #219	@ 0xdb
 80030ce:	2100      	movs	r1, #0
 80030d0:	2078      	movs	r0, #120	@ 0x78
 80030d2:	f000 fa07 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80030d6:	2220      	movs	r2, #32
 80030d8:	2100      	movs	r1, #0
 80030da:	2078      	movs	r0, #120	@ 0x78
 80030dc:	f000 fa02 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80030e0:	228d      	movs	r2, #141	@ 0x8d
 80030e2:	2100      	movs	r1, #0
 80030e4:	2078      	movs	r0, #120	@ 0x78
 80030e6:	f000 f9fd 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80030ea:	2214      	movs	r2, #20
 80030ec:	2100      	movs	r1, #0
 80030ee:	2078      	movs	r0, #120	@ 0x78
 80030f0:	f000 f9f8 	bl	80034e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80030f4:	22af      	movs	r2, #175	@ 0xaf
 80030f6:	2100      	movs	r1, #0
 80030f8:	2078      	movs	r0, #120	@ 0x78
 80030fa:	f000 f9f3 	bl	80034e4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80030fe:	2000      	movs	r0, #0
 8003100:	f000 f84c 	bl	800319c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8003104:	f000 f812 	bl	800312c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8003108:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <SSD1306_Init+0x178>)
 800310a:	2200      	movs	r2, #0
 800310c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <SSD1306_Init+0x178>)
 8003110:	2200      	movs	r2, #0
 8003112:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003114:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <SSD1306_Init+0x178>)
 8003116:	2201      	movs	r2, #1
 8003118:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000248 	.word	0x20000248
 8003128:	20000778 	.word	0x20000778

0800312c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003132:	2300      	movs	r3, #0
 8003134:	71fb      	strb	r3, [r7, #7]
 8003136:	e01d      	b.n	8003174 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	3b50      	subs	r3, #80	@ 0x50
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	2100      	movs	r1, #0
 8003142:	2078      	movs	r0, #120	@ 0x78
 8003144:	f000 f9ce 	bl	80034e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003148:	2200      	movs	r2, #0
 800314a:	2100      	movs	r1, #0
 800314c:	2078      	movs	r0, #120	@ 0x78
 800314e:	f000 f9c9 	bl	80034e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003152:	2210      	movs	r2, #16
 8003154:	2100      	movs	r1, #0
 8003156:	2078      	movs	r0, #120	@ 0x78
 8003158:	f000 f9c4 	bl	80034e4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	01db      	lsls	r3, r3, #7
 8003160:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <SSD1306_UpdateScreen+0x58>)
 8003162:	441a      	add	r2, r3
 8003164:	2380      	movs	r3, #128	@ 0x80
 8003166:	2140      	movs	r1, #64	@ 0x40
 8003168:	2078      	movs	r0, #120	@ 0x78
 800316a:	f000 f95f 	bl	800342c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	3301      	adds	r3, #1
 8003172:	71fb      	strb	r3, [r7, #7]
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	2b07      	cmp	r3, #7
 8003178:	d9de      	bls.n	8003138 <SSD1306_UpdateScreen+0xc>
	}
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000378 	.word	0x20000378

08003188 <SSD1306_Clear>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Clear(void){
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800318c:	2000      	movs	r0, #0
 800318e:	f000 f805 	bl	800319c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8003192:	f7ff ffcb 	bl	800312c <SSD1306_UpdateScreen>

}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <SSD1306_Fill>:
void SSD1306_Fill(SSD1306_COLOR_t color) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <SSD1306_Fill+0x14>
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <SSD1306_Fill+0x16>
 80031b0:	23ff      	movs	r3, #255	@ 0xff
 80031b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031b6:	4619      	mov	r1, r3
 80031b8:	4803      	ldr	r0, [pc, #12]	@ (80031c8 <SSD1306_Fill+0x2c>)
 80031ba:	f004 fef0 	bl	8007f9e <memset>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000378 	.word	0x20000378

080031cc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
 80031d6:	460b      	mov	r3, r1
 80031d8:	80bb      	strh	r3, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	70fb      	strb	r3, [r7, #3]
	if (
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80031e2:	d848      	bhi.n	8003276 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80031e4:	88bb      	ldrh	r3, [r7, #4]
 80031e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80031e8:	d845      	bhi.n	8003276 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80031ea:	4b26      	ldr	r3, [pc, #152]	@ (8003284 <SSD1306_DrawPixel+0xb8>)
 80031ec:	791b      	ldrb	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d11a      	bne.n	800323c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003206:	88fa      	ldrh	r2, [r7, #6]
 8003208:	88bb      	ldrh	r3, [r7, #4]
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	b298      	uxth	r0, r3
 800320e:	4603      	mov	r3, r0
 8003210:	01db      	lsls	r3, r3, #7
 8003212:	4413      	add	r3, r2
 8003214:	4a1c      	ldr	r2, [pc, #112]	@ (8003288 <SSD1306_DrawPixel+0xbc>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	b25a      	sxtb	r2, r3
 800321a:	88bb      	ldrh	r3, [r7, #4]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	b25b      	sxtb	r3, r3
 8003228:	4313      	orrs	r3, r2
 800322a:	b259      	sxtb	r1, r3
 800322c:	88fa      	ldrh	r2, [r7, #6]
 800322e:	4603      	mov	r3, r0
 8003230:	01db      	lsls	r3, r3, #7
 8003232:	4413      	add	r3, r2
 8003234:	b2c9      	uxtb	r1, r1
 8003236:	4a14      	ldr	r2, [pc, #80]	@ (8003288 <SSD1306_DrawPixel+0xbc>)
 8003238:	54d1      	strb	r1, [r2, r3]
 800323a:	e01d      	b.n	8003278 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	88bb      	ldrh	r3, [r7, #4]
 8003240:	08db      	lsrs	r3, r3, #3
 8003242:	b298      	uxth	r0, r3
 8003244:	4603      	mov	r3, r0
 8003246:	01db      	lsls	r3, r3, #7
 8003248:	4413      	add	r3, r2
 800324a:	4a0f      	ldr	r2, [pc, #60]	@ (8003288 <SSD1306_DrawPixel+0xbc>)
 800324c:	5cd3      	ldrb	r3, [r2, r3]
 800324e:	b25a      	sxtb	r2, r3
 8003250:	88bb      	ldrh	r3, [r7, #4]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	b25b      	sxtb	r3, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	b25b      	sxtb	r3, r3
 8003262:	4013      	ands	r3, r2
 8003264:	b259      	sxtb	r1, r3
 8003266:	88fa      	ldrh	r2, [r7, #6]
 8003268:	4603      	mov	r3, r0
 800326a:	01db      	lsls	r3, r3, #7
 800326c:	4413      	add	r3, r2
 800326e:	b2c9      	uxtb	r1, r1
 8003270:	4a05      	ldr	r2, [pc, #20]	@ (8003288 <SSD1306_DrawPixel+0xbc>)
 8003272:	54d1      	strb	r1, [r2, r3]
 8003274:	e000      	b.n	8003278 <SSD1306_DrawPixel+0xac>
		return;
 8003276:	bf00      	nop
	}
}
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000778 	.word	0x20000778
 8003288:	20000378 	.word	0x20000378

0800328c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	460a      	mov	r2, r1
 8003296:	80fb      	strh	r3, [r7, #6]
 8003298:	4613      	mov	r3, r2
 800329a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800329c:	4a05      	ldr	r2, [pc, #20]	@ (80032b4 <SSD1306_GotoXY+0x28>)
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80032a2:	4a04      	ldr	r2, [pc, #16]	@ (80032b4 <SSD1306_GotoXY+0x28>)
 80032a4:	88bb      	ldrh	r3, [r7, #4]
 80032a6:	8053      	strh	r3, [r2, #2]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	20000778 	.word	0x20000778

080032b8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
 80032c4:	4613      	mov	r3, r2
 80032c6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80032c8:	4b39      	ldr	r3, [pc, #228]	@ (80033b0 <SSD1306_Putc+0xf8>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
	if (
 80032d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80032d6:	dc07      	bgt.n	80032e8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80032d8:	4b35      	ldr	r3, [pc, #212]	@ (80033b0 <SSD1306_Putc+0xf8>)
 80032da:	885b      	ldrh	r3, [r3, #2]
 80032dc:	461a      	mov	r2, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	785b      	ldrb	r3, [r3, #1]
 80032e2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80032e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80032e6:	dd01      	ble.n	80032ec <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e05d      	b.n	80033a8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e04b      	b.n	800338a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	3b20      	subs	r3, #32
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	7849      	ldrb	r1, [r1, #1]
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4619      	mov	r1, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	440b      	add	r3, r1
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	e030      	b.n	8003378 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003326:	4b22      	ldr	r3, [pc, #136]	@ (80033b0 <SSD1306_Putc+0xf8>)
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	b29b      	uxth	r3, r3
 800332e:	4413      	add	r3, r2
 8003330:	b298      	uxth	r0, r3
 8003332:	4b1f      	ldr	r3, [pc, #124]	@ (80033b0 <SSD1306_Putc+0xf8>)
 8003334:	885a      	ldrh	r2, [r3, #2]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	b29b      	uxth	r3, r3
 800333a:	4413      	add	r3, r2
 800333c:	b29b      	uxth	r3, r3
 800333e:	79ba      	ldrb	r2, [r7, #6]
 8003340:	4619      	mov	r1, r3
 8003342:	f7ff ff43 	bl	80031cc <SSD1306_DrawPixel>
 8003346:	e014      	b.n	8003372 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003348:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <SSD1306_Putc+0xf8>)
 800334a:	881a      	ldrh	r2, [r3, #0]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	b29b      	uxth	r3, r3
 8003350:	4413      	add	r3, r2
 8003352:	b298      	uxth	r0, r3
 8003354:	4b16      	ldr	r3, [pc, #88]	@ (80033b0 <SSD1306_Putc+0xf8>)
 8003356:	885a      	ldrh	r2, [r3, #2]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	b29b      	uxth	r3, r3
 800335c:	4413      	add	r3, r2
 800335e:	b299      	uxth	r1, r3
 8003360:	79bb      	ldrb	r3, [r7, #6]
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	f7ff ff2d 	bl	80031cc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	3301      	adds	r3, #1
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4293      	cmp	r3, r2
 8003382:	d3c8      	bcc.n	8003316 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	3301      	adds	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	785b      	ldrb	r3, [r3, #1]
 800338e:	461a      	mov	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	4293      	cmp	r3, r2
 8003394:	d3ad      	bcc.n	80032f2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003396:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <SSD1306_Putc+0xf8>)
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	7812      	ldrb	r2, [r2, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	4b03      	ldr	r3, [pc, #12]	@ (80033b0 <SSD1306_Putc+0xf8>)
 80033a4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80033a6:	79fb      	ldrb	r3, [r7, #7]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000778 	.word	0x20000778

080033b4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80033c2:	e012      	b.n	80033ea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	79fa      	ldrb	r2, [r7, #7]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff73 	bl	80032b8 <SSD1306_Putc>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d002      	beq.n	80033e4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	e008      	b.n	80033f6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3301      	adds	r3, #1
 80033e8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e8      	bne.n	80033c4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	781b      	ldrb	r3, [r3, #0]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <ssd1306_I2C_Init+0x28>)
 8003408:	607b      	str	r3, [r7, #4]
	while(p>0)
 800340a:	e002      	b.n	8003412 <ssd1306_I2C_Init+0x12>
		p--;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f9      	bne.n	800340c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	0003d090 	.word	0x0003d090

0800342c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800342c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003430:	b089      	sub	sp, #36	@ 0x24
 8003432:	af02      	add	r7, sp, #8
 8003434:	603a      	str	r2, [r7, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	4603      	mov	r3, r0
 800343a:	71fb      	strb	r3, [r7, #7]
 800343c:	460b      	mov	r3, r1
 800343e:	71bb      	strb	r3, [r7, #6]
 8003440:	4613      	mov	r3, r2
 8003442:	80bb      	strh	r3, [r7, #4]
 8003444:	466b      	mov	r3, sp
 8003446:	461e      	mov	r6, r3
	uint8_t dt[count + 1];
 8003448:	88bb      	ldrh	r3, [r7, #4]
 800344a:	1c59      	adds	r1, r3, #1
 800344c:	1e4b      	subs	r3, r1, #1
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	460a      	mov	r2, r1
 8003452:	2300      	movs	r3, #0
 8003454:	4690      	mov	r8, r2
 8003456:	4699      	mov	r9, r3
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003464:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003468:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800346c:	460a      	mov	r2, r1
 800346e:	2300      	movs	r3, #0
 8003470:	4614      	mov	r4, r2
 8003472:	461d      	mov	r5, r3
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	00eb      	lsls	r3, r5, #3
 800347e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003482:	00e2      	lsls	r2, r4, #3
 8003484:	460b      	mov	r3, r1
 8003486:	3307      	adds	r3, #7
 8003488:	08db      	lsrs	r3, r3, #3
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	ebad 0d03 	sub.w	sp, sp, r3
 8003490:	ab02      	add	r3, sp, #8
 8003492:	3300      	adds	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	79ba      	ldrb	r2, [r7, #6]
 800349a:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800349c:	2301      	movs	r3, #1
 800349e:	75fb      	strb	r3, [r7, #23]
 80034a0:	e00a      	b.n	80034b8 <ssd1306_I2C_WriteMulti+0x8c>
		dt[i] = data[i-1];
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	441a      	add	r2, r3
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	7811      	ldrb	r1, [r2, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	3301      	adds	r3, #1
 80034b6:	75fb      	strb	r3, [r7, #23]
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	88ba      	ldrh	r2, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d2ef      	bcs.n	80034a2 <ssd1306_I2C_WriteMulti+0x76>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	b299      	uxth	r1, r3
 80034c6:	88bb      	ldrh	r3, [r7, #4]
 80034c8:	220a      	movs	r2, #10
 80034ca:	9200      	str	r2, [sp, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4804      	ldr	r0, [pc, #16]	@ (80034e0 <ssd1306_I2C_WriteMulti+0xb4>)
 80034d0:	f001 fad4 	bl	8004a7c <HAL_I2C_Master_Transmit>
 80034d4:	46b5      	mov	sp, r6
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034e0:	20000248 	.word	0x20000248

080034e4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
 80034ee:	460b      	mov	r3, r1
 80034f0:	71bb      	strb	r3, [r7, #6]
 80034f2:	4613      	mov	r3, r2
 80034f4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80034f6:	79bb      	ldrb	r3, [r7, #6]
 80034f8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80034fa:	797b      	ldrb	r3, [r7, #5]
 80034fc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	b299      	uxth	r1, r3
 8003502:	f107 020c 	add.w	r2, r7, #12
 8003506:	230a      	movs	r3, #10
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	2302      	movs	r3, #2
 800350c:	4803      	ldr	r0, [pc, #12]	@ (800351c <ssd1306_I2C_Write+0x38>)
 800350e:	f001 fab5 	bl	8004a7c <HAL_I2C_Master_Transmit>
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000248 	.word	0x20000248

08003520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]
 800352a:	4b10      	ldr	r3, [pc, #64]	@ (800356c <HAL_MspInit+0x4c>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352e:	4a0f      	ldr	r2, [pc, #60]	@ (800356c <HAL_MspInit+0x4c>)
 8003530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003534:	6453      	str	r3, [r2, #68]	@ 0x44
 8003536:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <HAL_MspInit+0x4c>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353e:	607b      	str	r3, [r7, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_MspInit+0x4c>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	4a08      	ldr	r2, [pc, #32]	@ (800356c <HAL_MspInit+0x4c>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003550:	6413      	str	r3, [r2, #64]	@ 0x40
 8003552:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_MspInit+0x4c>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800

08003570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <NMI_Handler+0x4>

08003578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <HardFault_Handler+0x4>

08003580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <MemManage_Handler+0x4>

08003588 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <BusFault_Handler+0x4>

08003590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <UsageFault_Handler+0x4>

08003598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035c6:	f000 faa9 	bl	8003b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0
  return 1;
 80035d2:	2301      	movs	r3, #1
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <_kill>:

int _kill(int pid, int sig)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035e8:	f004 fd2c 	bl	8008044 <__errno>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2216      	movs	r2, #22
 80035f0:	601a      	str	r2, [r3, #0]
  return -1;
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <_exit>:

void _exit (int status)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003606:	f04f 31ff 	mov.w	r1, #4294967295
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ffe7 	bl	80035de <_kill>
  while (1) {}    /* Make sure we hang here */
 8003610:	bf00      	nop
 8003612:	e7fd      	b.n	8003610 <_exit+0x12>

08003614 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	e00a      	b.n	800363c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003626:	f3af 8000 	nop.w
 800362a:	4601      	mov	r1, r0
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	60ba      	str	r2, [r7, #8]
 8003632:	b2ca      	uxtb	r2, r1
 8003634:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3301      	adds	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	dbf0      	blt.n	8003626 <_read+0x12>
  }

  return len;
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e009      	b.n	8003674 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	60ba      	str	r2, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fc8f 	bl	8002f8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	3301      	adds	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	dbf1      	blt.n	8003660 <_write+0x12>
  }
  return len;
 800367c:	687b      	ldr	r3, [r7, #4]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_close>:

int _close(int file)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036ae:	605a      	str	r2, [r3, #4]
  return 0;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <_isatty>:

int _isatty(int file)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036c6:	2301      	movs	r3, #1
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036f8:	4a14      	ldr	r2, [pc, #80]	@ (800374c <_sbrk+0x5c>)
 80036fa:	4b15      	ldr	r3, [pc, #84]	@ (8003750 <_sbrk+0x60>)
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003704:	4b13      	ldr	r3, [pc, #76]	@ (8003754 <_sbrk+0x64>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800370c:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <_sbrk+0x64>)
 800370e:	4a12      	ldr	r2, [pc, #72]	@ (8003758 <_sbrk+0x68>)
 8003710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003712:	4b10      	ldr	r3, [pc, #64]	@ (8003754 <_sbrk+0x64>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	429a      	cmp	r2, r3
 800371e:	d207      	bcs.n	8003730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003720:	f004 fc90 	bl	8008044 <__errno>
 8003724:	4603      	mov	r3, r0
 8003726:	220c      	movs	r2, #12
 8003728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	e009      	b.n	8003744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003730:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <_sbrk+0x64>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003736:	4b07      	ldr	r3, [pc, #28]	@ (8003754 <_sbrk+0x64>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	4a05      	ldr	r2, [pc, #20]	@ (8003754 <_sbrk+0x64>)
 8003740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20020000 	.word	0x20020000
 8003750:	00000400 	.word	0x00000400
 8003754:	20000780 	.word	0x20000780
 8003758:	20000968 	.word	0x20000968

0800375c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003760:	4b06      	ldr	r3, [pc, #24]	@ (800377c <SystemInit+0x20>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003766:	4a05      	ldr	r2, [pc, #20]	@ (800377c <SystemInit+0x20>)
 8003768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800376c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b092      	sub	sp, #72	@ 0x48
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003786:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	611a      	str	r2, [r3, #16]
 80037a0:	615a      	str	r2, [r3, #20]
 80037a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	2220      	movs	r2, #32
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f004 fbf7 	bl	8007f9e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037b0:	4b33      	ldr	r3, [pc, #204]	@ (8003880 <MX_TIM1_Init+0x100>)
 80037b2:	4a34      	ldr	r2, [pc, #208]	@ (8003884 <MX_TIM1_Init+0x104>)
 80037b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 80037b6:	4b32      	ldr	r3, [pc, #200]	@ (8003880 <MX_TIM1_Init+0x100>)
 80037b8:	2254      	movs	r2, #84	@ 0x54
 80037ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037bc:	4b30      	ldr	r3, [pc, #192]	@ (8003880 <MX_TIM1_Init+0x100>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80037c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003880 <MX_TIM1_Init+0x100>)
 80037c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003880 <MX_TIM1_Init+0x100>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <MX_TIM1_Init+0x100>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003880 <MX_TIM1_Init+0x100>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037dc:	4828      	ldr	r0, [pc, #160]	@ (8003880 <MX_TIM1_Init+0x100>)
 80037de:	f002 fd89 	bl	80062f4 <HAL_TIM_PWM_Init>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80037e8:	f7ff fbca 	bl	8002f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ec:	2300      	movs	r3, #0
 80037ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80037f8:	4619      	mov	r1, r3
 80037fa:	4821      	ldr	r0, [pc, #132]	@ (8003880 <MX_TIM1_Init+0x100>)
 80037fc:	f003 f974 	bl	8006ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003806:	f7ff fbbb 	bl	8002f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800380a:	2360      	movs	r3, #96	@ 0x60
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003812:	2300      	movs	r3, #0
 8003814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003816:	2300      	movs	r3, #0
 8003818:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800381a:	2300      	movs	r3, #0
 800381c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800382a:	2200      	movs	r2, #0
 800382c:	4619      	mov	r1, r3
 800382e:	4814      	ldr	r0, [pc, #80]	@ (8003880 <MX_TIM1_Init+0x100>)
 8003830:	f002 fe60 	bl	80064f4 <HAL_TIM_PWM_ConfigChannel>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800383a:	f7ff fba1 	bl	8002f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800383e:	2300      	movs	r3, #0
 8003840:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003852:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003856:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003858:	2300      	movs	r3, #0
 800385a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800385c:	1d3b      	adds	r3, r7, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4807      	ldr	r0, [pc, #28]	@ (8003880 <MX_TIM1_Init+0x100>)
 8003862:	f003 f9af 	bl	8006bc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800386c:	f7ff fb88 	bl	8002f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003870:	4803      	ldr	r0, [pc, #12]	@ (8003880 <MX_TIM1_Init+0x100>)
 8003872:	f000 f82b 	bl	80038cc <HAL_TIM_MspPostInit>

}
 8003876:	bf00      	nop
 8003878:	3748      	adds	r7, #72	@ 0x48
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000784 	.word	0x20000784
 8003884:	40010000 	.word	0x40010000

08003888 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a0b      	ldr	r2, [pc, #44]	@ (80038c4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10d      	bne.n	80038b6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <HAL_TIM_PWM_MspInit+0x40>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	4a09      	ldr	r2, [pc, #36]	@ (80038c8 <HAL_TIM_PWM_MspInit+0x40>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038aa:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <HAL_TIM_PWM_MspInit+0x40>)
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40023800 	.word	0x40023800

080038cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a12      	ldr	r2, [pc, #72]	@ (8003934 <HAL_TIM_MspPostInit+0x68>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d11e      	bne.n	800392c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <HAL_TIM_MspPostInit+0x6c>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	4a10      	ldr	r2, [pc, #64]	@ (8003938 <HAL_TIM_MspPostInit+0x6c>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80038fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <HAL_TIM_MspPostInit+0x6c>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800390a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800390e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003910:	2302      	movs	r3, #2
 8003912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800391c:	2301      	movs	r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	4619      	mov	r1, r3
 8003926:	4805      	ldr	r0, [pc, #20]	@ (800393c <HAL_TIM_MspPostInit+0x70>)
 8003928:	f000 fde0 	bl	80044ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800392c:	bf00      	nop
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40010000 	.word	0x40010000
 8003938:	40023800 	.word	0x40023800
 800393c:	40020000 	.word	0x40020000

08003940 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003944:	4b11      	ldr	r3, [pc, #68]	@ (800398c <MX_USART2_UART_Init+0x4c>)
 8003946:	4a12      	ldr	r2, [pc, #72]	@ (8003990 <MX_USART2_UART_Init+0x50>)
 8003948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800394a:	4b10      	ldr	r3, [pc, #64]	@ (800398c <MX_USART2_UART_Init+0x4c>)
 800394c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003952:	4b0e      	ldr	r3, [pc, #56]	@ (800398c <MX_USART2_UART_Init+0x4c>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003958:	4b0c      	ldr	r3, [pc, #48]	@ (800398c <MX_USART2_UART_Init+0x4c>)
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800395e:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <MX_USART2_UART_Init+0x4c>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003964:	4b09      	ldr	r3, [pc, #36]	@ (800398c <MX_USART2_UART_Init+0x4c>)
 8003966:	220c      	movs	r2, #12
 8003968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396a:	4b08      	ldr	r3, [pc, #32]	@ (800398c <MX_USART2_UART_Init+0x4c>)
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003970:	4b06      	ldr	r3, [pc, #24]	@ (800398c <MX_USART2_UART_Init+0x4c>)
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003976:	4805      	ldr	r0, [pc, #20]	@ (800398c <MX_USART2_UART_Init+0x4c>)
 8003978:	f003 f976 	bl	8006c68 <HAL_UART_Init>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003982:	f7ff fafd 	bl	8002f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200007cc 	.word	0x200007cc
 8003990:	40004400 	.word	0x40004400

08003994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	@ 0x28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a19      	ldr	r2, [pc, #100]	@ (8003a18 <HAL_UART_MspInit+0x84>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d12b      	bne.n	8003a0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	4b18      	ldr	r3, [pc, #96]	@ (8003a1c <HAL_UART_MspInit+0x88>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	4a17      	ldr	r2, [pc, #92]	@ (8003a1c <HAL_UART_MspInit+0x88>)
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039c6:	4b15      	ldr	r3, [pc, #84]	@ (8003a1c <HAL_UART_MspInit+0x88>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b11      	ldr	r3, [pc, #68]	@ (8003a1c <HAL_UART_MspInit+0x88>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	4a10      	ldr	r2, [pc, #64]	@ (8003a1c <HAL_UART_MspInit+0x88>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039e2:	4b0e      	ldr	r3, [pc, #56]	@ (8003a1c <HAL_UART_MspInit+0x88>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039ee:	230c      	movs	r3, #12
 80039f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f2:	2302      	movs	r3, #2
 80039f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fa:	2303      	movs	r3, #3
 80039fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039fe:	2307      	movs	r3, #7
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	4619      	mov	r1, r3
 8003a08:	4805      	ldr	r0, [pc, #20]	@ (8003a20 <HAL_UART_MspInit+0x8c>)
 8003a0a:	f000 fd6f 	bl	80044ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3728      	adds	r7, #40	@ 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40004400 	.word	0x40004400
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40020000 	.word	0x40020000

08003a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a28:	f7ff fe98 	bl	800375c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a2c:	480c      	ldr	r0, [pc, #48]	@ (8003a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a2e:	490d      	ldr	r1, [pc, #52]	@ (8003a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a30:	4a0d      	ldr	r2, [pc, #52]	@ (8003a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a34:	e002      	b.n	8003a3c <LoopCopyDataInit>

08003a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a3a:	3304      	adds	r3, #4

08003a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a40:	d3f9      	bcc.n	8003a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a42:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a44:	4c0a      	ldr	r4, [pc, #40]	@ (8003a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a48:	e001      	b.n	8003a4e <LoopFillZerobss>

08003a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a4c:	3204      	adds	r2, #4

08003a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a50:	d3fb      	bcc.n	8003a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a52:	f004 fafd 	bl	8008050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a56:	f7ff f853 	bl	8002b00 <main>
  bx  lr    
 8003a5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a64:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003a68:	0800be74 	.word	0x0800be74
  ldr r2, =_sbss
 8003a6c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003a70:	20000964 	.word	0x20000964

08003a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a74:	e7fe      	b.n	8003a74 <ADC_IRQHandler>
	...

08003a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab8 <HAL_Init+0x40>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab8 <HAL_Init+0x40>)
 8003a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_Init+0x40>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab8 <HAL_Init+0x40>)
 8003a8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a94:	4b08      	ldr	r3, [pc, #32]	@ (8003ab8 <HAL_Init+0x40>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a07      	ldr	r2, [pc, #28]	@ (8003ab8 <HAL_Init+0x40>)
 8003a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aa0:	2003      	movs	r0, #3
 8003aa2:	f000 fcef 	bl	8004484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aa6:	200f      	movs	r0, #15
 8003aa8:	f000 f808 	bl	8003abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aac:	f7ff fd38 	bl	8003520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023c00 	.word	0x40023c00

08003abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ac4:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <HAL_InitTick+0x54>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b12      	ldr	r3, [pc, #72]	@ (8003b14 <HAL_InitTick+0x58>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	4619      	mov	r1, r3
 8003ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fcf9 	bl	80044d2 <HAL_SYSTICK_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00e      	b.n	8003b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b0f      	cmp	r3, #15
 8003aee:	d80a      	bhi.n	8003b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003af0:	2200      	movs	r2, #0
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	f000 fccf 	bl	800449a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003afc:	4a06      	ldr	r2, [pc, #24]	@ (8003b18 <HAL_InitTick+0x5c>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000010 	.word	0x20000010
 8003b14:	20000018 	.word	0x20000018
 8003b18:	20000014 	.word	0x20000014

08003b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <HAL_IncTick+0x20>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <HAL_IncTick+0x24>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4a04      	ldr	r2, [pc, #16]	@ (8003b40 <HAL_IncTick+0x24>)
 8003b2e:	6013      	str	r3, [r2, #0]
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000018 	.word	0x20000018
 8003b40:	20000814 	.word	0x20000814

08003b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return uwTick;
 8003b48:	4b03      	ldr	r3, [pc, #12]	@ (8003b58 <HAL_GetTick+0x14>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000814 	.word	0x20000814

08003b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b64:	f7ff ffee 	bl	8003b44 <HAL_GetTick>
 8003b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d005      	beq.n	8003b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <HAL_Delay+0x44>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b82:	bf00      	nop
 8003b84:	f7ff ffde 	bl	8003b44 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d8f7      	bhi.n	8003b84 <HAL_Delay+0x28>
  {
  }
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000018 	.word	0x20000018

08003ba4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e033      	b.n	8003c22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fe fd84 	bl	80026d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d118      	bne.n	8003c14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003bea:	f023 0302 	bic.w	r3, r3, #2
 8003bee:	f043 0202 	orr.w	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fa96 	bl	8004128 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	f023 0303 	bic.w	r3, r3, #3
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c12:	e001      	b.n	8003c18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_ADC_Start+0x1a>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e097      	b.n	8003d76 <HAL_ADC_Start+0x14a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d018      	beq.n	8003c8e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c6c:	4b45      	ldr	r3, [pc, #276]	@ (8003d84 <HAL_ADC_Start+0x158>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a45      	ldr	r2, [pc, #276]	@ (8003d88 <HAL_ADC_Start+0x15c>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	0c9a      	lsrs	r2, r3, #18
 8003c78:	4613      	mov	r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003c80:	e002      	b.n	8003c88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f9      	bne.n	8003c82 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d15f      	bne.n	8003d5c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003cc6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cda:	d106      	bne.n	8003cea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce0:	f023 0206 	bic.w	r2, r3, #6
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	645a      	str	r2, [r3, #68]	@ 0x44
 8003ce8:	e002      	b.n	8003cf0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cf8:	4b24      	ldr	r3, [pc, #144]	@ (8003d8c <HAL_ADC_Start+0x160>)
 8003cfa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003d04:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d129      	bne.n	8003d74 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	e020      	b.n	8003d74 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a16      	ldr	r2, [pc, #88]	@ (8003d90 <HAL_ADC_Start+0x164>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d11b      	bne.n	8003d74 <HAL_ADC_Start+0x148>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d114      	bne.n	8003d74 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d58:	609a      	str	r2, [r3, #8]
 8003d5a:	e00b      	b.n	8003d74 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	f043 0210 	orr.w	r2, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6c:	f043 0201 	orr.w	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000010 	.word	0x20000010
 8003d88:	431bde83 	.word	0x431bde83
 8003d8c:	40012300 	.word	0x40012300
 8003d90:	40012000 	.word	0x40012000

08003d94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db0:	d113      	bne.n	8003dda <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc0:	d10b      	bne.n	8003dda <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	f043 0220 	orr.w	r2, r3, #32
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e063      	b.n	8003ea2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dda:	f7ff feb3 	bl	8003b44 <HAL_GetTick>
 8003dde:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003de0:	e021      	b.n	8003e26 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d01d      	beq.n	8003e26 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d007      	beq.n	8003e00 <HAL_ADC_PollForConversion+0x6c>
 8003df0:	f7ff fea8 	bl	8003b44 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d212      	bcs.n	8003e26 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d00b      	beq.n	8003e26 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f043 0204 	orr.w	r2, r3, #4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e03d      	b.n	8003ea2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d1d6      	bne.n	8003de2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0212 	mvn.w	r2, #18
 8003e3c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d123      	bne.n	8003ea0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d11f      	bne.n	8003ea0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e66:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d111      	bne.n	8003ea0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e98:	f043 0201 	orr.w	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x1c>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e113      	b.n	8004108 <HAL_ADC_ConfigChannel+0x244>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	d925      	bls.n	8003f3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68d9      	ldr	r1, [r3, #12]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	3b1e      	subs	r3, #30
 8003f06:	2207      	movs	r2, #7
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43da      	mvns	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	400a      	ands	r2, r1
 8003f14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68d9      	ldr	r1, [r3, #12]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	4618      	mov	r0, r3
 8003f28:	4603      	mov	r3, r0
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4403      	add	r3, r0
 8003f2e:	3b1e      	subs	r3, #30
 8003f30:	409a      	lsls	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	e022      	b.n	8003f82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6919      	ldr	r1, [r3, #16]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	2207      	movs	r2, #7
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43da      	mvns	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6919      	ldr	r1, [r3, #16]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	4618      	mov	r0, r3
 8003f72:	4603      	mov	r3, r0
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4403      	add	r3, r0
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b06      	cmp	r3, #6
 8003f88:	d824      	bhi.n	8003fd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	3b05      	subs	r3, #5
 8003f9c:	221f      	movs	r2, #31
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	400a      	ands	r2, r1
 8003faa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	4618      	mov	r0, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3b05      	subs	r3, #5
 8003fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fd2:	e04c      	b.n	800406e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d824      	bhi.n	8004026 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	3b23      	subs	r3, #35	@ 0x23
 8003fee:	221f      	movs	r2, #31
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	4618      	mov	r0, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	3b23      	subs	r3, #35	@ 0x23
 8004018:	fa00 f203 	lsl.w	r2, r0, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30
 8004024:	e023      	b.n	800406e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	3b41      	subs	r3, #65	@ 0x41
 8004038:	221f      	movs	r2, #31
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43da      	mvns	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	400a      	ands	r2, r1
 8004046:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	4618      	mov	r0, r3
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	3b41      	subs	r3, #65	@ 0x41
 8004062:	fa00 f203 	lsl.w	r2, r0, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800406e:	4b29      	ldr	r3, [pc, #164]	@ (8004114 <HAL_ADC_ConfigChannel+0x250>)
 8004070:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a28      	ldr	r2, [pc, #160]	@ (8004118 <HAL_ADC_ConfigChannel+0x254>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d10f      	bne.n	800409c <HAL_ADC_ConfigChannel+0x1d8>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b12      	cmp	r3, #18
 8004082:	d10b      	bne.n	800409c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004118 <HAL_ADC_ConfigChannel+0x254>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d12b      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x23a>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1c      	ldr	r2, [pc, #112]	@ (800411c <HAL_ADC_ConfigChannel+0x258>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d003      	beq.n	80040b8 <HAL_ADC_ConfigChannel+0x1f4>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b11      	cmp	r3, #17
 80040b6:	d122      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a11      	ldr	r2, [pc, #68]	@ (800411c <HAL_ADC_ConfigChannel+0x258>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d111      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040da:	4b11      	ldr	r3, [pc, #68]	@ (8004120 <HAL_ADC_ConfigChannel+0x25c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a11      	ldr	r2, [pc, #68]	@ (8004124 <HAL_ADC_ConfigChannel+0x260>)
 80040e0:	fba2 2303 	umull	r2, r3, r2, r3
 80040e4:	0c9a      	lsrs	r2, r3, #18
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040f0:	e002      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f9      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40012300 	.word	0x40012300
 8004118:	40012000 	.word	0x40012000
 800411c:	10000012 	.word	0x10000012
 8004120:	20000010 	.word	0x20000010
 8004124:	431bde83 	.word	0x431bde83

08004128 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004130:	4b79      	ldr	r3, [pc, #484]	@ (8004318 <ADC_Init+0x1f0>)
 8004132:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800415c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	021a      	lsls	r2, r3, #8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6899      	ldr	r1, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	4a58      	ldr	r2, [pc, #352]	@ (800431c <ADC_Init+0x1f4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6899      	ldr	r1, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6899      	ldr	r1, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	e00f      	b.n	8004226 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004224:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0202 	bic.w	r2, r2, #2
 8004234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6899      	ldr	r1, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	7e1b      	ldrb	r3, [r3, #24]
 8004240:	005a      	lsls	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01b      	beq.n	800428c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004262:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004272:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6859      	ldr	r1, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	3b01      	subs	r3, #1
 8004280:	035a      	lsls	r2, r3, #13
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	e007      	b.n	800429c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800429a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80042aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	051a      	lsls	r2, r3, #20
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6899      	ldr	r1, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042de:	025a      	lsls	r2, r3, #9
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6899      	ldr	r1, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	029a      	lsls	r2, r3, #10
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40012300 	.word	0x40012300
 800431c:	0f000001 	.word	0x0f000001

08004320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004330:	4b0c      	ldr	r3, [pc, #48]	@ (8004364 <__NVIC_SetPriorityGrouping+0x44>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800433c:	4013      	ands	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004348:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800434c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004352:	4a04      	ldr	r2, [pc, #16]	@ (8004364 <__NVIC_SetPriorityGrouping+0x44>)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	60d3      	str	r3, [r2, #12]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800436c:	4b04      	ldr	r3, [pc, #16]	@ (8004380 <__NVIC_GetPriorityGrouping+0x18>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	0a1b      	lsrs	r3, r3, #8
 8004372:	f003 0307 	and.w	r3, r3, #7
}
 8004376:	4618      	mov	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	6039      	str	r1, [r7, #0]
 800438e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004394:	2b00      	cmp	r3, #0
 8004396:	db0a      	blt.n	80043ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	490c      	ldr	r1, [pc, #48]	@ (80043d0 <__NVIC_SetPriority+0x4c>)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	0112      	lsls	r2, r2, #4
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	440b      	add	r3, r1
 80043a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043ac:	e00a      	b.n	80043c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	4908      	ldr	r1, [pc, #32]	@ (80043d4 <__NVIC_SetPriority+0x50>)
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	3b04      	subs	r3, #4
 80043bc:	0112      	lsls	r2, r2, #4
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	440b      	add	r3, r1
 80043c2:	761a      	strb	r2, [r3, #24]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000e100 	.word	0xe000e100
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	@ 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f1c3 0307 	rsb	r3, r3, #7
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	bf28      	it	cs
 80043f6:	2304      	movcs	r3, #4
 80043f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3304      	adds	r3, #4
 80043fe:	2b06      	cmp	r3, #6
 8004400:	d902      	bls.n	8004408 <NVIC_EncodePriority+0x30>
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3b03      	subs	r3, #3
 8004406:	e000      	b.n	800440a <NVIC_EncodePriority+0x32>
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800440c:	f04f 32ff 	mov.w	r2, #4294967295
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43da      	mvns	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	401a      	ands	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004420:	f04f 31ff 	mov.w	r1, #4294967295
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	fa01 f303 	lsl.w	r3, r1, r3
 800442a:	43d9      	mvns	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004430:	4313      	orrs	r3, r2
         );
}
 8004432:	4618      	mov	r0, r3
 8004434:	3724      	adds	r7, #36	@ 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3b01      	subs	r3, #1
 800444c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004450:	d301      	bcc.n	8004456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004452:	2301      	movs	r3, #1
 8004454:	e00f      	b.n	8004476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004456:	4a0a      	ldr	r2, [pc, #40]	@ (8004480 <SysTick_Config+0x40>)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3b01      	subs	r3, #1
 800445c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800445e:	210f      	movs	r1, #15
 8004460:	f04f 30ff 	mov.w	r0, #4294967295
 8004464:	f7ff ff8e 	bl	8004384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004468:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <SysTick_Config+0x40>)
 800446a:	2200      	movs	r2, #0
 800446c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800446e:	4b04      	ldr	r3, [pc, #16]	@ (8004480 <SysTick_Config+0x40>)
 8004470:	2207      	movs	r2, #7
 8004472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	e000e010 	.word	0xe000e010

08004484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff ff47 	bl	8004320 <__NVIC_SetPriorityGrouping>
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800449a:	b580      	push	{r7, lr}
 800449c:	b086      	sub	sp, #24
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4603      	mov	r3, r0
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044ac:	f7ff ff5c 	bl	8004368 <__NVIC_GetPriorityGrouping>
 80044b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	6978      	ldr	r0, [r7, #20]
 80044b8:	f7ff ff8e 	bl	80043d8 <NVIC_EncodePriority>
 80044bc:	4602      	mov	r2, r0
 80044be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff5d 	bl	8004384 <__NVIC_SetPriority>
}
 80044ca:	bf00      	nop
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ffb0 	bl	8004440 <SysTick_Config>
 80044e0:	4603      	mov	r3, r0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b089      	sub	sp, #36	@ 0x24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	e159      	b.n	80047bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004508:	2201      	movs	r2, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	429a      	cmp	r2, r3
 8004522:	f040 8148 	bne.w	80047b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b01      	cmp	r3, #1
 8004530:	d005      	beq.n	800453e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800453a:	2b02      	cmp	r3, #2
 800453c:	d130      	bne.n	80045a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	2203      	movs	r2, #3
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43db      	mvns	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4013      	ands	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004574:	2201      	movs	r2, #1
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 0201 	and.w	r2, r3, #1
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d017      	beq.n	80045dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	2203      	movs	r2, #3
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d123      	bne.n	8004630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	08da      	lsrs	r2, r3, #3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3208      	adds	r2, #8
 80045f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	220f      	movs	r2, #15
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	08da      	lsrs	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3208      	adds	r2, #8
 800462a:	69b9      	ldr	r1, [r7, #24]
 800462c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	2203      	movs	r2, #3
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 0203 	and.w	r2, r3, #3
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80a2 	beq.w	80047b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	4b57      	ldr	r3, [pc, #348]	@ (80047d4 <HAL_GPIO_Init+0x2e8>)
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	4a56      	ldr	r2, [pc, #344]	@ (80047d4 <HAL_GPIO_Init+0x2e8>)
 800467c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004680:	6453      	str	r3, [r2, #68]	@ 0x44
 8004682:	4b54      	ldr	r3, [pc, #336]	@ (80047d4 <HAL_GPIO_Init+0x2e8>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800468e:	4a52      	ldr	r2, [pc, #328]	@ (80047d8 <HAL_GPIO_Init+0x2ec>)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	089b      	lsrs	r3, r3, #2
 8004694:	3302      	adds	r3, #2
 8004696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	220f      	movs	r2, #15
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a49      	ldr	r2, [pc, #292]	@ (80047dc <HAL_GPIO_Init+0x2f0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d019      	beq.n	80046ee <HAL_GPIO_Init+0x202>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a48      	ldr	r2, [pc, #288]	@ (80047e0 <HAL_GPIO_Init+0x2f4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <HAL_GPIO_Init+0x1fe>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a47      	ldr	r2, [pc, #284]	@ (80047e4 <HAL_GPIO_Init+0x2f8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00d      	beq.n	80046e6 <HAL_GPIO_Init+0x1fa>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a46      	ldr	r2, [pc, #280]	@ (80047e8 <HAL_GPIO_Init+0x2fc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d007      	beq.n	80046e2 <HAL_GPIO_Init+0x1f6>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a45      	ldr	r2, [pc, #276]	@ (80047ec <HAL_GPIO_Init+0x300>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d101      	bne.n	80046de <HAL_GPIO_Init+0x1f2>
 80046da:	2304      	movs	r3, #4
 80046dc:	e008      	b.n	80046f0 <HAL_GPIO_Init+0x204>
 80046de:	2307      	movs	r3, #7
 80046e0:	e006      	b.n	80046f0 <HAL_GPIO_Init+0x204>
 80046e2:	2303      	movs	r3, #3
 80046e4:	e004      	b.n	80046f0 <HAL_GPIO_Init+0x204>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e002      	b.n	80046f0 <HAL_GPIO_Init+0x204>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_GPIO_Init+0x204>
 80046ee:	2300      	movs	r3, #0
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	f002 0203 	and.w	r2, r2, #3
 80046f6:	0092      	lsls	r2, r2, #2
 80046f8:	4093      	lsls	r3, r2
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004700:	4935      	ldr	r1, [pc, #212]	@ (80047d8 <HAL_GPIO_Init+0x2ec>)
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	089b      	lsrs	r3, r3, #2
 8004706:	3302      	adds	r3, #2
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800470e:	4b38      	ldr	r3, [pc, #224]	@ (80047f0 <HAL_GPIO_Init+0x304>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004732:	4a2f      	ldr	r2, [pc, #188]	@ (80047f0 <HAL_GPIO_Init+0x304>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004738:	4b2d      	ldr	r3, [pc, #180]	@ (80047f0 <HAL_GPIO_Init+0x304>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800475c:	4a24      	ldr	r2, [pc, #144]	@ (80047f0 <HAL_GPIO_Init+0x304>)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004762:	4b23      	ldr	r3, [pc, #140]	@ (80047f0 <HAL_GPIO_Init+0x304>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	43db      	mvns	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004786:	4a1a      	ldr	r2, [pc, #104]	@ (80047f0 <HAL_GPIO_Init+0x304>)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800478c:	4b18      	ldr	r3, [pc, #96]	@ (80047f0 <HAL_GPIO_Init+0x304>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047b0:	4a0f      	ldr	r2, [pc, #60]	@ (80047f0 <HAL_GPIO_Init+0x304>)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3301      	adds	r3, #1
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	f67f aea2 	bls.w	8004508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	3724      	adds	r7, #36	@ 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40013800 	.word	0x40013800
 80047dc:	40020000 	.word	0x40020000
 80047e0:	40020400 	.word	0x40020400
 80047e4:	40020800 	.word	0x40020800
 80047e8:	40020c00 	.word	0x40020c00
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40013c00 	.word	0x40013c00

080047f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e12b      	b.n	8004a5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fe f800 	bl	8002820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2224      	movs	r2, #36	@ 0x24
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0201 	bic.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004858:	f001 fd24 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 800485c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4a81      	ldr	r2, [pc, #516]	@ (8004a68 <HAL_I2C_Init+0x274>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d807      	bhi.n	8004878 <HAL_I2C_Init+0x84>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a80      	ldr	r2, [pc, #512]	@ (8004a6c <HAL_I2C_Init+0x278>)
 800486c:	4293      	cmp	r3, r2
 800486e:	bf94      	ite	ls
 8004870:	2301      	movls	r3, #1
 8004872:	2300      	movhi	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e006      	b.n	8004886 <HAL_I2C_Init+0x92>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a7d      	ldr	r2, [pc, #500]	@ (8004a70 <HAL_I2C_Init+0x27c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	bf94      	ite	ls
 8004880:	2301      	movls	r3, #1
 8004882:	2300      	movhi	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e0e7      	b.n	8004a5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a78      	ldr	r2, [pc, #480]	@ (8004a74 <HAL_I2C_Init+0x280>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	0c9b      	lsrs	r3, r3, #18
 8004898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a6a      	ldr	r2, [pc, #424]	@ (8004a68 <HAL_I2C_Init+0x274>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d802      	bhi.n	80048c8 <HAL_I2C_Init+0xd4>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	3301      	adds	r3, #1
 80048c6:	e009      	b.n	80048dc <HAL_I2C_Init+0xe8>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	4a69      	ldr	r2, [pc, #420]	@ (8004a78 <HAL_I2C_Init+0x284>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	099b      	lsrs	r3, r3, #6
 80048da:	3301      	adds	r3, #1
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	495c      	ldr	r1, [pc, #368]	@ (8004a68 <HAL_I2C_Init+0x274>)
 80048f8:	428b      	cmp	r3, r1
 80048fa:	d819      	bhi.n	8004930 <HAL_I2C_Init+0x13c>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1e59      	subs	r1, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb1 f3f3 	udiv	r3, r1, r3
 800490a:	1c59      	adds	r1, r3, #1
 800490c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004910:	400b      	ands	r3, r1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_I2C_Init+0x138>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1e59      	subs	r1, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb1 f3f3 	udiv	r3, r1, r3
 8004924:	3301      	adds	r3, #1
 8004926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492a:	e051      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 800492c:	2304      	movs	r3, #4
 800492e:	e04f      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <HAL_I2C_Init+0x168>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e58      	subs	r0, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e012      	b.n	8004982 <HAL_I2C_Init+0x18e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1e58      	subs	r0, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	0099      	lsls	r1, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004972:	3301      	adds	r3, #1
 8004974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_I2C_Init+0x196>
 8004986:	2301      	movs	r3, #1
 8004988:	e022      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10e      	bne.n	80049b0 <HAL_I2C_Init+0x1bc>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1e58      	subs	r0, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	440b      	add	r3, r1
 80049a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a4:	3301      	adds	r3, #1
 80049a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ae:	e00f      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1e58      	subs	r0, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	0099      	lsls	r1, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	6809      	ldr	r1, [r1, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69da      	ldr	r2, [r3, #28]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6911      	ldr	r1, [r2, #16]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68d2      	ldr	r2, [r2, #12]
 8004a0a:	4311      	orrs	r1, r2
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	000186a0 	.word	0x000186a0
 8004a6c:	001e847f 	.word	0x001e847f
 8004a70:	003d08ff 	.word	0x003d08ff
 8004a74:	431bde83 	.word	0x431bde83
 8004a78:	10624dd3 	.word	0x10624dd3

08004a7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	461a      	mov	r2, r3
 8004a88:	460b      	mov	r3, r1
 8004a8a:	817b      	strh	r3, [r7, #10]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a90:	f7ff f858 	bl	8003b44 <HAL_GetTick>
 8004a94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	f040 80e0 	bne.w	8004c64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	2319      	movs	r3, #25
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4970      	ldr	r1, [pc, #448]	@ (8004c70 <HAL_I2C_Master_Transmit+0x1f4>)
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fd92 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
 8004abc:	e0d3      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_I2C_Master_Transmit+0x50>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e0cc      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d007      	beq.n	8004af2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2221      	movs	r2, #33	@ 0x21
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	893a      	ldrh	r2, [r7, #8]
 8004b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a50      	ldr	r2, [pc, #320]	@ (8004c74 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b34:	8979      	ldrh	r1, [r7, #10]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fbfc 	bl	8005338 <I2C_MasterRequestWrite>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e08d      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b60:	e066      	b.n	8004c30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	6a39      	ldr	r1, [r7, #32]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fe50 	bl	800580c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d107      	bne.n	8004b8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e06b      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	781a      	ldrb	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d11b      	bne.n	8004c04 <HAL_I2C_Master_Transmit+0x188>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d017      	beq.n	8004c04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	6a39      	ldr	r1, [r7, #32]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fe47 	bl	800589c <I2C_WaitOnBTFFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d107      	bne.n	8004c2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e01a      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d194      	bne.n	8004b62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	00100002 	.word	0x00100002
 8004c74:	ffff0000 	.word	0xffff0000

08004c78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	@ 0x30
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	461a      	mov	r2, r3
 8004c84:	460b      	mov	r3, r1
 8004c86:	817b      	strh	r3, [r7, #10]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c8c:	f7fe ff5a 	bl	8003b44 <HAL_GetTick>
 8004c90:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	f040 8217 	bne.w	80050ce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2319      	movs	r3, #25
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	497c      	ldr	r1, [pc, #496]	@ (8004e9c <HAL_I2C_Master_Receive+0x224>)
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fc94 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e20a      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_I2C_Master_Receive+0x50>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e203      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d007      	beq.n	8004cee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2222      	movs	r2, #34	@ 0x22
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2210      	movs	r2, #16
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	893a      	ldrh	r2, [r7, #8]
 8004d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ea0 <HAL_I2C_Master_Receive+0x228>)
 8004d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d30:	8979      	ldrh	r1, [r7, #10]
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fb80 	bl	800543c <I2C_MasterRequestRead>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e1c4      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d113      	bne.n	8004d76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e198      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d11b      	bne.n	8004db6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e178      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d11b      	bne.n	8004df6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	e158      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e1c:	e144      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	f200 80f1 	bhi.w	800500a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d123      	bne.n	8004e78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fd79 	bl	800592c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e145      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e76:	e117      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d14e      	bne.n	8004f1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	2200      	movs	r2, #0
 8004e88:	4906      	ldr	r1, [pc, #24]	@ (8004ea4 <HAL_I2C_Master_Receive+0x22c>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fba4 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e11a      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
 8004e9a:	bf00      	nop
 8004e9c:	00100002 	.word	0x00100002
 8004ea0:	ffff0000 	.word	0xffff0000
 8004ea4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f1c:	e0c4      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	2200      	movs	r2, #0
 8004f26:	496c      	ldr	r1, [pc, #432]	@ (80050d8 <HAL_I2C_Master_Receive+0x460>)
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fb55 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0cb      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	2200      	movs	r2, #0
 8004f82:	4955      	ldr	r1, [pc, #340]	@ (80050d8 <HAL_I2C_Master_Receive+0x460>)
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fb27 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e09d      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005008:	e04e      	b.n	80050a8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800500a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fc8c 	bl	800592c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e058      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d124      	bne.n	80050a8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005062:	2b03      	cmp	r3, #3
 8005064:	d107      	bne.n	8005076 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005074:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f47f aeb6 	bne.w	8004e1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	e000      	b.n	80050d0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80050ce:	2302      	movs	r3, #2
  }
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3728      	adds	r7, #40	@ 0x28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	00010004 	.word	0x00010004

080050dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	@ 0x28
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	460b      	mov	r3, r1
 80050ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80050ec:	f7fe fd2a 	bl	8003b44 <HAL_GetTick>
 80050f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b20      	cmp	r3, #32
 8005100:	f040 8111 	bne.w	8005326 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	2319      	movs	r3, #25
 800510a:	2201      	movs	r2, #1
 800510c:	4988      	ldr	r1, [pc, #544]	@ (8005330 <HAL_I2C_IsDeviceReady+0x254>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fa62 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800511a:	2302      	movs	r3, #2
 800511c:	e104      	b.n	8005328 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_I2C_IsDeviceReady+0x50>
 8005128:	2302      	movs	r3, #2
 800512a:	e0fd      	b.n	8005328 <HAL_I2C_IsDeviceReady+0x24c>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b01      	cmp	r3, #1
 8005140:	d007      	beq.n	8005152 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005160:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2224      	movs	r2, #36	@ 0x24
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4a70      	ldr	r2, [pc, #448]	@ (8005334 <HAL_I2C_IsDeviceReady+0x258>)
 8005174:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005184:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2200      	movs	r2, #0
 800518e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fa20 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00d      	beq.n	80051ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ac:	d103      	bne.n	80051b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051b4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e0b6      	b.n	8005328 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ba:	897b      	ldrh	r3, [r7, #10]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80051ca:	f7fe fcbb 	bl	8003b44 <HAL_GetTick>
 80051ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b02      	cmp	r3, #2
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f4:	bf0c      	ite	eq
 80051f6:	2301      	moveq	r3, #1
 80051f8:	2300      	movne	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051fe:	e025      	b.n	800524c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005200:	f7fe fca0 	bl	8003b44 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <HAL_I2C_IsDeviceReady+0x13a>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	22a0      	movs	r2, #160	@ 0xa0
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b02      	cmp	r3, #2
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2ba0      	cmp	r3, #160	@ 0xa0
 8005256:	d005      	beq.n	8005264 <HAL_I2C_IsDeviceReady+0x188>
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <HAL_I2C_IsDeviceReady+0x188>
 800525e:	7dbb      	ldrb	r3, [r7, #22]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0cd      	beq.n	8005200 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d129      	bne.n	80052ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005288:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	2319      	movs	r3, #25
 80052a6:	2201      	movs	r2, #1
 80052a8:	4921      	ldr	r1, [pc, #132]	@ (8005330 <HAL_I2C_IsDeviceReady+0x254>)
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f994 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e036      	b.n	8005328 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e02c      	b.n	8005328 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	2319      	movs	r3, #25
 80052ee:	2201      	movs	r2, #1
 80052f0:	490f      	ldr	r1, [pc, #60]	@ (8005330 <HAL_I2C_IsDeviceReady+0x254>)
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f970 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e012      	b.n	8005328 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	3301      	adds	r3, #1
 8005306:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	f4ff af32 	bcc.w	8005176 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005326:	2302      	movs	r3, #2
  }
}
 8005328:	4618      	mov	r0, r3
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	00100002 	.word	0x00100002
 8005334:	ffff0000 	.word	0xffff0000

08005338 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	607a      	str	r2, [r7, #4]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	460b      	mov	r3, r1
 8005346:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d006      	beq.n	8005362 <I2C_MasterRequestWrite+0x2a>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d003      	beq.n	8005362 <I2C_MasterRequestWrite+0x2a>
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005360:	d108      	bne.n	8005374 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e00b      	b.n	800538c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005378:	2b12      	cmp	r3, #18
 800537a:	d107      	bne.n	800538c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800538a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f91d 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053b2:	d103      	bne.n	80053bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e035      	b.n	800542c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053c8:	d108      	bne.n	80053dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ca:	897b      	ldrh	r3, [r7, #10]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053d8:	611a      	str	r2, [r3, #16]
 80053da:	e01b      	b.n	8005414 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053dc:	897b      	ldrh	r3, [r7, #10]
 80053de:	11db      	asrs	r3, r3, #7
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 0306 	and.w	r3, r3, #6
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f063 030f 	orn	r3, r3, #15
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	490e      	ldr	r1, [pc, #56]	@ (8005434 <I2C_MasterRequestWrite+0xfc>)
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f966 	bl	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e010      	b.n	800542c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800540a:	897b      	ldrh	r3, [r7, #10]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4907      	ldr	r1, [pc, #28]	@ (8005438 <I2C_MasterRequestWrite+0x100>)
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f956 	bl	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	00010008 	.word	0x00010008
 8005438:	00010002 	.word	0x00010002

0800543c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	460b      	mov	r3, r1
 800544a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005460:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d006      	beq.n	8005476 <I2C_MasterRequestRead+0x3a>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d003      	beq.n	8005476 <I2C_MasterRequestRead+0x3a>
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005474:	d108      	bne.n	8005488 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e00b      	b.n	80054a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548c:	2b11      	cmp	r3, #17
 800548e:	d107      	bne.n	80054a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800549e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f893 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00d      	beq.n	80054d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054c6:	d103      	bne.n	80054d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e079      	b.n	80055c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054dc:	d108      	bne.n	80054f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054de:	897b      	ldrh	r3, [r7, #10]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	611a      	str	r2, [r3, #16]
 80054ee:	e05f      	b.n	80055b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054f0:	897b      	ldrh	r3, [r7, #10]
 80054f2:	11db      	asrs	r3, r3, #7
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f003 0306 	and.w	r3, r3, #6
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f063 030f 	orn	r3, r3, #15
 8005500:	b2da      	uxtb	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4930      	ldr	r1, [pc, #192]	@ (80055d0 <I2C_MasterRequestRead+0x194>)
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f8dc 	bl	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e054      	b.n	80055c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800551e:	897b      	ldrh	r3, [r7, #10]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4929      	ldr	r1, [pc, #164]	@ (80055d4 <I2C_MasterRequestRead+0x198>)
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f8cc 	bl	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e044      	b.n	80055c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553e:	2300      	movs	r3, #0
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005562:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f831 	bl	80055d8 <I2C_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00d      	beq.n	8005598 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800558a:	d103      	bne.n	8005594 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005592:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e017      	b.n	80055c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005598:	897b      	ldrh	r3, [r7, #10]
 800559a:	11db      	asrs	r3, r3, #7
 800559c:	b2db      	uxtb	r3, r3
 800559e:	f003 0306 	and.w	r3, r3, #6
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	f063 030e 	orn	r3, r3, #14
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4907      	ldr	r1, [pc, #28]	@ (80055d4 <I2C_MasterRequestRead+0x198>)
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 f888 	bl	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	00010008 	.word	0x00010008
 80055d4:	00010002 	.word	0x00010002

080055d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055e8:	e048      	b.n	800567c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d044      	beq.n	800567c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f2:	f7fe faa7 	bl	8003b44 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d302      	bcc.n	8005608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d139      	bne.n	800567c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	0c1b      	lsrs	r3, r3, #16
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	d10d      	bne.n	800562e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	43da      	mvns	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4013      	ands	r3, r2
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	bf0c      	ite	eq
 8005624:	2301      	moveq	r3, #1
 8005626:	2300      	movne	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	461a      	mov	r2, r3
 800562c:	e00c      	b.n	8005648 <I2C_WaitOnFlagUntilTimeout+0x70>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	43da      	mvns	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4013      	ands	r3, r2
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	429a      	cmp	r2, r3
 800564c:	d116      	bne.n	800567c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005668:	f043 0220 	orr.w	r2, r3, #32
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e023      	b.n	80056c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	d10d      	bne.n	80056a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	43da      	mvns	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	4013      	ands	r3, r2
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	e00c      	b.n	80056bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	43da      	mvns	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4013      	ands	r3, r2
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d093      	beq.n	80055ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056da:	e071      	b.n	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ea:	d123      	bne.n	8005734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	f043 0204 	orr.w	r2, r3, #4
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e067      	b.n	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d041      	beq.n	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573c:	f7fe fa02 	bl	8003b44 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	d302      	bcc.n	8005752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d136      	bne.n	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d10c      	bne.n	8005776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	43da      	mvns	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	bf14      	ite	ne
 800576e:	2301      	movne	r3, #1
 8005770:	2300      	moveq	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	e00b      	b.n	800578e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	43da      	mvns	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4013      	ands	r3, r2
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	bf14      	ite	ne
 8005788:	2301      	movne	r3, #1
 800578a:	2300      	moveq	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d016      	beq.n	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	f043 0220 	orr.w	r2, r3, #32
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e021      	b.n	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	0c1b      	lsrs	r3, r3, #16
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d10c      	bne.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	43da      	mvns	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4013      	ands	r3, r2
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e00b      	b.n	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	43da      	mvns	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4013      	ands	r3, r2
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bf14      	ite	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	2300      	moveq	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f47f af6d 	bne.w	80056dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005818:	e034      	b.n	8005884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f8e3 	bl	80059e6 <I2C_IsAcknowledgeFailed>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e034      	b.n	8005894 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005830:	d028      	beq.n	8005884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005832:	f7fe f987 	bl	8003b44 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	429a      	cmp	r2, r3
 8005840:	d302      	bcc.n	8005848 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d11d      	bne.n	8005884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005852:	2b80      	cmp	r3, #128	@ 0x80
 8005854:	d016      	beq.n	8005884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005870:	f043 0220 	orr.w	r2, r3, #32
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e007      	b.n	8005894 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588e:	2b80      	cmp	r3, #128	@ 0x80
 8005890:	d1c3      	bne.n	800581a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058a8:	e034      	b.n	8005914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f89b 	bl	80059e6 <I2C_IsAcknowledgeFailed>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e034      	b.n	8005924 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d028      	beq.n	8005914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c2:	f7fe f93f 	bl	8003b44 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11d      	bne.n	8005914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d016      	beq.n	8005914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005900:	f043 0220 	orr.w	r2, r3, #32
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e007      	b.n	8005924 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b04      	cmp	r3, #4
 8005920:	d1c3      	bne.n	80058aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005938:	e049      	b.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b10      	cmp	r3, #16
 8005946:	d119      	bne.n	800597c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0210 	mvn.w	r2, #16
 8005950:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e030      	b.n	80059de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597c:	f7fe f8e2 	bl	8003b44 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	429a      	cmp	r2, r3
 800598a:	d302      	bcc.n	8005992 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d11d      	bne.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599c:	2b40      	cmp	r3, #64	@ 0x40
 800599e:	d016      	beq.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	f043 0220 	orr.w	r2, r3, #32
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e007      	b.n	80059de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d8:	2b40      	cmp	r3, #64	@ 0x40
 80059da:	d1ae      	bne.n	800593a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059fc:	d11b      	bne.n	8005a36 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a22:	f043 0204 	orr.w	r2, r3, #4
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e267      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d075      	beq.n	8005b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a62:	4b88      	ldr	r3, [pc, #544]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 030c 	and.w	r3, r3, #12
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d00c      	beq.n	8005a88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a6e:	4b85      	ldr	r3, [pc, #532]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d112      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a7a:	4b82      	ldr	r3, [pc, #520]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a86:	d10b      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a88:	4b7e      	ldr	r3, [pc, #504]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d05b      	beq.n	8005b4c <HAL_RCC_OscConfig+0x108>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d157      	bne.n	8005b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e242      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa8:	d106      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x74>
 8005aaa:	4b76      	ldr	r3, [pc, #472]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a75      	ldr	r2, [pc, #468]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e01d      	b.n	8005af4 <HAL_RCC_OscConfig+0xb0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ac0:	d10c      	bne.n	8005adc <HAL_RCC_OscConfig+0x98>
 8005ac2:	4b70      	ldr	r3, [pc, #448]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a6f      	ldr	r2, [pc, #444]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	4b6d      	ldr	r3, [pc, #436]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a6c      	ldr	r2, [pc, #432]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	e00b      	b.n	8005af4 <HAL_RCC_OscConfig+0xb0>
 8005adc:	4b69      	ldr	r3, [pc, #420]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a68      	ldr	r2, [pc, #416]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	4b66      	ldr	r3, [pc, #408]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a65      	ldr	r2, [pc, #404]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d013      	beq.n	8005b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afc:	f7fe f822 	bl	8003b44 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b04:	f7fe f81e 	bl	8003b44 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b64      	cmp	r3, #100	@ 0x64
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e207      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b16:	4b5b      	ldr	r3, [pc, #364]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0f0      	beq.n	8005b04 <HAL_RCC_OscConfig+0xc0>
 8005b22:	e014      	b.n	8005b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b24:	f7fe f80e 	bl	8003b44 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b2c:	f7fe f80a 	bl	8003b44 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b64      	cmp	r3, #100	@ 0x64
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e1f3      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b3e:	4b51      	ldr	r3, [pc, #324]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0xe8>
 8005b4a:	e000      	b.n	8005b4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d063      	beq.n	8005c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b66:	4b47      	ldr	r3, [pc, #284]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d11c      	bne.n	8005bac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b72:	4b44      	ldr	r3, [pc, #272]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d116      	bne.n	8005bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7e:	4b41      	ldr	r3, [pc, #260]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d005      	beq.n	8005b96 <HAL_RCC_OscConfig+0x152>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d001      	beq.n	8005b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e1c7      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b96:	4b3b      	ldr	r3, [pc, #236]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4937      	ldr	r1, [pc, #220]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005baa:	e03a      	b.n	8005c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d020      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bb4:	4b34      	ldr	r3, [pc, #208]	@ (8005c88 <HAL_RCC_OscConfig+0x244>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bba:	f7fd ffc3 	bl	8003b44 <HAL_GetTick>
 8005bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc0:	e008      	b.n	8005bd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bc2:	f7fd ffbf 	bl	8003b44 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e1a8      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0f0      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be0:	4b28      	ldr	r3, [pc, #160]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4925      	ldr	r1, [pc, #148]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]
 8005bf4:	e015      	b.n	8005c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bf6:	4b24      	ldr	r3, [pc, #144]	@ (8005c88 <HAL_RCC_OscConfig+0x244>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fd ffa2 	bl	8003b44 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c04:	f7fd ff9e 	bl	8003b44 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e187      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c16:	4b1b      	ldr	r3, [pc, #108]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f0      	bne.n	8005c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d036      	beq.n	8005c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d016      	beq.n	8005c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c36:	4b15      	ldr	r3, [pc, #84]	@ (8005c8c <HAL_RCC_OscConfig+0x248>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3c:	f7fd ff82 	bl	8003b44 <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c44:	f7fd ff7e 	bl	8003b44 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e167      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c56:	4b0b      	ldr	r3, [pc, #44]	@ (8005c84 <HAL_RCC_OscConfig+0x240>)
 8005c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0f0      	beq.n	8005c44 <HAL_RCC_OscConfig+0x200>
 8005c62:	e01b      	b.n	8005c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c64:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <HAL_RCC_OscConfig+0x248>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6a:	f7fd ff6b 	bl	8003b44 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c70:	e00e      	b.n	8005c90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c72:	f7fd ff67 	bl	8003b44 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d907      	bls.n	8005c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e150      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
 8005c84:	40023800 	.word	0x40023800
 8005c88:	42470000 	.word	0x42470000
 8005c8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c90:	4b88      	ldr	r3, [pc, #544]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1ea      	bne.n	8005c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8097 	beq.w	8005dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005caa:	2300      	movs	r3, #0
 8005cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cae:	4b81      	ldr	r3, [pc, #516]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10f      	bne.n	8005cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60bb      	str	r3, [r7, #8]
 8005cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc2:	4a7c      	ldr	r2, [pc, #496]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cca:	4b7a      	ldr	r3, [pc, #488]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd2:	60bb      	str	r3, [r7, #8]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cda:	4b77      	ldr	r3, [pc, #476]	@ (8005eb8 <HAL_RCC_OscConfig+0x474>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d118      	bne.n	8005d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ce6:	4b74      	ldr	r3, [pc, #464]	@ (8005eb8 <HAL_RCC_OscConfig+0x474>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a73      	ldr	r2, [pc, #460]	@ (8005eb8 <HAL_RCC_OscConfig+0x474>)
 8005cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cf2:	f7fd ff27 	bl	8003b44 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cfa:	f7fd ff23 	bl	8003b44 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e10c      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8005eb8 <HAL_RCC_OscConfig+0x474>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0f0      	beq.n	8005cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d106      	bne.n	8005d2e <HAL_RCC_OscConfig+0x2ea>
 8005d20:	4b64      	ldr	r3, [pc, #400]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d24:	4a63      	ldr	r2, [pc, #396]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d2c:	e01c      	b.n	8005d68 <HAL_RCC_OscConfig+0x324>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b05      	cmp	r3, #5
 8005d34:	d10c      	bne.n	8005d50 <HAL_RCC_OscConfig+0x30c>
 8005d36:	4b5f      	ldr	r3, [pc, #380]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005d3c:	f043 0304 	orr.w	r3, r3, #4
 8005d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d42:	4b5c      	ldr	r3, [pc, #368]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d46:	4a5b      	ldr	r2, [pc, #364]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d4e:	e00b      	b.n	8005d68 <HAL_RCC_OscConfig+0x324>
 8005d50:	4b58      	ldr	r3, [pc, #352]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d54:	4a57      	ldr	r2, [pc, #348]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005d56:	f023 0301 	bic.w	r3, r3, #1
 8005d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d5c:	4b55      	ldr	r3, [pc, #340]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d60:	4a54      	ldr	r2, [pc, #336]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005d62:	f023 0304 	bic.w	r3, r3, #4
 8005d66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d015      	beq.n	8005d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d70:	f7fd fee8 	bl	8003b44 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d76:	e00a      	b.n	8005d8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d78:	f7fd fee4 	bl	8003b44 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e0cb      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8e:	4b49      	ldr	r3, [pc, #292]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0ee      	beq.n	8005d78 <HAL_RCC_OscConfig+0x334>
 8005d9a:	e014      	b.n	8005dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9c:	f7fd fed2 	bl	8003b44 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da2:	e00a      	b.n	8005dba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da4:	f7fd fece 	bl	8003b44 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e0b5      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dba:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1ee      	bne.n	8005da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d105      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dcc:	4b39      	ldr	r3, [pc, #228]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd0:	4a38      	ldr	r2, [pc, #224]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 80a1 	beq.w	8005f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005de2:	4b34      	ldr	r3, [pc, #208]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d05c      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d141      	bne.n	8005e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df6:	4b31      	ldr	r3, [pc, #196]	@ (8005ebc <HAL_RCC_OscConfig+0x478>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfc:	f7fd fea2 	bl	8003b44 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e04:	f7fd fe9e 	bl	8003b44 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e087      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e16:	4b27      	ldr	r3, [pc, #156]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f0      	bne.n	8005e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69da      	ldr	r2, [r3, #28]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	019b      	lsls	r3, r3, #6
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e38:	085b      	lsrs	r3, r3, #1
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	041b      	lsls	r3, r3, #16
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	061b      	lsls	r3, r3, #24
 8005e46:	491b      	ldr	r1, [pc, #108]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ebc <HAL_RCC_OscConfig+0x478>)
 8005e4e:	2201      	movs	r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e52:	f7fd fe77 	bl	8003b44 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5a:	f7fd fe73 	bl	8003b44 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e05c      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e6c:	4b11      	ldr	r3, [pc, #68]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <HAL_RCC_OscConfig+0x416>
 8005e78:	e054      	b.n	8005f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7a:	4b10      	ldr	r3, [pc, #64]	@ (8005ebc <HAL_RCC_OscConfig+0x478>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e80:	f7fd fe60 	bl	8003b44 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e88:	f7fd fe5c 	bl	8003b44 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e045      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9a:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <HAL_RCC_OscConfig+0x470>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x444>
 8005ea6:	e03d      	b.n	8005f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d107      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e038      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	40007000 	.word	0x40007000
 8005ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8005f30 <HAL_RCC_OscConfig+0x4ec>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d028      	beq.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d121      	bne.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d11a      	bne.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d111      	bne.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d107      	bne.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d001      	beq.n	8005f24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e000      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40023800 	.word	0x40023800

08005f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0cc      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f48:	4b68      	ldr	r3, [pc, #416]	@ (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d90c      	bls.n	8005f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f56:	4b65      	ldr	r3, [pc, #404]	@ (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5e:	4b63      	ldr	r3, [pc, #396]	@ (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d001      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0b8      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d020      	beq.n	8005fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f88:	4b59      	ldr	r3, [pc, #356]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	4a58      	ldr	r2, [pc, #352]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fa0:	4b53      	ldr	r3, [pc, #332]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	4a52      	ldr	r2, [pc, #328]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fac:	4b50      	ldr	r3, [pc, #320]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	494d      	ldr	r1, [pc, #308]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d044      	beq.n	8006054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d107      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd2:	4b47      	ldr	r3, [pc, #284]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d119      	bne.n	8006012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e07f      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d107      	bne.n	8006002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e06f      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006002:	4b3b      	ldr	r3, [pc, #236]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e067      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006012:	4b37      	ldr	r3, [pc, #220]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f023 0203 	bic.w	r2, r3, #3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	4934      	ldr	r1, [pc, #208]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006020:	4313      	orrs	r3, r2
 8006022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006024:	f7fd fd8e 	bl	8003b44 <HAL_GetTick>
 8006028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602a:	e00a      	b.n	8006042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800602c:	f7fd fd8a 	bl	8003b44 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e04f      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006042:	4b2b      	ldr	r3, [pc, #172]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 020c 	and.w	r2, r3, #12
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	429a      	cmp	r2, r3
 8006052:	d1eb      	bne.n	800602c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006054:	4b25      	ldr	r3, [pc, #148]	@ (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d20c      	bcs.n	800607c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006062:	4b22      	ldr	r3, [pc, #136]	@ (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800606a:	4b20      	ldr	r3, [pc, #128]	@ (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d001      	beq.n	800607c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e032      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006088:	4b19      	ldr	r3, [pc, #100]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	4916      	ldr	r1, [pc, #88]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006096:	4313      	orrs	r3, r2
 8006098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060a6:	4b12      	ldr	r3, [pc, #72]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	490e      	ldr	r1, [pc, #56]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060ba:	f000 f821 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 80060be:	4602      	mov	r2, r0
 80060c0:	4b0b      	ldr	r3, [pc, #44]	@ (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	091b      	lsrs	r3, r3, #4
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	490a      	ldr	r1, [pc, #40]	@ (80060f4 <HAL_RCC_ClockConfig+0x1c0>)
 80060cc:	5ccb      	ldrb	r3, [r1, r3]
 80060ce:	fa22 f303 	lsr.w	r3, r2, r3
 80060d2:	4a09      	ldr	r2, [pc, #36]	@ (80060f8 <HAL_RCC_ClockConfig+0x1c4>)
 80060d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80060d6:	4b09      	ldr	r3, [pc, #36]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fd fcee 	bl	8003abc <HAL_InitTick>

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	40023c00 	.word	0x40023c00
 80060f0:	40023800 	.word	0x40023800
 80060f4:	0800bad4 	.word	0x0800bad4
 80060f8:	20000010 	.word	0x20000010
 80060fc:	20000014 	.word	0x20000014

08006100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006104:	b090      	sub	sp, #64	@ 0x40
 8006106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006118:	4b59      	ldr	r3, [pc, #356]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x180>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 030c 	and.w	r3, r3, #12
 8006120:	2b08      	cmp	r3, #8
 8006122:	d00d      	beq.n	8006140 <HAL_RCC_GetSysClockFreq+0x40>
 8006124:	2b08      	cmp	r3, #8
 8006126:	f200 80a1 	bhi.w	800626c <HAL_RCC_GetSysClockFreq+0x16c>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_RCC_GetSysClockFreq+0x34>
 800612e:	2b04      	cmp	r3, #4
 8006130:	d003      	beq.n	800613a <HAL_RCC_GetSysClockFreq+0x3a>
 8006132:	e09b      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006134:	4b53      	ldr	r3, [pc, #332]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x184>)
 8006136:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006138:	e09b      	b.n	8006272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800613a:	4b53      	ldr	r3, [pc, #332]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x188>)
 800613c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800613e:	e098      	b.n	8006272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006140:	4b4f      	ldr	r3, [pc, #316]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x180>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006148:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800614a:	4b4d      	ldr	r3, [pc, #308]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x180>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d028      	beq.n	80061a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006156:	4b4a      	ldr	r3, [pc, #296]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x180>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	099b      	lsrs	r3, r3, #6
 800615c:	2200      	movs	r2, #0
 800615e:	623b      	str	r3, [r7, #32]
 8006160:	627a      	str	r2, [r7, #36]	@ 0x24
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006168:	2100      	movs	r1, #0
 800616a:	4b47      	ldr	r3, [pc, #284]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x188>)
 800616c:	fb03 f201 	mul.w	r2, r3, r1
 8006170:	2300      	movs	r3, #0
 8006172:	fb00 f303 	mul.w	r3, r0, r3
 8006176:	4413      	add	r3, r2
 8006178:	4a43      	ldr	r2, [pc, #268]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x188>)
 800617a:	fba0 1202 	umull	r1, r2, r0, r2
 800617e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006180:	460a      	mov	r2, r1
 8006182:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006186:	4413      	add	r3, r2
 8006188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800618a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618c:	2200      	movs	r2, #0
 800618e:	61bb      	str	r3, [r7, #24]
 8006190:	61fa      	str	r2, [r7, #28]
 8006192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006196:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800619a:	f7fa fdad 	bl	8000cf8 <__aeabi_uldivmod>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4613      	mov	r3, r2
 80061a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061a6:	e053      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061a8:	4b35      	ldr	r3, [pc, #212]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x180>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	099b      	lsrs	r3, r3, #6
 80061ae:	2200      	movs	r2, #0
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	617a      	str	r2, [r7, #20]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80061ba:	f04f 0b00 	mov.w	fp, #0
 80061be:	4652      	mov	r2, sl
 80061c0:	465b      	mov	r3, fp
 80061c2:	f04f 0000 	mov.w	r0, #0
 80061c6:	f04f 0100 	mov.w	r1, #0
 80061ca:	0159      	lsls	r1, r3, #5
 80061cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061d0:	0150      	lsls	r0, r2, #5
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	ebb2 080a 	subs.w	r8, r2, sl
 80061da:	eb63 090b 	sbc.w	r9, r3, fp
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80061ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80061ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80061f2:	ebb2 0408 	subs.w	r4, r2, r8
 80061f6:	eb63 0509 	sbc.w	r5, r3, r9
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	00eb      	lsls	r3, r5, #3
 8006204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006208:	00e2      	lsls	r2, r4, #3
 800620a:	4614      	mov	r4, r2
 800620c:	461d      	mov	r5, r3
 800620e:	eb14 030a 	adds.w	r3, r4, sl
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	eb45 030b 	adc.w	r3, r5, fp
 8006218:	607b      	str	r3, [r7, #4]
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006226:	4629      	mov	r1, r5
 8006228:	028b      	lsls	r3, r1, #10
 800622a:	4621      	mov	r1, r4
 800622c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006230:	4621      	mov	r1, r4
 8006232:	028a      	lsls	r2, r1, #10
 8006234:	4610      	mov	r0, r2
 8006236:	4619      	mov	r1, r3
 8006238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623a:	2200      	movs	r2, #0
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	60fa      	str	r2, [r7, #12]
 8006240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006244:	f7fa fd58 	bl	8000cf8 <__aeabi_uldivmod>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4613      	mov	r3, r2
 800624e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006250:	4b0b      	ldr	r3, [pc, #44]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x180>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	0c1b      	lsrs	r3, r3, #16
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	3301      	adds	r3, #1
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006260:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800626a:	e002      	b.n	8006272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800626c:	4b05      	ldr	r3, [pc, #20]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x184>)
 800626e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006274:	4618      	mov	r0, r3
 8006276:	3740      	adds	r7, #64	@ 0x40
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800627e:	bf00      	nop
 8006280:	40023800 	.word	0x40023800
 8006284:	00f42400 	.word	0x00f42400
 8006288:	017d7840 	.word	0x017d7840

0800628c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006290:	4b03      	ldr	r3, [pc, #12]	@ (80062a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006292:	681b      	ldr	r3, [r3, #0]
}
 8006294:	4618      	mov	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000010 	.word	0x20000010

080062a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062a8:	f7ff fff0 	bl	800628c <HAL_RCC_GetHCLKFreq>
 80062ac:	4602      	mov	r2, r0
 80062ae:	4b05      	ldr	r3, [pc, #20]	@ (80062c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	0a9b      	lsrs	r3, r3, #10
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	4903      	ldr	r1, [pc, #12]	@ (80062c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ba:	5ccb      	ldrb	r3, [r1, r3]
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40023800 	.word	0x40023800
 80062c8:	0800bae4 	.word	0x0800bae4

080062cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062d0:	f7ff ffdc 	bl	800628c <HAL_RCC_GetHCLKFreq>
 80062d4:	4602      	mov	r2, r0
 80062d6:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	0b5b      	lsrs	r3, r3, #13
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	4903      	ldr	r1, [pc, #12]	@ (80062f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062e2:	5ccb      	ldrb	r3, [r1, r3]
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40023800 	.word	0x40023800
 80062f0:	0800bae4 	.word	0x0800bae4

080062f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e041      	b.n	800638a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fd fab4 	bl	8003888 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3304      	adds	r3, #4
 8006330:	4619      	mov	r1, r3
 8006332:	4610      	mov	r0, r2
 8006334:	f000 f9a0 	bl	8006678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d109      	bne.n	80063b8 <HAL_TIM_PWM_Start+0x24>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	bf14      	ite	ne
 80063b0:	2301      	movne	r3, #1
 80063b2:	2300      	moveq	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	e022      	b.n	80063fe <HAL_TIM_PWM_Start+0x6a>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d109      	bne.n	80063d2 <HAL_TIM_PWM_Start+0x3e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	bf14      	ite	ne
 80063ca:	2301      	movne	r3, #1
 80063cc:	2300      	moveq	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	e015      	b.n	80063fe <HAL_TIM_PWM_Start+0x6a>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d109      	bne.n	80063ec <HAL_TIM_PWM_Start+0x58>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	bf14      	ite	ne
 80063e4:	2301      	movne	r3, #1
 80063e6:	2300      	moveq	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	e008      	b.n	80063fe <HAL_TIM_PWM_Start+0x6a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	bf14      	ite	ne
 80063f8:	2301      	movne	r3, #1
 80063fa:	2300      	moveq	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e068      	b.n	80064d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d104      	bne.n	8006416 <HAL_TIM_PWM_Start+0x82>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006414:	e013      	b.n	800643e <HAL_TIM_PWM_Start+0xaa>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b04      	cmp	r3, #4
 800641a:	d104      	bne.n	8006426 <HAL_TIM_PWM_Start+0x92>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006424:	e00b      	b.n	800643e <HAL_TIM_PWM_Start+0xaa>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d104      	bne.n	8006436 <HAL_TIM_PWM_Start+0xa2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006434:	e003      	b.n	800643e <HAL_TIM_PWM_Start+0xaa>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2202      	movs	r2, #2
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2201      	movs	r2, #1
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fb28 	bl	8006a9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a23      	ldr	r2, [pc, #140]	@ (80064e0 <HAL_TIM_PWM_Start+0x14c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d107      	bne.n	8006466 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006464:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1d      	ldr	r2, [pc, #116]	@ (80064e0 <HAL_TIM_PWM_Start+0x14c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d018      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x10e>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006478:	d013      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x10e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a19      	ldr	r2, [pc, #100]	@ (80064e4 <HAL_TIM_PWM_Start+0x150>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00e      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x10e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a17      	ldr	r2, [pc, #92]	@ (80064e8 <HAL_TIM_PWM_Start+0x154>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x10e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a16      	ldr	r2, [pc, #88]	@ (80064ec <HAL_TIM_PWM_Start+0x158>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x10e>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a14      	ldr	r2, [pc, #80]	@ (80064f0 <HAL_TIM_PWM_Start+0x15c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d111      	bne.n	80064c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b06      	cmp	r3, #6
 80064b2:	d010      	beq.n	80064d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c4:	e007      	b.n	80064d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	40010000 	.word	0x40010000
 80064e4:	40000400 	.word	0x40000400
 80064e8:	40000800 	.word	0x40000800
 80064ec:	40000c00 	.word	0x40000c00
 80064f0:	40014000 	.word	0x40014000

080064f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800650e:	2302      	movs	r3, #2
 8006510:	e0ae      	b.n	8006670 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b0c      	cmp	r3, #12
 800651e:	f200 809f 	bhi.w	8006660 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006522:	a201      	add	r2, pc, #4	@ (adr r2, 8006528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	0800655d 	.word	0x0800655d
 800652c:	08006661 	.word	0x08006661
 8006530:	08006661 	.word	0x08006661
 8006534:	08006661 	.word	0x08006661
 8006538:	0800659d 	.word	0x0800659d
 800653c:	08006661 	.word	0x08006661
 8006540:	08006661 	.word	0x08006661
 8006544:	08006661 	.word	0x08006661
 8006548:	080065df 	.word	0x080065df
 800654c:	08006661 	.word	0x08006661
 8006550:	08006661 	.word	0x08006661
 8006554:	08006661 	.word	0x08006661
 8006558:	0800661f 	.word	0x0800661f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f90e 	bl	8006784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699a      	ldr	r2, [r3, #24]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0208 	orr.w	r2, r2, #8
 8006576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0204 	bic.w	r2, r2, #4
 8006586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6999      	ldr	r1, [r3, #24]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	691a      	ldr	r2, [r3, #16]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	619a      	str	r2, [r3, #24]
      break;
 800659a:	e064      	b.n	8006666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 f954 	bl	8006850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699a      	ldr	r2, [r3, #24]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6999      	ldr	r1, [r3, #24]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	021a      	lsls	r2, r3, #8
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	619a      	str	r2, [r3, #24]
      break;
 80065dc:	e043      	b.n	8006666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 f99f 	bl	8006928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69da      	ldr	r2, [r3, #28]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0208 	orr.w	r2, r2, #8
 80065f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0204 	bic.w	r2, r2, #4
 8006608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69d9      	ldr	r1, [r3, #28]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	61da      	str	r2, [r3, #28]
      break;
 800661c:	e023      	b.n	8006666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f9e9 	bl	80069fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69da      	ldr	r2, [r3, #28]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69da      	ldr	r2, [r3, #28]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69d9      	ldr	r1, [r3, #28]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	021a      	lsls	r2, r3, #8
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	61da      	str	r2, [r3, #28]
      break;
 800665e:	e002      	b.n	8006666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	75fb      	strb	r3, [r7, #23]
      break;
 8006664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800666e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a37      	ldr	r2, [pc, #220]	@ (8006768 <TIM_Base_SetConfig+0xf0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00f      	beq.n	80066b0 <TIM_Base_SetConfig+0x38>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006696:	d00b      	beq.n	80066b0 <TIM_Base_SetConfig+0x38>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a34      	ldr	r2, [pc, #208]	@ (800676c <TIM_Base_SetConfig+0xf4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d007      	beq.n	80066b0 <TIM_Base_SetConfig+0x38>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a33      	ldr	r2, [pc, #204]	@ (8006770 <TIM_Base_SetConfig+0xf8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_Base_SetConfig+0x38>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a32      	ldr	r2, [pc, #200]	@ (8006774 <TIM_Base_SetConfig+0xfc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d108      	bne.n	80066c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a28      	ldr	r2, [pc, #160]	@ (8006768 <TIM_Base_SetConfig+0xf0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01b      	beq.n	8006702 <TIM_Base_SetConfig+0x8a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d0:	d017      	beq.n	8006702 <TIM_Base_SetConfig+0x8a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a25      	ldr	r2, [pc, #148]	@ (800676c <TIM_Base_SetConfig+0xf4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <TIM_Base_SetConfig+0x8a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a24      	ldr	r2, [pc, #144]	@ (8006770 <TIM_Base_SetConfig+0xf8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00f      	beq.n	8006702 <TIM_Base_SetConfig+0x8a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a23      	ldr	r2, [pc, #140]	@ (8006774 <TIM_Base_SetConfig+0xfc>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00b      	beq.n	8006702 <TIM_Base_SetConfig+0x8a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a22      	ldr	r2, [pc, #136]	@ (8006778 <TIM_Base_SetConfig+0x100>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d007      	beq.n	8006702 <TIM_Base_SetConfig+0x8a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a21      	ldr	r2, [pc, #132]	@ (800677c <TIM_Base_SetConfig+0x104>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_Base_SetConfig+0x8a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a20      	ldr	r2, [pc, #128]	@ (8006780 <TIM_Base_SetConfig+0x108>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d108      	bne.n	8006714 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a0c      	ldr	r2, [pc, #48]	@ (8006768 <TIM_Base_SetConfig+0xf0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d103      	bne.n	8006742 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f043 0204 	orr.w	r2, r3, #4
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]
}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40010000 	.word	0x40010000
 800676c:	40000400 	.word	0x40000400
 8006770:	40000800 	.word	0x40000800
 8006774:	40000c00 	.word	0x40000c00
 8006778:	40014000 	.word	0x40014000
 800677c:	40014400 	.word	0x40014400
 8006780:	40014800 	.word	0x40014800

08006784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f023 0201 	bic.w	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0303 	bic.w	r3, r3, #3
 80067ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f023 0302 	bic.w	r3, r3, #2
 80067cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a1c      	ldr	r2, [pc, #112]	@ (800684c <TIM_OC1_SetConfig+0xc8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10c      	bne.n	80067fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f023 0308 	bic.w	r3, r3, #8
 80067e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f023 0304 	bic.w	r3, r3, #4
 80067f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a13      	ldr	r2, [pc, #76]	@ (800684c <TIM_OC1_SetConfig+0xc8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d111      	bne.n	8006826 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	621a      	str	r2, [r3, #32]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	40010000 	.word	0x40010000

08006850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	f023 0210 	bic.w	r2, r3, #16
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f023 0320 	bic.w	r3, r3, #32
 800689a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006924 <TIM_OC2_SetConfig+0xd4>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10d      	bne.n	80068cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a15      	ldr	r2, [pc, #84]	@ (8006924 <TIM_OC2_SetConfig+0xd4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d113      	bne.n	80068fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	621a      	str	r2, [r3, #32]
}
 8006916:	bf00      	nop
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40010000 	.word	0x40010000

08006928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	021b      	lsls	r3, r3, #8
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1d      	ldr	r2, [pc, #116]	@ (80069f8 <TIM_OC3_SetConfig+0xd0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d10d      	bne.n	80069a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800698c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a14      	ldr	r2, [pc, #80]	@ (80069f8 <TIM_OC3_SetConfig+0xd0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d113      	bne.n	80069d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	621a      	str	r2, [r3, #32]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40010000 	.word	0x40010000

080069fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	031b      	lsls	r3, r3, #12
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a10      	ldr	r2, [pc, #64]	@ (8006a98 <TIM_OC4_SetConfig+0x9c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d109      	bne.n	8006a70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	019b      	lsls	r3, r3, #6
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40010000 	.word	0x40010000

08006a9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2201      	movs	r2, #1
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a1a      	ldr	r2, [r3, #32]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	43db      	mvns	r3, r3
 8006abe:	401a      	ands	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a1a      	ldr	r2, [r3, #32]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
	...

08006ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e050      	b.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b4c:	d013      	beq.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a18      	ldr	r2, [pc, #96]	@ (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a16      	ldr	r2, [pc, #88]	@ (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a15      	ldr	r2, [pc, #84]	@ (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a13      	ldr	r2, [pc, #76]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d10c      	bne.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	40010000 	.word	0x40010000
 8006bb4:	40000400 	.word	0x40000400
 8006bb8:	40000800 	.word	0x40000800
 8006bbc:	40000c00 	.word	0x40000c00
 8006bc0:	40014000 	.word	0x40014000

08006bc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e03d      	b.n	8006c5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e042      	b.n	8006d00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fc fe80 	bl	8003994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2224      	movs	r2, #36	@ 0x24
 8006c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f973 	bl	8006f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695a      	ldr	r2, [r3, #20]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08a      	sub	sp, #40	@ 0x28
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	4613      	mov	r3, r2
 8006d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d175      	bne.n	8006e14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <HAL_UART_Transmit+0x2c>
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e06e      	b.n	8006e16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2221      	movs	r2, #33	@ 0x21
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d46:	f7fc fefd 	bl	8003b44 <HAL_GetTick>
 8006d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	88fa      	ldrh	r2, [r7, #6]
 8006d50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	88fa      	ldrh	r2, [r7, #6]
 8006d56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d60:	d108      	bne.n	8006d74 <HAL_UART_Transmit+0x6c>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	61bb      	str	r3, [r7, #24]
 8006d72:	e003      	b.n	8006d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d7c:	e02e      	b.n	8006ddc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2200      	movs	r2, #0
 8006d86:	2180      	movs	r1, #128	@ 0x80
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f848 	bl	8006e1e <UART_WaitOnFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e03a      	b.n	8006e16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	3302      	adds	r3, #2
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e007      	b.n	8006dce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1cb      	bne.n	8006d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2200      	movs	r2, #0
 8006dee:	2140      	movs	r1, #64	@ 0x40
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f814 	bl	8006e1e <UART_WaitOnFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e006      	b.n	8006e16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	e000      	b.n	8006e16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e14:	2302      	movs	r3, #2
  }
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b086      	sub	sp, #24
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	603b      	str	r3, [r7, #0]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e2e:	e03b      	b.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e36:	d037      	beq.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e38:	f7fc fe84 	bl	8003b44 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	6a3a      	ldr	r2, [r7, #32]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d302      	bcc.n	8006e4e <UART_WaitOnFlagUntilTimeout+0x30>
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e03a      	b.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d023      	beq.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b80      	cmp	r3, #128	@ 0x80
 8006e64:	d020      	beq.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b40      	cmp	r3, #64	@ 0x40
 8006e6a:	d01d      	beq.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d116      	bne.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f81d 	bl	8006ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2208      	movs	r2, #8
 8006e9a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e00f      	b.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	bf0c      	ite	eq
 8006eb8:	2301      	moveq	r3, #1
 8006eba:	2300      	movne	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d0b4      	beq.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b095      	sub	sp, #84	@ 0x54
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ef8:	643a      	str	r2, [r7, #64]	@ 0x40
 8006efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006efe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e5      	bne.n	8006ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3314      	adds	r3, #20
 8006f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f023 0301 	bic.w	r3, r3, #1
 8006f22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3314      	adds	r3, #20
 8006f2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e5      	bne.n	8006f0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d119      	bne.n	8006f7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f023 0310 	bic.w	r3, r3, #16
 8006f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	330c      	adds	r3, #12
 8006f66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f68:	61ba      	str	r2, [r7, #24]
 8006f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6979      	ldr	r1, [r7, #20]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	613b      	str	r3, [r7, #16]
   return(result);
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e5      	bne.n	8006f48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f8a:	bf00      	nop
 8006f8c:	3754      	adds	r7, #84	@ 0x54
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
	...

08006f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f9c:	b0c0      	sub	sp, #256	@ 0x100
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb4:	68d9      	ldr	r1, [r3, #12]
 8006fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	ea40 0301 	orr.w	r3, r0, r1
 8006fc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ff0:	f021 010c 	bic.w	r1, r1, #12
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ffe:	430b      	orrs	r3, r1
 8007000:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800700e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007012:	6999      	ldr	r1, [r3, #24]
 8007014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	ea40 0301 	orr.w	r3, r0, r1
 800701e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4b8f      	ldr	r3, [pc, #572]	@ (8007264 <UART_SetConfig+0x2cc>)
 8007028:	429a      	cmp	r2, r3
 800702a:	d005      	beq.n	8007038 <UART_SetConfig+0xa0>
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b8d      	ldr	r3, [pc, #564]	@ (8007268 <UART_SetConfig+0x2d0>)
 8007034:	429a      	cmp	r2, r3
 8007036:	d104      	bne.n	8007042 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007038:	f7ff f948 	bl	80062cc <HAL_RCC_GetPCLK2Freq>
 800703c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007040:	e003      	b.n	800704a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007042:	f7ff f92f 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 8007046:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800704a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007054:	f040 810c 	bne.w	8007270 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800705c:	2200      	movs	r2, #0
 800705e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007062:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007066:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800706a:	4622      	mov	r2, r4
 800706c:	462b      	mov	r3, r5
 800706e:	1891      	adds	r1, r2, r2
 8007070:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007072:	415b      	adcs	r3, r3
 8007074:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007076:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800707a:	4621      	mov	r1, r4
 800707c:	eb12 0801 	adds.w	r8, r2, r1
 8007080:	4629      	mov	r1, r5
 8007082:	eb43 0901 	adc.w	r9, r3, r1
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	f04f 0300 	mov.w	r3, #0
 800708e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800709a:	4690      	mov	r8, r2
 800709c:	4699      	mov	r9, r3
 800709e:	4623      	mov	r3, r4
 80070a0:	eb18 0303 	adds.w	r3, r8, r3
 80070a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070a8:	462b      	mov	r3, r5
 80070aa:	eb49 0303 	adc.w	r3, r9, r3
 80070ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80070c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070c6:	460b      	mov	r3, r1
 80070c8:	18db      	adds	r3, r3, r3
 80070ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80070cc:	4613      	mov	r3, r2
 80070ce:	eb42 0303 	adc.w	r3, r2, r3
 80070d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80070d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80070d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80070dc:	f7f9 fe0c 	bl	8000cf8 <__aeabi_uldivmod>
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4b61      	ldr	r3, [pc, #388]	@ (800726c <UART_SetConfig+0x2d4>)
 80070e6:	fba3 2302 	umull	r2, r3, r3, r2
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	011c      	lsls	r4, r3, #4
 80070ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80070fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007100:	4642      	mov	r2, r8
 8007102:	464b      	mov	r3, r9
 8007104:	1891      	adds	r1, r2, r2
 8007106:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007108:	415b      	adcs	r3, r3
 800710a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800710c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007110:	4641      	mov	r1, r8
 8007112:	eb12 0a01 	adds.w	sl, r2, r1
 8007116:	4649      	mov	r1, r9
 8007118:	eb43 0b01 	adc.w	fp, r3, r1
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007128:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800712c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007130:	4692      	mov	sl, r2
 8007132:	469b      	mov	fp, r3
 8007134:	4643      	mov	r3, r8
 8007136:	eb1a 0303 	adds.w	r3, sl, r3
 800713a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800713e:	464b      	mov	r3, r9
 8007140:	eb4b 0303 	adc.w	r3, fp, r3
 8007144:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007154:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007158:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800715c:	460b      	mov	r3, r1
 800715e:	18db      	adds	r3, r3, r3
 8007160:	643b      	str	r3, [r7, #64]	@ 0x40
 8007162:	4613      	mov	r3, r2
 8007164:	eb42 0303 	adc.w	r3, r2, r3
 8007168:	647b      	str	r3, [r7, #68]	@ 0x44
 800716a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800716e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007172:	f7f9 fdc1 	bl	8000cf8 <__aeabi_uldivmod>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4611      	mov	r1, r2
 800717c:	4b3b      	ldr	r3, [pc, #236]	@ (800726c <UART_SetConfig+0x2d4>)
 800717e:	fba3 2301 	umull	r2, r3, r3, r1
 8007182:	095b      	lsrs	r3, r3, #5
 8007184:	2264      	movs	r2, #100	@ 0x64
 8007186:	fb02 f303 	mul.w	r3, r2, r3
 800718a:	1acb      	subs	r3, r1, r3
 800718c:	00db      	lsls	r3, r3, #3
 800718e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007192:	4b36      	ldr	r3, [pc, #216]	@ (800726c <UART_SetConfig+0x2d4>)
 8007194:	fba3 2302 	umull	r2, r3, r3, r2
 8007198:	095b      	lsrs	r3, r3, #5
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80071a0:	441c      	add	r4, r3
 80071a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80071b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80071b4:	4642      	mov	r2, r8
 80071b6:	464b      	mov	r3, r9
 80071b8:	1891      	adds	r1, r2, r2
 80071ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80071bc:	415b      	adcs	r3, r3
 80071be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80071c4:	4641      	mov	r1, r8
 80071c6:	1851      	adds	r1, r2, r1
 80071c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80071ca:	4649      	mov	r1, r9
 80071cc:	414b      	adcs	r3, r1
 80071ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80071dc:	4659      	mov	r1, fp
 80071de:	00cb      	lsls	r3, r1, #3
 80071e0:	4651      	mov	r1, sl
 80071e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071e6:	4651      	mov	r1, sl
 80071e8:	00ca      	lsls	r2, r1, #3
 80071ea:	4610      	mov	r0, r2
 80071ec:	4619      	mov	r1, r3
 80071ee:	4603      	mov	r3, r0
 80071f0:	4642      	mov	r2, r8
 80071f2:	189b      	adds	r3, r3, r2
 80071f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071f8:	464b      	mov	r3, r9
 80071fa:	460a      	mov	r2, r1
 80071fc:	eb42 0303 	adc.w	r3, r2, r3
 8007200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007210:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007218:	460b      	mov	r3, r1
 800721a:	18db      	adds	r3, r3, r3
 800721c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800721e:	4613      	mov	r3, r2
 8007220:	eb42 0303 	adc.w	r3, r2, r3
 8007224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800722a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800722e:	f7f9 fd63 	bl	8000cf8 <__aeabi_uldivmod>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4b0d      	ldr	r3, [pc, #52]	@ (800726c <UART_SetConfig+0x2d4>)
 8007238:	fba3 1302 	umull	r1, r3, r3, r2
 800723c:	095b      	lsrs	r3, r3, #5
 800723e:	2164      	movs	r1, #100	@ 0x64
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	3332      	adds	r3, #50	@ 0x32
 800724a:	4a08      	ldr	r2, [pc, #32]	@ (800726c <UART_SetConfig+0x2d4>)
 800724c:	fba2 2303 	umull	r2, r3, r2, r3
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	f003 0207 	and.w	r2, r3, #7
 8007256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4422      	add	r2, r4
 800725e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007260:	e106      	b.n	8007470 <UART_SetConfig+0x4d8>
 8007262:	bf00      	nop
 8007264:	40011000 	.word	0x40011000
 8007268:	40011400 	.word	0x40011400
 800726c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007274:	2200      	movs	r2, #0
 8007276:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800727a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800727e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007282:	4642      	mov	r2, r8
 8007284:	464b      	mov	r3, r9
 8007286:	1891      	adds	r1, r2, r2
 8007288:	6239      	str	r1, [r7, #32]
 800728a:	415b      	adcs	r3, r3
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
 800728e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007292:	4641      	mov	r1, r8
 8007294:	1854      	adds	r4, r2, r1
 8007296:	4649      	mov	r1, r9
 8007298:	eb43 0501 	adc.w	r5, r3, r1
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	00eb      	lsls	r3, r5, #3
 80072a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072aa:	00e2      	lsls	r2, r4, #3
 80072ac:	4614      	mov	r4, r2
 80072ae:	461d      	mov	r5, r3
 80072b0:	4643      	mov	r3, r8
 80072b2:	18e3      	adds	r3, r4, r3
 80072b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072b8:	464b      	mov	r3, r9
 80072ba:	eb45 0303 	adc.w	r3, r5, r3
 80072be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80072de:	4629      	mov	r1, r5
 80072e0:	008b      	lsls	r3, r1, #2
 80072e2:	4621      	mov	r1, r4
 80072e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072e8:	4621      	mov	r1, r4
 80072ea:	008a      	lsls	r2, r1, #2
 80072ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80072f0:	f7f9 fd02 	bl	8000cf8 <__aeabi_uldivmod>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4b60      	ldr	r3, [pc, #384]	@ (800747c <UART_SetConfig+0x4e4>)
 80072fa:	fba3 2302 	umull	r2, r3, r3, r2
 80072fe:	095b      	lsrs	r3, r3, #5
 8007300:	011c      	lsls	r4, r3, #4
 8007302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007306:	2200      	movs	r2, #0
 8007308:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800730c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007310:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007314:	4642      	mov	r2, r8
 8007316:	464b      	mov	r3, r9
 8007318:	1891      	adds	r1, r2, r2
 800731a:	61b9      	str	r1, [r7, #24]
 800731c:	415b      	adcs	r3, r3
 800731e:	61fb      	str	r3, [r7, #28]
 8007320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007324:	4641      	mov	r1, r8
 8007326:	1851      	adds	r1, r2, r1
 8007328:	6139      	str	r1, [r7, #16]
 800732a:	4649      	mov	r1, r9
 800732c:	414b      	adcs	r3, r1
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800733c:	4659      	mov	r1, fp
 800733e:	00cb      	lsls	r3, r1, #3
 8007340:	4651      	mov	r1, sl
 8007342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007346:	4651      	mov	r1, sl
 8007348:	00ca      	lsls	r2, r1, #3
 800734a:	4610      	mov	r0, r2
 800734c:	4619      	mov	r1, r3
 800734e:	4603      	mov	r3, r0
 8007350:	4642      	mov	r2, r8
 8007352:	189b      	adds	r3, r3, r2
 8007354:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007358:	464b      	mov	r3, r9
 800735a:	460a      	mov	r2, r1
 800735c:	eb42 0303 	adc.w	r3, r2, r3
 8007360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800736e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007370:	f04f 0200 	mov.w	r2, #0
 8007374:	f04f 0300 	mov.w	r3, #0
 8007378:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800737c:	4649      	mov	r1, r9
 800737e:	008b      	lsls	r3, r1, #2
 8007380:	4641      	mov	r1, r8
 8007382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007386:	4641      	mov	r1, r8
 8007388:	008a      	lsls	r2, r1, #2
 800738a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800738e:	f7f9 fcb3 	bl	8000cf8 <__aeabi_uldivmod>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4611      	mov	r1, r2
 8007398:	4b38      	ldr	r3, [pc, #224]	@ (800747c <UART_SetConfig+0x4e4>)
 800739a:	fba3 2301 	umull	r2, r3, r3, r1
 800739e:	095b      	lsrs	r3, r3, #5
 80073a0:	2264      	movs	r2, #100	@ 0x64
 80073a2:	fb02 f303 	mul.w	r3, r2, r3
 80073a6:	1acb      	subs	r3, r1, r3
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	3332      	adds	r3, #50	@ 0x32
 80073ac:	4a33      	ldr	r2, [pc, #204]	@ (800747c <UART_SetConfig+0x4e4>)
 80073ae:	fba2 2303 	umull	r2, r3, r2, r3
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073b8:	441c      	add	r4, r3
 80073ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073be:	2200      	movs	r2, #0
 80073c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80073c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80073c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80073c8:	4642      	mov	r2, r8
 80073ca:	464b      	mov	r3, r9
 80073cc:	1891      	adds	r1, r2, r2
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	415b      	adcs	r3, r3
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073d8:	4641      	mov	r1, r8
 80073da:	1851      	adds	r1, r2, r1
 80073dc:	6039      	str	r1, [r7, #0]
 80073de:	4649      	mov	r1, r9
 80073e0:	414b      	adcs	r3, r1
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073f0:	4659      	mov	r1, fp
 80073f2:	00cb      	lsls	r3, r1, #3
 80073f4:	4651      	mov	r1, sl
 80073f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073fa:	4651      	mov	r1, sl
 80073fc:	00ca      	lsls	r2, r1, #3
 80073fe:	4610      	mov	r0, r2
 8007400:	4619      	mov	r1, r3
 8007402:	4603      	mov	r3, r0
 8007404:	4642      	mov	r2, r8
 8007406:	189b      	adds	r3, r3, r2
 8007408:	66bb      	str	r3, [r7, #104]	@ 0x68
 800740a:	464b      	mov	r3, r9
 800740c:	460a      	mov	r2, r1
 800740e:	eb42 0303 	adc.w	r3, r2, r3
 8007412:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	663b      	str	r3, [r7, #96]	@ 0x60
 800741e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007420:	f04f 0200 	mov.w	r2, #0
 8007424:	f04f 0300 	mov.w	r3, #0
 8007428:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800742c:	4649      	mov	r1, r9
 800742e:	008b      	lsls	r3, r1, #2
 8007430:	4641      	mov	r1, r8
 8007432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007436:	4641      	mov	r1, r8
 8007438:	008a      	lsls	r2, r1, #2
 800743a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800743e:	f7f9 fc5b 	bl	8000cf8 <__aeabi_uldivmod>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4b0d      	ldr	r3, [pc, #52]	@ (800747c <UART_SetConfig+0x4e4>)
 8007448:	fba3 1302 	umull	r1, r3, r3, r2
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	2164      	movs	r1, #100	@ 0x64
 8007450:	fb01 f303 	mul.w	r3, r1, r3
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	3332      	adds	r3, #50	@ 0x32
 800745a:	4a08      	ldr	r2, [pc, #32]	@ (800747c <UART_SetConfig+0x4e4>)
 800745c:	fba2 2303 	umull	r2, r3, r2, r3
 8007460:	095b      	lsrs	r3, r3, #5
 8007462:	f003 020f 	and.w	r2, r3, #15
 8007466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4422      	add	r2, r4
 800746e:	609a      	str	r2, [r3, #8]
}
 8007470:	bf00      	nop
 8007472:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007476:	46bd      	mov	sp, r7
 8007478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800747c:	51eb851f 	.word	0x51eb851f

08007480 <__cvt>:
 8007480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007484:	ec57 6b10 	vmov	r6, r7, d0
 8007488:	2f00      	cmp	r7, #0
 800748a:	460c      	mov	r4, r1
 800748c:	4619      	mov	r1, r3
 800748e:	463b      	mov	r3, r7
 8007490:	bfbb      	ittet	lt
 8007492:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007496:	461f      	movlt	r7, r3
 8007498:	2300      	movge	r3, #0
 800749a:	232d      	movlt	r3, #45	@ 0x2d
 800749c:	700b      	strb	r3, [r1, #0]
 800749e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80074a4:	4691      	mov	r9, r2
 80074a6:	f023 0820 	bic.w	r8, r3, #32
 80074aa:	bfbc      	itt	lt
 80074ac:	4632      	movlt	r2, r6
 80074ae:	4616      	movlt	r6, r2
 80074b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074b4:	d005      	beq.n	80074c2 <__cvt+0x42>
 80074b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074ba:	d100      	bne.n	80074be <__cvt+0x3e>
 80074bc:	3401      	adds	r4, #1
 80074be:	2102      	movs	r1, #2
 80074c0:	e000      	b.n	80074c4 <__cvt+0x44>
 80074c2:	2103      	movs	r1, #3
 80074c4:	ab03      	add	r3, sp, #12
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	ab02      	add	r3, sp, #8
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	ec47 6b10 	vmov	d0, r6, r7
 80074d0:	4653      	mov	r3, sl
 80074d2:	4622      	mov	r2, r4
 80074d4:	f000 fe7c 	bl	80081d0 <_dtoa_r>
 80074d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80074dc:	4605      	mov	r5, r0
 80074de:	d119      	bne.n	8007514 <__cvt+0x94>
 80074e0:	f019 0f01 	tst.w	r9, #1
 80074e4:	d00e      	beq.n	8007504 <__cvt+0x84>
 80074e6:	eb00 0904 	add.w	r9, r0, r4
 80074ea:	2200      	movs	r2, #0
 80074ec:	2300      	movs	r3, #0
 80074ee:	4630      	mov	r0, r6
 80074f0:	4639      	mov	r1, r7
 80074f2:	f7f9 faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80074f6:	b108      	cbz	r0, 80074fc <__cvt+0x7c>
 80074f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80074fc:	2230      	movs	r2, #48	@ 0x30
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	454b      	cmp	r3, r9
 8007502:	d31e      	bcc.n	8007542 <__cvt+0xc2>
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007508:	1b5b      	subs	r3, r3, r5
 800750a:	4628      	mov	r0, r5
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	b004      	add	sp, #16
 8007510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007514:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007518:	eb00 0904 	add.w	r9, r0, r4
 800751c:	d1e5      	bne.n	80074ea <__cvt+0x6a>
 800751e:	7803      	ldrb	r3, [r0, #0]
 8007520:	2b30      	cmp	r3, #48	@ 0x30
 8007522:	d10a      	bne.n	800753a <__cvt+0xba>
 8007524:	2200      	movs	r2, #0
 8007526:	2300      	movs	r3, #0
 8007528:	4630      	mov	r0, r6
 800752a:	4639      	mov	r1, r7
 800752c:	f7f9 fad4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007530:	b918      	cbnz	r0, 800753a <__cvt+0xba>
 8007532:	f1c4 0401 	rsb	r4, r4, #1
 8007536:	f8ca 4000 	str.w	r4, [sl]
 800753a:	f8da 3000 	ldr.w	r3, [sl]
 800753e:	4499      	add	r9, r3
 8007540:	e7d3      	b.n	80074ea <__cvt+0x6a>
 8007542:	1c59      	adds	r1, r3, #1
 8007544:	9103      	str	r1, [sp, #12]
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	e7d9      	b.n	80074fe <__cvt+0x7e>

0800754a <__exponent>:
 800754a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800754c:	2900      	cmp	r1, #0
 800754e:	bfba      	itte	lt
 8007550:	4249      	neglt	r1, r1
 8007552:	232d      	movlt	r3, #45	@ 0x2d
 8007554:	232b      	movge	r3, #43	@ 0x2b
 8007556:	2909      	cmp	r1, #9
 8007558:	7002      	strb	r2, [r0, #0]
 800755a:	7043      	strb	r3, [r0, #1]
 800755c:	dd29      	ble.n	80075b2 <__exponent+0x68>
 800755e:	f10d 0307 	add.w	r3, sp, #7
 8007562:	461d      	mov	r5, r3
 8007564:	270a      	movs	r7, #10
 8007566:	461a      	mov	r2, r3
 8007568:	fbb1 f6f7 	udiv	r6, r1, r7
 800756c:	fb07 1416 	mls	r4, r7, r6, r1
 8007570:	3430      	adds	r4, #48	@ 0x30
 8007572:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007576:	460c      	mov	r4, r1
 8007578:	2c63      	cmp	r4, #99	@ 0x63
 800757a:	f103 33ff 	add.w	r3, r3, #4294967295
 800757e:	4631      	mov	r1, r6
 8007580:	dcf1      	bgt.n	8007566 <__exponent+0x1c>
 8007582:	3130      	adds	r1, #48	@ 0x30
 8007584:	1e94      	subs	r4, r2, #2
 8007586:	f803 1c01 	strb.w	r1, [r3, #-1]
 800758a:	1c41      	adds	r1, r0, #1
 800758c:	4623      	mov	r3, r4
 800758e:	42ab      	cmp	r3, r5
 8007590:	d30a      	bcc.n	80075a8 <__exponent+0x5e>
 8007592:	f10d 0309 	add.w	r3, sp, #9
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	42ac      	cmp	r4, r5
 800759a:	bf88      	it	hi
 800759c:	2300      	movhi	r3, #0
 800759e:	3302      	adds	r3, #2
 80075a0:	4403      	add	r3, r0
 80075a2:	1a18      	subs	r0, r3, r0
 80075a4:	b003      	add	sp, #12
 80075a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075b0:	e7ed      	b.n	800758e <__exponent+0x44>
 80075b2:	2330      	movs	r3, #48	@ 0x30
 80075b4:	3130      	adds	r1, #48	@ 0x30
 80075b6:	7083      	strb	r3, [r0, #2]
 80075b8:	70c1      	strb	r1, [r0, #3]
 80075ba:	1d03      	adds	r3, r0, #4
 80075bc:	e7f1      	b.n	80075a2 <__exponent+0x58>
	...

080075c0 <_printf_float>:
 80075c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	b08d      	sub	sp, #52	@ 0x34
 80075c6:	460c      	mov	r4, r1
 80075c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075cc:	4616      	mov	r6, r2
 80075ce:	461f      	mov	r7, r3
 80075d0:	4605      	mov	r5, r0
 80075d2:	f000 fced 	bl	8007fb0 <_localeconv_r>
 80075d6:	6803      	ldr	r3, [r0, #0]
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7f8 fe50 	bl	8000280 <strlen>
 80075e0:	2300      	movs	r3, #0
 80075e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e4:	f8d8 3000 	ldr.w	r3, [r8]
 80075e8:	9005      	str	r0, [sp, #20]
 80075ea:	3307      	adds	r3, #7
 80075ec:	f023 0307 	bic.w	r3, r3, #7
 80075f0:	f103 0208 	add.w	r2, r3, #8
 80075f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80075f8:	f8d4 b000 	ldr.w	fp, [r4]
 80075fc:	f8c8 2000 	str.w	r2, [r8]
 8007600:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007604:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007608:	9307      	str	r3, [sp, #28]
 800760a:	f8cd 8018 	str.w	r8, [sp, #24]
 800760e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007616:	4b9c      	ldr	r3, [pc, #624]	@ (8007888 <_printf_float+0x2c8>)
 8007618:	f04f 32ff 	mov.w	r2, #4294967295
 800761c:	f7f9 fa8e 	bl	8000b3c <__aeabi_dcmpun>
 8007620:	bb70      	cbnz	r0, 8007680 <_printf_float+0xc0>
 8007622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007626:	4b98      	ldr	r3, [pc, #608]	@ (8007888 <_printf_float+0x2c8>)
 8007628:	f04f 32ff 	mov.w	r2, #4294967295
 800762c:	f7f9 fa68 	bl	8000b00 <__aeabi_dcmple>
 8007630:	bb30      	cbnz	r0, 8007680 <_printf_float+0xc0>
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	4640      	mov	r0, r8
 8007638:	4649      	mov	r1, r9
 800763a:	f7f9 fa57 	bl	8000aec <__aeabi_dcmplt>
 800763e:	b110      	cbz	r0, 8007646 <_printf_float+0x86>
 8007640:	232d      	movs	r3, #45	@ 0x2d
 8007642:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007646:	4a91      	ldr	r2, [pc, #580]	@ (800788c <_printf_float+0x2cc>)
 8007648:	4b91      	ldr	r3, [pc, #580]	@ (8007890 <_printf_float+0x2d0>)
 800764a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800764e:	bf8c      	ite	hi
 8007650:	4690      	movhi	r8, r2
 8007652:	4698      	movls	r8, r3
 8007654:	2303      	movs	r3, #3
 8007656:	6123      	str	r3, [r4, #16]
 8007658:	f02b 0304 	bic.w	r3, fp, #4
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	f04f 0900 	mov.w	r9, #0
 8007662:	9700      	str	r7, [sp, #0]
 8007664:	4633      	mov	r3, r6
 8007666:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007668:	4621      	mov	r1, r4
 800766a:	4628      	mov	r0, r5
 800766c:	f000 f9d2 	bl	8007a14 <_printf_common>
 8007670:	3001      	adds	r0, #1
 8007672:	f040 808d 	bne.w	8007790 <_printf_float+0x1d0>
 8007676:	f04f 30ff 	mov.w	r0, #4294967295
 800767a:	b00d      	add	sp, #52	@ 0x34
 800767c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007680:	4642      	mov	r2, r8
 8007682:	464b      	mov	r3, r9
 8007684:	4640      	mov	r0, r8
 8007686:	4649      	mov	r1, r9
 8007688:	f7f9 fa58 	bl	8000b3c <__aeabi_dcmpun>
 800768c:	b140      	cbz	r0, 80076a0 <_printf_float+0xe0>
 800768e:	464b      	mov	r3, r9
 8007690:	2b00      	cmp	r3, #0
 8007692:	bfbc      	itt	lt
 8007694:	232d      	movlt	r3, #45	@ 0x2d
 8007696:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800769a:	4a7e      	ldr	r2, [pc, #504]	@ (8007894 <_printf_float+0x2d4>)
 800769c:	4b7e      	ldr	r3, [pc, #504]	@ (8007898 <_printf_float+0x2d8>)
 800769e:	e7d4      	b.n	800764a <_printf_float+0x8a>
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80076a6:	9206      	str	r2, [sp, #24]
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	d13b      	bne.n	8007724 <_printf_float+0x164>
 80076ac:	2306      	movs	r3, #6
 80076ae:	6063      	str	r3, [r4, #4]
 80076b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80076b4:	2300      	movs	r3, #0
 80076b6:	6022      	str	r2, [r4, #0]
 80076b8:	9303      	str	r3, [sp, #12]
 80076ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80076bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80076c0:	ab09      	add	r3, sp, #36	@ 0x24
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	6861      	ldr	r1, [r4, #4]
 80076c6:	ec49 8b10 	vmov	d0, r8, r9
 80076ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076ce:	4628      	mov	r0, r5
 80076d0:	f7ff fed6 	bl	8007480 <__cvt>
 80076d4:	9b06      	ldr	r3, [sp, #24]
 80076d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076d8:	2b47      	cmp	r3, #71	@ 0x47
 80076da:	4680      	mov	r8, r0
 80076dc:	d129      	bne.n	8007732 <_printf_float+0x172>
 80076de:	1cc8      	adds	r0, r1, #3
 80076e0:	db02      	blt.n	80076e8 <_printf_float+0x128>
 80076e2:	6863      	ldr	r3, [r4, #4]
 80076e4:	4299      	cmp	r1, r3
 80076e6:	dd41      	ble.n	800776c <_printf_float+0x1ac>
 80076e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80076ec:	fa5f fa8a 	uxtb.w	sl, sl
 80076f0:	3901      	subs	r1, #1
 80076f2:	4652      	mov	r2, sl
 80076f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80076f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80076fa:	f7ff ff26 	bl	800754a <__exponent>
 80076fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007700:	1813      	adds	r3, r2, r0
 8007702:	2a01      	cmp	r2, #1
 8007704:	4681      	mov	r9, r0
 8007706:	6123      	str	r3, [r4, #16]
 8007708:	dc02      	bgt.n	8007710 <_printf_float+0x150>
 800770a:	6822      	ldr	r2, [r4, #0]
 800770c:	07d2      	lsls	r2, r2, #31
 800770e:	d501      	bpl.n	8007714 <_printf_float+0x154>
 8007710:	3301      	adds	r3, #1
 8007712:	6123      	str	r3, [r4, #16]
 8007714:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0a2      	beq.n	8007662 <_printf_float+0xa2>
 800771c:	232d      	movs	r3, #45	@ 0x2d
 800771e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007722:	e79e      	b.n	8007662 <_printf_float+0xa2>
 8007724:	9a06      	ldr	r2, [sp, #24]
 8007726:	2a47      	cmp	r2, #71	@ 0x47
 8007728:	d1c2      	bne.n	80076b0 <_printf_float+0xf0>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1c0      	bne.n	80076b0 <_printf_float+0xf0>
 800772e:	2301      	movs	r3, #1
 8007730:	e7bd      	b.n	80076ae <_printf_float+0xee>
 8007732:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007736:	d9db      	bls.n	80076f0 <_printf_float+0x130>
 8007738:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800773c:	d118      	bne.n	8007770 <_printf_float+0x1b0>
 800773e:	2900      	cmp	r1, #0
 8007740:	6863      	ldr	r3, [r4, #4]
 8007742:	dd0b      	ble.n	800775c <_printf_float+0x19c>
 8007744:	6121      	str	r1, [r4, #16]
 8007746:	b913      	cbnz	r3, 800774e <_printf_float+0x18e>
 8007748:	6822      	ldr	r2, [r4, #0]
 800774a:	07d0      	lsls	r0, r2, #31
 800774c:	d502      	bpl.n	8007754 <_printf_float+0x194>
 800774e:	3301      	adds	r3, #1
 8007750:	440b      	add	r3, r1
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007756:	f04f 0900 	mov.w	r9, #0
 800775a:	e7db      	b.n	8007714 <_printf_float+0x154>
 800775c:	b913      	cbnz	r3, 8007764 <_printf_float+0x1a4>
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	07d2      	lsls	r2, r2, #31
 8007762:	d501      	bpl.n	8007768 <_printf_float+0x1a8>
 8007764:	3302      	adds	r3, #2
 8007766:	e7f4      	b.n	8007752 <_printf_float+0x192>
 8007768:	2301      	movs	r3, #1
 800776a:	e7f2      	b.n	8007752 <_printf_float+0x192>
 800776c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007772:	4299      	cmp	r1, r3
 8007774:	db05      	blt.n	8007782 <_printf_float+0x1c2>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	6121      	str	r1, [r4, #16]
 800777a:	07d8      	lsls	r0, r3, #31
 800777c:	d5ea      	bpl.n	8007754 <_printf_float+0x194>
 800777e:	1c4b      	adds	r3, r1, #1
 8007780:	e7e7      	b.n	8007752 <_printf_float+0x192>
 8007782:	2900      	cmp	r1, #0
 8007784:	bfd4      	ite	le
 8007786:	f1c1 0202 	rsble	r2, r1, #2
 800778a:	2201      	movgt	r2, #1
 800778c:	4413      	add	r3, r2
 800778e:	e7e0      	b.n	8007752 <_printf_float+0x192>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	055a      	lsls	r2, r3, #21
 8007794:	d407      	bmi.n	80077a6 <_printf_float+0x1e6>
 8007796:	6923      	ldr	r3, [r4, #16]
 8007798:	4642      	mov	r2, r8
 800779a:	4631      	mov	r1, r6
 800779c:	4628      	mov	r0, r5
 800779e:	47b8      	blx	r7
 80077a0:	3001      	adds	r0, #1
 80077a2:	d12b      	bne.n	80077fc <_printf_float+0x23c>
 80077a4:	e767      	b.n	8007676 <_printf_float+0xb6>
 80077a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077aa:	f240 80dd 	bls.w	8007968 <_printf_float+0x3a8>
 80077ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077b2:	2200      	movs	r2, #0
 80077b4:	2300      	movs	r3, #0
 80077b6:	f7f9 f98f 	bl	8000ad8 <__aeabi_dcmpeq>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d033      	beq.n	8007826 <_printf_float+0x266>
 80077be:	4a37      	ldr	r2, [pc, #220]	@ (800789c <_printf_float+0x2dc>)
 80077c0:	2301      	movs	r3, #1
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	f43f af54 	beq.w	8007676 <_printf_float+0xb6>
 80077ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80077d2:	4543      	cmp	r3, r8
 80077d4:	db02      	blt.n	80077dc <_printf_float+0x21c>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	07d8      	lsls	r0, r3, #31
 80077da:	d50f      	bpl.n	80077fc <_printf_float+0x23c>
 80077dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	f43f af45 	beq.w	8007676 <_printf_float+0xb6>
 80077ec:	f04f 0900 	mov.w	r9, #0
 80077f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80077f4:	f104 0a1a 	add.w	sl, r4, #26
 80077f8:	45c8      	cmp	r8, r9
 80077fa:	dc09      	bgt.n	8007810 <_printf_float+0x250>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	079b      	lsls	r3, r3, #30
 8007800:	f100 8103 	bmi.w	8007a0a <_printf_float+0x44a>
 8007804:	68e0      	ldr	r0, [r4, #12]
 8007806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007808:	4298      	cmp	r0, r3
 800780a:	bfb8      	it	lt
 800780c:	4618      	movlt	r0, r3
 800780e:	e734      	b.n	800767a <_printf_float+0xba>
 8007810:	2301      	movs	r3, #1
 8007812:	4652      	mov	r2, sl
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	f43f af2b 	beq.w	8007676 <_printf_float+0xb6>
 8007820:	f109 0901 	add.w	r9, r9, #1
 8007824:	e7e8      	b.n	80077f8 <_printf_float+0x238>
 8007826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	dc39      	bgt.n	80078a0 <_printf_float+0x2e0>
 800782c:	4a1b      	ldr	r2, [pc, #108]	@ (800789c <_printf_float+0x2dc>)
 800782e:	2301      	movs	r3, #1
 8007830:	4631      	mov	r1, r6
 8007832:	4628      	mov	r0, r5
 8007834:	47b8      	blx	r7
 8007836:	3001      	adds	r0, #1
 8007838:	f43f af1d 	beq.w	8007676 <_printf_float+0xb6>
 800783c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007840:	ea59 0303 	orrs.w	r3, r9, r3
 8007844:	d102      	bne.n	800784c <_printf_float+0x28c>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	07d9      	lsls	r1, r3, #31
 800784a:	d5d7      	bpl.n	80077fc <_printf_float+0x23c>
 800784c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	f43f af0d 	beq.w	8007676 <_printf_float+0xb6>
 800785c:	f04f 0a00 	mov.w	sl, #0
 8007860:	f104 0b1a 	add.w	fp, r4, #26
 8007864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007866:	425b      	negs	r3, r3
 8007868:	4553      	cmp	r3, sl
 800786a:	dc01      	bgt.n	8007870 <_printf_float+0x2b0>
 800786c:	464b      	mov	r3, r9
 800786e:	e793      	b.n	8007798 <_printf_float+0x1d8>
 8007870:	2301      	movs	r3, #1
 8007872:	465a      	mov	r2, fp
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f aefb 	beq.w	8007676 <_printf_float+0xb6>
 8007880:	f10a 0a01 	add.w	sl, sl, #1
 8007884:	e7ee      	b.n	8007864 <_printf_float+0x2a4>
 8007886:	bf00      	nop
 8007888:	7fefffff 	.word	0x7fefffff
 800788c:	0800baf0 	.word	0x0800baf0
 8007890:	0800baec 	.word	0x0800baec
 8007894:	0800baf8 	.word	0x0800baf8
 8007898:	0800baf4 	.word	0x0800baf4
 800789c:	0800bafc 	.word	0x0800bafc
 80078a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078a6:	4553      	cmp	r3, sl
 80078a8:	bfa8      	it	ge
 80078aa:	4653      	movge	r3, sl
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	4699      	mov	r9, r3
 80078b0:	dc36      	bgt.n	8007920 <_printf_float+0x360>
 80078b2:	f04f 0b00 	mov.w	fp, #0
 80078b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ba:	f104 021a 	add.w	r2, r4, #26
 80078be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078c0:	9306      	str	r3, [sp, #24]
 80078c2:	eba3 0309 	sub.w	r3, r3, r9
 80078c6:	455b      	cmp	r3, fp
 80078c8:	dc31      	bgt.n	800792e <_printf_float+0x36e>
 80078ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078cc:	459a      	cmp	sl, r3
 80078ce:	dc3a      	bgt.n	8007946 <_printf_float+0x386>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	07da      	lsls	r2, r3, #31
 80078d4:	d437      	bmi.n	8007946 <_printf_float+0x386>
 80078d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d8:	ebaa 0903 	sub.w	r9, sl, r3
 80078dc:	9b06      	ldr	r3, [sp, #24]
 80078de:	ebaa 0303 	sub.w	r3, sl, r3
 80078e2:	4599      	cmp	r9, r3
 80078e4:	bfa8      	it	ge
 80078e6:	4699      	movge	r9, r3
 80078e8:	f1b9 0f00 	cmp.w	r9, #0
 80078ec:	dc33      	bgt.n	8007956 <_printf_float+0x396>
 80078ee:	f04f 0800 	mov.w	r8, #0
 80078f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f6:	f104 0b1a 	add.w	fp, r4, #26
 80078fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fc:	ebaa 0303 	sub.w	r3, sl, r3
 8007900:	eba3 0309 	sub.w	r3, r3, r9
 8007904:	4543      	cmp	r3, r8
 8007906:	f77f af79 	ble.w	80077fc <_printf_float+0x23c>
 800790a:	2301      	movs	r3, #1
 800790c:	465a      	mov	r2, fp
 800790e:	4631      	mov	r1, r6
 8007910:	4628      	mov	r0, r5
 8007912:	47b8      	blx	r7
 8007914:	3001      	adds	r0, #1
 8007916:	f43f aeae 	beq.w	8007676 <_printf_float+0xb6>
 800791a:	f108 0801 	add.w	r8, r8, #1
 800791e:	e7ec      	b.n	80078fa <_printf_float+0x33a>
 8007920:	4642      	mov	r2, r8
 8007922:	4631      	mov	r1, r6
 8007924:	4628      	mov	r0, r5
 8007926:	47b8      	blx	r7
 8007928:	3001      	adds	r0, #1
 800792a:	d1c2      	bne.n	80078b2 <_printf_float+0x2f2>
 800792c:	e6a3      	b.n	8007676 <_printf_float+0xb6>
 800792e:	2301      	movs	r3, #1
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	9206      	str	r2, [sp, #24]
 8007936:	47b8      	blx	r7
 8007938:	3001      	adds	r0, #1
 800793a:	f43f ae9c 	beq.w	8007676 <_printf_float+0xb6>
 800793e:	9a06      	ldr	r2, [sp, #24]
 8007940:	f10b 0b01 	add.w	fp, fp, #1
 8007944:	e7bb      	b.n	80078be <_printf_float+0x2fe>
 8007946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	d1c0      	bne.n	80078d6 <_printf_float+0x316>
 8007954:	e68f      	b.n	8007676 <_printf_float+0xb6>
 8007956:	9a06      	ldr	r2, [sp, #24]
 8007958:	464b      	mov	r3, r9
 800795a:	4442      	add	r2, r8
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	d1c3      	bne.n	80078ee <_printf_float+0x32e>
 8007966:	e686      	b.n	8007676 <_printf_float+0xb6>
 8007968:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800796c:	f1ba 0f01 	cmp.w	sl, #1
 8007970:	dc01      	bgt.n	8007976 <_printf_float+0x3b6>
 8007972:	07db      	lsls	r3, r3, #31
 8007974:	d536      	bpl.n	80079e4 <_printf_float+0x424>
 8007976:	2301      	movs	r3, #1
 8007978:	4642      	mov	r2, r8
 800797a:	4631      	mov	r1, r6
 800797c:	4628      	mov	r0, r5
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	f43f ae78 	beq.w	8007676 <_printf_float+0xb6>
 8007986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	f43f ae70 	beq.w	8007676 <_printf_float+0xb6>
 8007996:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800799a:	2200      	movs	r2, #0
 800799c:	2300      	movs	r3, #0
 800799e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079a2:	f7f9 f899 	bl	8000ad8 <__aeabi_dcmpeq>
 80079a6:	b9c0      	cbnz	r0, 80079da <_printf_float+0x41a>
 80079a8:	4653      	mov	r3, sl
 80079aa:	f108 0201 	add.w	r2, r8, #1
 80079ae:	4631      	mov	r1, r6
 80079b0:	4628      	mov	r0, r5
 80079b2:	47b8      	blx	r7
 80079b4:	3001      	adds	r0, #1
 80079b6:	d10c      	bne.n	80079d2 <_printf_float+0x412>
 80079b8:	e65d      	b.n	8007676 <_printf_float+0xb6>
 80079ba:	2301      	movs	r3, #1
 80079bc:	465a      	mov	r2, fp
 80079be:	4631      	mov	r1, r6
 80079c0:	4628      	mov	r0, r5
 80079c2:	47b8      	blx	r7
 80079c4:	3001      	adds	r0, #1
 80079c6:	f43f ae56 	beq.w	8007676 <_printf_float+0xb6>
 80079ca:	f108 0801 	add.w	r8, r8, #1
 80079ce:	45d0      	cmp	r8, sl
 80079d0:	dbf3      	blt.n	80079ba <_printf_float+0x3fa>
 80079d2:	464b      	mov	r3, r9
 80079d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079d8:	e6df      	b.n	800779a <_printf_float+0x1da>
 80079da:	f04f 0800 	mov.w	r8, #0
 80079de:	f104 0b1a 	add.w	fp, r4, #26
 80079e2:	e7f4      	b.n	80079ce <_printf_float+0x40e>
 80079e4:	2301      	movs	r3, #1
 80079e6:	4642      	mov	r2, r8
 80079e8:	e7e1      	b.n	80079ae <_printf_float+0x3ee>
 80079ea:	2301      	movs	r3, #1
 80079ec:	464a      	mov	r2, r9
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f ae3e 	beq.w	8007676 <_printf_float+0xb6>
 80079fa:	f108 0801 	add.w	r8, r8, #1
 80079fe:	68e3      	ldr	r3, [r4, #12]
 8007a00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a02:	1a5b      	subs	r3, r3, r1
 8007a04:	4543      	cmp	r3, r8
 8007a06:	dcf0      	bgt.n	80079ea <_printf_float+0x42a>
 8007a08:	e6fc      	b.n	8007804 <_printf_float+0x244>
 8007a0a:	f04f 0800 	mov.w	r8, #0
 8007a0e:	f104 0919 	add.w	r9, r4, #25
 8007a12:	e7f4      	b.n	80079fe <_printf_float+0x43e>

08007a14 <_printf_common>:
 8007a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a18:	4616      	mov	r6, r2
 8007a1a:	4698      	mov	r8, r3
 8007a1c:	688a      	ldr	r2, [r1, #8]
 8007a1e:	690b      	ldr	r3, [r1, #16]
 8007a20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a24:	4293      	cmp	r3, r2
 8007a26:	bfb8      	it	lt
 8007a28:	4613      	movlt	r3, r2
 8007a2a:	6033      	str	r3, [r6, #0]
 8007a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a30:	4607      	mov	r7, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	b10a      	cbz	r2, 8007a3a <_printf_common+0x26>
 8007a36:	3301      	adds	r3, #1
 8007a38:	6033      	str	r3, [r6, #0]
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	0699      	lsls	r1, r3, #26
 8007a3e:	bf42      	ittt	mi
 8007a40:	6833      	ldrmi	r3, [r6, #0]
 8007a42:	3302      	addmi	r3, #2
 8007a44:	6033      	strmi	r3, [r6, #0]
 8007a46:	6825      	ldr	r5, [r4, #0]
 8007a48:	f015 0506 	ands.w	r5, r5, #6
 8007a4c:	d106      	bne.n	8007a5c <_printf_common+0x48>
 8007a4e:	f104 0a19 	add.w	sl, r4, #25
 8007a52:	68e3      	ldr	r3, [r4, #12]
 8007a54:	6832      	ldr	r2, [r6, #0]
 8007a56:	1a9b      	subs	r3, r3, r2
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	dc26      	bgt.n	8007aaa <_printf_common+0x96>
 8007a5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a60:	6822      	ldr	r2, [r4, #0]
 8007a62:	3b00      	subs	r3, #0
 8007a64:	bf18      	it	ne
 8007a66:	2301      	movne	r3, #1
 8007a68:	0692      	lsls	r2, r2, #26
 8007a6a:	d42b      	bmi.n	8007ac4 <_printf_common+0xb0>
 8007a6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a70:	4641      	mov	r1, r8
 8007a72:	4638      	mov	r0, r7
 8007a74:	47c8      	blx	r9
 8007a76:	3001      	adds	r0, #1
 8007a78:	d01e      	beq.n	8007ab8 <_printf_common+0xa4>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	6922      	ldr	r2, [r4, #16]
 8007a7e:	f003 0306 	and.w	r3, r3, #6
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	bf02      	ittt	eq
 8007a86:	68e5      	ldreq	r5, [r4, #12]
 8007a88:	6833      	ldreq	r3, [r6, #0]
 8007a8a:	1aed      	subeq	r5, r5, r3
 8007a8c:	68a3      	ldr	r3, [r4, #8]
 8007a8e:	bf0c      	ite	eq
 8007a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a94:	2500      	movne	r5, #0
 8007a96:	4293      	cmp	r3, r2
 8007a98:	bfc4      	itt	gt
 8007a9a:	1a9b      	subgt	r3, r3, r2
 8007a9c:	18ed      	addgt	r5, r5, r3
 8007a9e:	2600      	movs	r6, #0
 8007aa0:	341a      	adds	r4, #26
 8007aa2:	42b5      	cmp	r5, r6
 8007aa4:	d11a      	bne.n	8007adc <_printf_common+0xc8>
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	e008      	b.n	8007abc <_printf_common+0xa8>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4652      	mov	r2, sl
 8007aae:	4641      	mov	r1, r8
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	47c8      	blx	r9
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d103      	bne.n	8007ac0 <_printf_common+0xac>
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac0:	3501      	adds	r5, #1
 8007ac2:	e7c6      	b.n	8007a52 <_printf_common+0x3e>
 8007ac4:	18e1      	adds	r1, r4, r3
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	2030      	movs	r0, #48	@ 0x30
 8007aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ace:	4422      	add	r2, r4
 8007ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ad4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ad8:	3302      	adds	r3, #2
 8007ada:	e7c7      	b.n	8007a6c <_printf_common+0x58>
 8007adc:	2301      	movs	r3, #1
 8007ade:	4622      	mov	r2, r4
 8007ae0:	4641      	mov	r1, r8
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	47c8      	blx	r9
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d0e6      	beq.n	8007ab8 <_printf_common+0xa4>
 8007aea:	3601      	adds	r6, #1
 8007aec:	e7d9      	b.n	8007aa2 <_printf_common+0x8e>
	...

08007af0 <_printf_i>:
 8007af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007af4:	7e0f      	ldrb	r7, [r1, #24]
 8007af6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007af8:	2f78      	cmp	r7, #120	@ 0x78
 8007afa:	4691      	mov	r9, r2
 8007afc:	4680      	mov	r8, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	469a      	mov	sl, r3
 8007b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b06:	d807      	bhi.n	8007b18 <_printf_i+0x28>
 8007b08:	2f62      	cmp	r7, #98	@ 0x62
 8007b0a:	d80a      	bhi.n	8007b22 <_printf_i+0x32>
 8007b0c:	2f00      	cmp	r7, #0
 8007b0e:	f000 80d1 	beq.w	8007cb4 <_printf_i+0x1c4>
 8007b12:	2f58      	cmp	r7, #88	@ 0x58
 8007b14:	f000 80b8 	beq.w	8007c88 <_printf_i+0x198>
 8007b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b20:	e03a      	b.n	8007b98 <_printf_i+0xa8>
 8007b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b26:	2b15      	cmp	r3, #21
 8007b28:	d8f6      	bhi.n	8007b18 <_printf_i+0x28>
 8007b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8007b30 <_printf_i+0x40>)
 8007b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b30:	08007b89 	.word	0x08007b89
 8007b34:	08007b9d 	.word	0x08007b9d
 8007b38:	08007b19 	.word	0x08007b19
 8007b3c:	08007b19 	.word	0x08007b19
 8007b40:	08007b19 	.word	0x08007b19
 8007b44:	08007b19 	.word	0x08007b19
 8007b48:	08007b9d 	.word	0x08007b9d
 8007b4c:	08007b19 	.word	0x08007b19
 8007b50:	08007b19 	.word	0x08007b19
 8007b54:	08007b19 	.word	0x08007b19
 8007b58:	08007b19 	.word	0x08007b19
 8007b5c:	08007c9b 	.word	0x08007c9b
 8007b60:	08007bc7 	.word	0x08007bc7
 8007b64:	08007c55 	.word	0x08007c55
 8007b68:	08007b19 	.word	0x08007b19
 8007b6c:	08007b19 	.word	0x08007b19
 8007b70:	08007cbd 	.word	0x08007cbd
 8007b74:	08007b19 	.word	0x08007b19
 8007b78:	08007bc7 	.word	0x08007bc7
 8007b7c:	08007b19 	.word	0x08007b19
 8007b80:	08007b19 	.word	0x08007b19
 8007b84:	08007c5d 	.word	0x08007c5d
 8007b88:	6833      	ldr	r3, [r6, #0]
 8007b8a:	1d1a      	adds	r2, r3, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6032      	str	r2, [r6, #0]
 8007b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e09c      	b.n	8007cd6 <_printf_i+0x1e6>
 8007b9c:	6833      	ldr	r3, [r6, #0]
 8007b9e:	6820      	ldr	r0, [r4, #0]
 8007ba0:	1d19      	adds	r1, r3, #4
 8007ba2:	6031      	str	r1, [r6, #0]
 8007ba4:	0606      	lsls	r6, r0, #24
 8007ba6:	d501      	bpl.n	8007bac <_printf_i+0xbc>
 8007ba8:	681d      	ldr	r5, [r3, #0]
 8007baa:	e003      	b.n	8007bb4 <_printf_i+0xc4>
 8007bac:	0645      	lsls	r5, r0, #25
 8007bae:	d5fb      	bpl.n	8007ba8 <_printf_i+0xb8>
 8007bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bb4:	2d00      	cmp	r5, #0
 8007bb6:	da03      	bge.n	8007bc0 <_printf_i+0xd0>
 8007bb8:	232d      	movs	r3, #45	@ 0x2d
 8007bba:	426d      	negs	r5, r5
 8007bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bc0:	4858      	ldr	r0, [pc, #352]	@ (8007d24 <_printf_i+0x234>)
 8007bc2:	230a      	movs	r3, #10
 8007bc4:	e011      	b.n	8007bea <_printf_i+0xfa>
 8007bc6:	6821      	ldr	r1, [r4, #0]
 8007bc8:	6833      	ldr	r3, [r6, #0]
 8007bca:	0608      	lsls	r0, r1, #24
 8007bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bd0:	d402      	bmi.n	8007bd8 <_printf_i+0xe8>
 8007bd2:	0649      	lsls	r1, r1, #25
 8007bd4:	bf48      	it	mi
 8007bd6:	b2ad      	uxthmi	r5, r5
 8007bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bda:	4852      	ldr	r0, [pc, #328]	@ (8007d24 <_printf_i+0x234>)
 8007bdc:	6033      	str	r3, [r6, #0]
 8007bde:	bf14      	ite	ne
 8007be0:	230a      	movne	r3, #10
 8007be2:	2308      	moveq	r3, #8
 8007be4:	2100      	movs	r1, #0
 8007be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bea:	6866      	ldr	r6, [r4, #4]
 8007bec:	60a6      	str	r6, [r4, #8]
 8007bee:	2e00      	cmp	r6, #0
 8007bf0:	db05      	blt.n	8007bfe <_printf_i+0x10e>
 8007bf2:	6821      	ldr	r1, [r4, #0]
 8007bf4:	432e      	orrs	r6, r5
 8007bf6:	f021 0104 	bic.w	r1, r1, #4
 8007bfa:	6021      	str	r1, [r4, #0]
 8007bfc:	d04b      	beq.n	8007c96 <_printf_i+0x1a6>
 8007bfe:	4616      	mov	r6, r2
 8007c00:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c04:	fb03 5711 	mls	r7, r3, r1, r5
 8007c08:	5dc7      	ldrb	r7, [r0, r7]
 8007c0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c0e:	462f      	mov	r7, r5
 8007c10:	42bb      	cmp	r3, r7
 8007c12:	460d      	mov	r5, r1
 8007c14:	d9f4      	bls.n	8007c00 <_printf_i+0x110>
 8007c16:	2b08      	cmp	r3, #8
 8007c18:	d10b      	bne.n	8007c32 <_printf_i+0x142>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	07df      	lsls	r7, r3, #31
 8007c1e:	d508      	bpl.n	8007c32 <_printf_i+0x142>
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	6861      	ldr	r1, [r4, #4]
 8007c24:	4299      	cmp	r1, r3
 8007c26:	bfde      	ittt	le
 8007c28:	2330      	movle	r3, #48	@ 0x30
 8007c2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c32:	1b92      	subs	r2, r2, r6
 8007c34:	6122      	str	r2, [r4, #16]
 8007c36:	f8cd a000 	str.w	sl, [sp]
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	aa03      	add	r2, sp, #12
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4640      	mov	r0, r8
 8007c42:	f7ff fee7 	bl	8007a14 <_printf_common>
 8007c46:	3001      	adds	r0, #1
 8007c48:	d14a      	bne.n	8007ce0 <_printf_i+0x1f0>
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4e:	b004      	add	sp, #16
 8007c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	f043 0320 	orr.w	r3, r3, #32
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	4832      	ldr	r0, [pc, #200]	@ (8007d28 <_printf_i+0x238>)
 8007c5e:	2778      	movs	r7, #120	@ 0x78
 8007c60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	6831      	ldr	r1, [r6, #0]
 8007c68:	061f      	lsls	r7, r3, #24
 8007c6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c6e:	d402      	bmi.n	8007c76 <_printf_i+0x186>
 8007c70:	065f      	lsls	r7, r3, #25
 8007c72:	bf48      	it	mi
 8007c74:	b2ad      	uxthmi	r5, r5
 8007c76:	6031      	str	r1, [r6, #0]
 8007c78:	07d9      	lsls	r1, r3, #31
 8007c7a:	bf44      	itt	mi
 8007c7c:	f043 0320 	orrmi.w	r3, r3, #32
 8007c80:	6023      	strmi	r3, [r4, #0]
 8007c82:	b11d      	cbz	r5, 8007c8c <_printf_i+0x19c>
 8007c84:	2310      	movs	r3, #16
 8007c86:	e7ad      	b.n	8007be4 <_printf_i+0xf4>
 8007c88:	4826      	ldr	r0, [pc, #152]	@ (8007d24 <_printf_i+0x234>)
 8007c8a:	e7e9      	b.n	8007c60 <_printf_i+0x170>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	f023 0320 	bic.w	r3, r3, #32
 8007c92:	6023      	str	r3, [r4, #0]
 8007c94:	e7f6      	b.n	8007c84 <_printf_i+0x194>
 8007c96:	4616      	mov	r6, r2
 8007c98:	e7bd      	b.n	8007c16 <_printf_i+0x126>
 8007c9a:	6833      	ldr	r3, [r6, #0]
 8007c9c:	6825      	ldr	r5, [r4, #0]
 8007c9e:	6961      	ldr	r1, [r4, #20]
 8007ca0:	1d18      	adds	r0, r3, #4
 8007ca2:	6030      	str	r0, [r6, #0]
 8007ca4:	062e      	lsls	r6, r5, #24
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	d501      	bpl.n	8007cae <_printf_i+0x1be>
 8007caa:	6019      	str	r1, [r3, #0]
 8007cac:	e002      	b.n	8007cb4 <_printf_i+0x1c4>
 8007cae:	0668      	lsls	r0, r5, #25
 8007cb0:	d5fb      	bpl.n	8007caa <_printf_i+0x1ba>
 8007cb2:	8019      	strh	r1, [r3, #0]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	6123      	str	r3, [r4, #16]
 8007cb8:	4616      	mov	r6, r2
 8007cba:	e7bc      	b.n	8007c36 <_printf_i+0x146>
 8007cbc:	6833      	ldr	r3, [r6, #0]
 8007cbe:	1d1a      	adds	r2, r3, #4
 8007cc0:	6032      	str	r2, [r6, #0]
 8007cc2:	681e      	ldr	r6, [r3, #0]
 8007cc4:	6862      	ldr	r2, [r4, #4]
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f7f8 fa89 	bl	80001e0 <memchr>
 8007cce:	b108      	cbz	r0, 8007cd4 <_printf_i+0x1e4>
 8007cd0:	1b80      	subs	r0, r0, r6
 8007cd2:	6060      	str	r0, [r4, #4]
 8007cd4:	6863      	ldr	r3, [r4, #4]
 8007cd6:	6123      	str	r3, [r4, #16]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cde:	e7aa      	b.n	8007c36 <_printf_i+0x146>
 8007ce0:	6923      	ldr	r3, [r4, #16]
 8007ce2:	4632      	mov	r2, r6
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	47d0      	blx	sl
 8007cea:	3001      	adds	r0, #1
 8007cec:	d0ad      	beq.n	8007c4a <_printf_i+0x15a>
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	079b      	lsls	r3, r3, #30
 8007cf2:	d413      	bmi.n	8007d1c <_printf_i+0x22c>
 8007cf4:	68e0      	ldr	r0, [r4, #12]
 8007cf6:	9b03      	ldr	r3, [sp, #12]
 8007cf8:	4298      	cmp	r0, r3
 8007cfa:	bfb8      	it	lt
 8007cfc:	4618      	movlt	r0, r3
 8007cfe:	e7a6      	b.n	8007c4e <_printf_i+0x15e>
 8007d00:	2301      	movs	r3, #1
 8007d02:	4632      	mov	r2, r6
 8007d04:	4649      	mov	r1, r9
 8007d06:	4640      	mov	r0, r8
 8007d08:	47d0      	blx	sl
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d09d      	beq.n	8007c4a <_printf_i+0x15a>
 8007d0e:	3501      	adds	r5, #1
 8007d10:	68e3      	ldr	r3, [r4, #12]
 8007d12:	9903      	ldr	r1, [sp, #12]
 8007d14:	1a5b      	subs	r3, r3, r1
 8007d16:	42ab      	cmp	r3, r5
 8007d18:	dcf2      	bgt.n	8007d00 <_printf_i+0x210>
 8007d1a:	e7eb      	b.n	8007cf4 <_printf_i+0x204>
 8007d1c:	2500      	movs	r5, #0
 8007d1e:	f104 0619 	add.w	r6, r4, #25
 8007d22:	e7f5      	b.n	8007d10 <_printf_i+0x220>
 8007d24:	0800bafe 	.word	0x0800bafe
 8007d28:	0800bb0f 	.word	0x0800bb0f

08007d2c <std>:
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	b510      	push	{r4, lr}
 8007d30:	4604      	mov	r4, r0
 8007d32:	e9c0 3300 	strd	r3, r3, [r0]
 8007d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d3a:	6083      	str	r3, [r0, #8]
 8007d3c:	8181      	strh	r1, [r0, #12]
 8007d3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d40:	81c2      	strh	r2, [r0, #14]
 8007d42:	6183      	str	r3, [r0, #24]
 8007d44:	4619      	mov	r1, r3
 8007d46:	2208      	movs	r2, #8
 8007d48:	305c      	adds	r0, #92	@ 0x5c
 8007d4a:	f000 f928 	bl	8007f9e <memset>
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d84 <std+0x58>)
 8007d50:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d52:	4b0d      	ldr	r3, [pc, #52]	@ (8007d88 <std+0x5c>)
 8007d54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d56:	4b0d      	ldr	r3, [pc, #52]	@ (8007d8c <std+0x60>)
 8007d58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d90 <std+0x64>)
 8007d5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d94 <std+0x68>)
 8007d60:	6224      	str	r4, [r4, #32]
 8007d62:	429c      	cmp	r4, r3
 8007d64:	d006      	beq.n	8007d74 <std+0x48>
 8007d66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d6a:	4294      	cmp	r4, r2
 8007d6c:	d002      	beq.n	8007d74 <std+0x48>
 8007d6e:	33d0      	adds	r3, #208	@ 0xd0
 8007d70:	429c      	cmp	r4, r3
 8007d72:	d105      	bne.n	8007d80 <std+0x54>
 8007d74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d7c:	f000 b98c 	b.w	8008098 <__retarget_lock_init_recursive>
 8007d80:	bd10      	pop	{r4, pc}
 8007d82:	bf00      	nop
 8007d84:	08007f19 	.word	0x08007f19
 8007d88:	08007f3b 	.word	0x08007f3b
 8007d8c:	08007f73 	.word	0x08007f73
 8007d90:	08007f97 	.word	0x08007f97
 8007d94:	20000818 	.word	0x20000818

08007d98 <stdio_exit_handler>:
 8007d98:	4a02      	ldr	r2, [pc, #8]	@ (8007da4 <stdio_exit_handler+0xc>)
 8007d9a:	4903      	ldr	r1, [pc, #12]	@ (8007da8 <stdio_exit_handler+0x10>)
 8007d9c:	4803      	ldr	r0, [pc, #12]	@ (8007dac <stdio_exit_handler+0x14>)
 8007d9e:	f000 b869 	b.w	8007e74 <_fwalk_sglue>
 8007da2:	bf00      	nop
 8007da4:	2000001c 	.word	0x2000001c
 8007da8:	08009ca1 	.word	0x08009ca1
 8007dac:	2000002c 	.word	0x2000002c

08007db0 <cleanup_stdio>:
 8007db0:	6841      	ldr	r1, [r0, #4]
 8007db2:	4b0c      	ldr	r3, [pc, #48]	@ (8007de4 <cleanup_stdio+0x34>)
 8007db4:	4299      	cmp	r1, r3
 8007db6:	b510      	push	{r4, lr}
 8007db8:	4604      	mov	r4, r0
 8007dba:	d001      	beq.n	8007dc0 <cleanup_stdio+0x10>
 8007dbc:	f001 ff70 	bl	8009ca0 <_fflush_r>
 8007dc0:	68a1      	ldr	r1, [r4, #8]
 8007dc2:	4b09      	ldr	r3, [pc, #36]	@ (8007de8 <cleanup_stdio+0x38>)
 8007dc4:	4299      	cmp	r1, r3
 8007dc6:	d002      	beq.n	8007dce <cleanup_stdio+0x1e>
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f001 ff69 	bl	8009ca0 <_fflush_r>
 8007dce:	68e1      	ldr	r1, [r4, #12]
 8007dd0:	4b06      	ldr	r3, [pc, #24]	@ (8007dec <cleanup_stdio+0x3c>)
 8007dd2:	4299      	cmp	r1, r3
 8007dd4:	d004      	beq.n	8007de0 <cleanup_stdio+0x30>
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ddc:	f001 bf60 	b.w	8009ca0 <_fflush_r>
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	bf00      	nop
 8007de4:	20000818 	.word	0x20000818
 8007de8:	20000880 	.word	0x20000880
 8007dec:	200008e8 	.word	0x200008e8

08007df0 <global_stdio_init.part.0>:
 8007df0:	b510      	push	{r4, lr}
 8007df2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e20 <global_stdio_init.part.0+0x30>)
 8007df4:	4c0b      	ldr	r4, [pc, #44]	@ (8007e24 <global_stdio_init.part.0+0x34>)
 8007df6:	4a0c      	ldr	r2, [pc, #48]	@ (8007e28 <global_stdio_init.part.0+0x38>)
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2104      	movs	r1, #4
 8007e00:	f7ff ff94 	bl	8007d2c <std>
 8007e04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e08:	2201      	movs	r2, #1
 8007e0a:	2109      	movs	r1, #9
 8007e0c:	f7ff ff8e 	bl	8007d2c <std>
 8007e10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e14:	2202      	movs	r2, #2
 8007e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e1a:	2112      	movs	r1, #18
 8007e1c:	f7ff bf86 	b.w	8007d2c <std>
 8007e20:	20000950 	.word	0x20000950
 8007e24:	20000818 	.word	0x20000818
 8007e28:	08007d99 	.word	0x08007d99

08007e2c <__sfp_lock_acquire>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	@ (8007e34 <__sfp_lock_acquire+0x8>)
 8007e2e:	f000 b934 	b.w	800809a <__retarget_lock_acquire_recursive>
 8007e32:	bf00      	nop
 8007e34:	20000959 	.word	0x20000959

08007e38 <__sfp_lock_release>:
 8007e38:	4801      	ldr	r0, [pc, #4]	@ (8007e40 <__sfp_lock_release+0x8>)
 8007e3a:	f000 b92f 	b.w	800809c <__retarget_lock_release_recursive>
 8007e3e:	bf00      	nop
 8007e40:	20000959 	.word	0x20000959

08007e44 <__sinit>:
 8007e44:	b510      	push	{r4, lr}
 8007e46:	4604      	mov	r4, r0
 8007e48:	f7ff fff0 	bl	8007e2c <__sfp_lock_acquire>
 8007e4c:	6a23      	ldr	r3, [r4, #32]
 8007e4e:	b11b      	cbz	r3, 8007e58 <__sinit+0x14>
 8007e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e54:	f7ff bff0 	b.w	8007e38 <__sfp_lock_release>
 8007e58:	4b04      	ldr	r3, [pc, #16]	@ (8007e6c <__sinit+0x28>)
 8007e5a:	6223      	str	r3, [r4, #32]
 8007e5c:	4b04      	ldr	r3, [pc, #16]	@ (8007e70 <__sinit+0x2c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1f5      	bne.n	8007e50 <__sinit+0xc>
 8007e64:	f7ff ffc4 	bl	8007df0 <global_stdio_init.part.0>
 8007e68:	e7f2      	b.n	8007e50 <__sinit+0xc>
 8007e6a:	bf00      	nop
 8007e6c:	08007db1 	.word	0x08007db1
 8007e70:	20000950 	.word	0x20000950

08007e74 <_fwalk_sglue>:
 8007e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e78:	4607      	mov	r7, r0
 8007e7a:	4688      	mov	r8, r1
 8007e7c:	4614      	mov	r4, r2
 8007e7e:	2600      	movs	r6, #0
 8007e80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e84:	f1b9 0901 	subs.w	r9, r9, #1
 8007e88:	d505      	bpl.n	8007e96 <_fwalk_sglue+0x22>
 8007e8a:	6824      	ldr	r4, [r4, #0]
 8007e8c:	2c00      	cmp	r4, #0
 8007e8e:	d1f7      	bne.n	8007e80 <_fwalk_sglue+0xc>
 8007e90:	4630      	mov	r0, r6
 8007e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e96:	89ab      	ldrh	r3, [r5, #12]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d907      	bls.n	8007eac <_fwalk_sglue+0x38>
 8007e9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	d003      	beq.n	8007eac <_fwalk_sglue+0x38>
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	47c0      	blx	r8
 8007eaa:	4306      	orrs	r6, r0
 8007eac:	3568      	adds	r5, #104	@ 0x68
 8007eae:	e7e9      	b.n	8007e84 <_fwalk_sglue+0x10>

08007eb0 <iprintf>:
 8007eb0:	b40f      	push	{r0, r1, r2, r3}
 8007eb2:	b507      	push	{r0, r1, r2, lr}
 8007eb4:	4906      	ldr	r1, [pc, #24]	@ (8007ed0 <iprintf+0x20>)
 8007eb6:	ab04      	add	r3, sp, #16
 8007eb8:	6808      	ldr	r0, [r1, #0]
 8007eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ebe:	6881      	ldr	r1, [r0, #8]
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	f001 fd51 	bl	8009968 <_vfiprintf_r>
 8007ec6:	b003      	add	sp, #12
 8007ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ecc:	b004      	add	sp, #16
 8007ece:	4770      	bx	lr
 8007ed0:	20000028 	.word	0x20000028

08007ed4 <siprintf>:
 8007ed4:	b40e      	push	{r1, r2, r3}
 8007ed6:	b510      	push	{r4, lr}
 8007ed8:	b09d      	sub	sp, #116	@ 0x74
 8007eda:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007edc:	9002      	str	r0, [sp, #8]
 8007ede:	9006      	str	r0, [sp, #24]
 8007ee0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ee4:	480a      	ldr	r0, [pc, #40]	@ (8007f10 <siprintf+0x3c>)
 8007ee6:	9107      	str	r1, [sp, #28]
 8007ee8:	9104      	str	r1, [sp, #16]
 8007eea:	490a      	ldr	r1, [pc, #40]	@ (8007f14 <siprintf+0x40>)
 8007eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef0:	9105      	str	r1, [sp, #20]
 8007ef2:	2400      	movs	r4, #0
 8007ef4:	a902      	add	r1, sp, #8
 8007ef6:	6800      	ldr	r0, [r0, #0]
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007efc:	f001 fc0e 	bl	800971c <_svfiprintf_r>
 8007f00:	9b02      	ldr	r3, [sp, #8]
 8007f02:	701c      	strb	r4, [r3, #0]
 8007f04:	b01d      	add	sp, #116	@ 0x74
 8007f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f0a:	b003      	add	sp, #12
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	20000028 	.word	0x20000028
 8007f14:	ffff0208 	.word	0xffff0208

08007f18 <__sread>:
 8007f18:	b510      	push	{r4, lr}
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f20:	f000 f86c 	bl	8007ffc <_read_r>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	bfab      	itete	ge
 8007f28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f2c:	181b      	addge	r3, r3, r0
 8007f2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f32:	bfac      	ite	ge
 8007f34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f36:	81a3      	strhlt	r3, [r4, #12]
 8007f38:	bd10      	pop	{r4, pc}

08007f3a <__swrite>:
 8007f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3e:	461f      	mov	r7, r3
 8007f40:	898b      	ldrh	r3, [r1, #12]
 8007f42:	05db      	lsls	r3, r3, #23
 8007f44:	4605      	mov	r5, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	4616      	mov	r6, r2
 8007f4a:	d505      	bpl.n	8007f58 <__swrite+0x1e>
 8007f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f50:	2302      	movs	r3, #2
 8007f52:	2200      	movs	r2, #0
 8007f54:	f000 f840 	bl	8007fd8 <_lseek_r>
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f62:	81a3      	strh	r3, [r4, #12]
 8007f64:	4632      	mov	r2, r6
 8007f66:	463b      	mov	r3, r7
 8007f68:	4628      	mov	r0, r5
 8007f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6e:	f000 b857 	b.w	8008020 <_write_r>

08007f72 <__sseek>:
 8007f72:	b510      	push	{r4, lr}
 8007f74:	460c      	mov	r4, r1
 8007f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7a:	f000 f82d 	bl	8007fd8 <_lseek_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	bf15      	itete	ne
 8007f84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f8e:	81a3      	strheq	r3, [r4, #12]
 8007f90:	bf18      	it	ne
 8007f92:	81a3      	strhne	r3, [r4, #12]
 8007f94:	bd10      	pop	{r4, pc}

08007f96 <__sclose>:
 8007f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f9a:	f000 b80d 	b.w	8007fb8 <_close_r>

08007f9e <memset>:
 8007f9e:	4402      	add	r2, r0
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d100      	bne.n	8007fa8 <memset+0xa>
 8007fa6:	4770      	bx	lr
 8007fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8007fac:	e7f9      	b.n	8007fa2 <memset+0x4>
	...

08007fb0 <_localeconv_r>:
 8007fb0:	4800      	ldr	r0, [pc, #0]	@ (8007fb4 <_localeconv_r+0x4>)
 8007fb2:	4770      	bx	lr
 8007fb4:	20000168 	.word	0x20000168

08007fb8 <_close_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d06      	ldr	r5, [pc, #24]	@ (8007fd4 <_close_r+0x1c>)
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	602b      	str	r3, [r5, #0]
 8007fc4:	f7fb fb5f 	bl	8003686 <_close>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_close_r+0x1a>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_close_r+0x1a>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	20000954 	.word	0x20000954

08007fd8 <_lseek_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	@ (8007ff8 <_lseek_r+0x20>)
 8007fdc:	4604      	mov	r4, r0
 8007fde:	4608      	mov	r0, r1
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f7fb fb74 	bl	80036d4 <_lseek>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_lseek_r+0x1e>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_lseek_r+0x1e>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	20000954 	.word	0x20000954

08007ffc <_read_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	@ (800801c <_read_r+0x20>)
 8008000:	4604      	mov	r4, r0
 8008002:	4608      	mov	r0, r1
 8008004:	4611      	mov	r1, r2
 8008006:	2200      	movs	r2, #0
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	f7fb fb02 	bl	8003614 <_read>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_read_r+0x1e>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_read_r+0x1e>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	20000954 	.word	0x20000954

08008020 <_write_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d07      	ldr	r5, [pc, #28]	@ (8008040 <_write_r+0x20>)
 8008024:	4604      	mov	r4, r0
 8008026:	4608      	mov	r0, r1
 8008028:	4611      	mov	r1, r2
 800802a:	2200      	movs	r2, #0
 800802c:	602a      	str	r2, [r5, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	f7fb fb0d 	bl	800364e <_write>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_write_r+0x1e>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_write_r+0x1e>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	20000954 	.word	0x20000954

08008044 <__errno>:
 8008044:	4b01      	ldr	r3, [pc, #4]	@ (800804c <__errno+0x8>)
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	20000028 	.word	0x20000028

08008050 <__libc_init_array>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	4d0d      	ldr	r5, [pc, #52]	@ (8008088 <__libc_init_array+0x38>)
 8008054:	4c0d      	ldr	r4, [pc, #52]	@ (800808c <__libc_init_array+0x3c>)
 8008056:	1b64      	subs	r4, r4, r5
 8008058:	10a4      	asrs	r4, r4, #2
 800805a:	2600      	movs	r6, #0
 800805c:	42a6      	cmp	r6, r4
 800805e:	d109      	bne.n	8008074 <__libc_init_array+0x24>
 8008060:	4d0b      	ldr	r5, [pc, #44]	@ (8008090 <__libc_init_array+0x40>)
 8008062:	4c0c      	ldr	r4, [pc, #48]	@ (8008094 <__libc_init_array+0x44>)
 8008064:	f002 fa6a 	bl	800a53c <_init>
 8008068:	1b64      	subs	r4, r4, r5
 800806a:	10a4      	asrs	r4, r4, #2
 800806c:	2600      	movs	r6, #0
 800806e:	42a6      	cmp	r6, r4
 8008070:	d105      	bne.n	800807e <__libc_init_array+0x2e>
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	f855 3b04 	ldr.w	r3, [r5], #4
 8008078:	4798      	blx	r3
 800807a:	3601      	adds	r6, #1
 800807c:	e7ee      	b.n	800805c <__libc_init_array+0xc>
 800807e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008082:	4798      	blx	r3
 8008084:	3601      	adds	r6, #1
 8008086:	e7f2      	b.n	800806e <__libc_init_array+0x1e>
 8008088:	0800be6c 	.word	0x0800be6c
 800808c:	0800be6c 	.word	0x0800be6c
 8008090:	0800be6c 	.word	0x0800be6c
 8008094:	0800be70 	.word	0x0800be70

08008098 <__retarget_lock_init_recursive>:
 8008098:	4770      	bx	lr

0800809a <__retarget_lock_acquire_recursive>:
 800809a:	4770      	bx	lr

0800809c <__retarget_lock_release_recursive>:
 800809c:	4770      	bx	lr

0800809e <memcpy>:
 800809e:	440a      	add	r2, r1
 80080a0:	4291      	cmp	r1, r2
 80080a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a6:	d100      	bne.n	80080aa <memcpy+0xc>
 80080a8:	4770      	bx	lr
 80080aa:	b510      	push	{r4, lr}
 80080ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b4:	4291      	cmp	r1, r2
 80080b6:	d1f9      	bne.n	80080ac <memcpy+0xe>
 80080b8:	bd10      	pop	{r4, pc}

080080ba <quorem>:
 80080ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080be:	6903      	ldr	r3, [r0, #16]
 80080c0:	690c      	ldr	r4, [r1, #16]
 80080c2:	42a3      	cmp	r3, r4
 80080c4:	4607      	mov	r7, r0
 80080c6:	db7e      	blt.n	80081c6 <quorem+0x10c>
 80080c8:	3c01      	subs	r4, #1
 80080ca:	f101 0814 	add.w	r8, r1, #20
 80080ce:	00a3      	lsls	r3, r4, #2
 80080d0:	f100 0514 	add.w	r5, r0, #20
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080e4:	3301      	adds	r3, #1
 80080e6:	429a      	cmp	r2, r3
 80080e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80080f0:	d32e      	bcc.n	8008150 <quorem+0x96>
 80080f2:	f04f 0a00 	mov.w	sl, #0
 80080f6:	46c4      	mov	ip, r8
 80080f8:	46ae      	mov	lr, r5
 80080fa:	46d3      	mov	fp, sl
 80080fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008100:	b298      	uxth	r0, r3
 8008102:	fb06 a000 	mla	r0, r6, r0, sl
 8008106:	0c02      	lsrs	r2, r0, #16
 8008108:	0c1b      	lsrs	r3, r3, #16
 800810a:	fb06 2303 	mla	r3, r6, r3, r2
 800810e:	f8de 2000 	ldr.w	r2, [lr]
 8008112:	b280      	uxth	r0, r0
 8008114:	b292      	uxth	r2, r2
 8008116:	1a12      	subs	r2, r2, r0
 8008118:	445a      	add	r2, fp
 800811a:	f8de 0000 	ldr.w	r0, [lr]
 800811e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008122:	b29b      	uxth	r3, r3
 8008124:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008128:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800812c:	b292      	uxth	r2, r2
 800812e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008132:	45e1      	cmp	r9, ip
 8008134:	f84e 2b04 	str.w	r2, [lr], #4
 8008138:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800813c:	d2de      	bcs.n	80080fc <quorem+0x42>
 800813e:	9b00      	ldr	r3, [sp, #0]
 8008140:	58eb      	ldr	r3, [r5, r3]
 8008142:	b92b      	cbnz	r3, 8008150 <quorem+0x96>
 8008144:	9b01      	ldr	r3, [sp, #4]
 8008146:	3b04      	subs	r3, #4
 8008148:	429d      	cmp	r5, r3
 800814a:	461a      	mov	r2, r3
 800814c:	d32f      	bcc.n	80081ae <quorem+0xf4>
 800814e:	613c      	str	r4, [r7, #16]
 8008150:	4638      	mov	r0, r7
 8008152:	f001 f97f 	bl	8009454 <__mcmp>
 8008156:	2800      	cmp	r0, #0
 8008158:	db25      	blt.n	80081a6 <quorem+0xec>
 800815a:	4629      	mov	r1, r5
 800815c:	2000      	movs	r0, #0
 800815e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008162:	f8d1 c000 	ldr.w	ip, [r1]
 8008166:	fa1f fe82 	uxth.w	lr, r2
 800816a:	fa1f f38c 	uxth.w	r3, ip
 800816e:	eba3 030e 	sub.w	r3, r3, lr
 8008172:	4403      	add	r3, r0
 8008174:	0c12      	lsrs	r2, r2, #16
 8008176:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800817a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800817e:	b29b      	uxth	r3, r3
 8008180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008184:	45c1      	cmp	r9, r8
 8008186:	f841 3b04 	str.w	r3, [r1], #4
 800818a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800818e:	d2e6      	bcs.n	800815e <quorem+0xa4>
 8008190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008194:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008198:	b922      	cbnz	r2, 80081a4 <quorem+0xea>
 800819a:	3b04      	subs	r3, #4
 800819c:	429d      	cmp	r5, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	d30b      	bcc.n	80081ba <quorem+0x100>
 80081a2:	613c      	str	r4, [r7, #16]
 80081a4:	3601      	adds	r6, #1
 80081a6:	4630      	mov	r0, r6
 80081a8:	b003      	add	sp, #12
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	6812      	ldr	r2, [r2, #0]
 80081b0:	3b04      	subs	r3, #4
 80081b2:	2a00      	cmp	r2, #0
 80081b4:	d1cb      	bne.n	800814e <quorem+0x94>
 80081b6:	3c01      	subs	r4, #1
 80081b8:	e7c6      	b.n	8008148 <quorem+0x8e>
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	3b04      	subs	r3, #4
 80081be:	2a00      	cmp	r2, #0
 80081c0:	d1ef      	bne.n	80081a2 <quorem+0xe8>
 80081c2:	3c01      	subs	r4, #1
 80081c4:	e7ea      	b.n	800819c <quorem+0xe2>
 80081c6:	2000      	movs	r0, #0
 80081c8:	e7ee      	b.n	80081a8 <quorem+0xee>
 80081ca:	0000      	movs	r0, r0
 80081cc:	0000      	movs	r0, r0
	...

080081d0 <_dtoa_r>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	69c7      	ldr	r7, [r0, #28]
 80081d6:	b097      	sub	sp, #92	@ 0x5c
 80081d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80081dc:	ec55 4b10 	vmov	r4, r5, d0
 80081e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80081e2:	9107      	str	r1, [sp, #28]
 80081e4:	4681      	mov	r9, r0
 80081e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80081e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80081ea:	b97f      	cbnz	r7, 800820c <_dtoa_r+0x3c>
 80081ec:	2010      	movs	r0, #16
 80081ee:	f000 fe09 	bl	8008e04 <malloc>
 80081f2:	4602      	mov	r2, r0
 80081f4:	f8c9 001c 	str.w	r0, [r9, #28]
 80081f8:	b920      	cbnz	r0, 8008204 <_dtoa_r+0x34>
 80081fa:	4ba9      	ldr	r3, [pc, #676]	@ (80084a0 <_dtoa_r+0x2d0>)
 80081fc:	21ef      	movs	r1, #239	@ 0xef
 80081fe:	48a9      	ldr	r0, [pc, #676]	@ (80084a4 <_dtoa_r+0x2d4>)
 8008200:	f001 fe34 	bl	8009e6c <__assert_func>
 8008204:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008208:	6007      	str	r7, [r0, #0]
 800820a:	60c7      	str	r7, [r0, #12]
 800820c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008210:	6819      	ldr	r1, [r3, #0]
 8008212:	b159      	cbz	r1, 800822c <_dtoa_r+0x5c>
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	604a      	str	r2, [r1, #4]
 8008218:	2301      	movs	r3, #1
 800821a:	4093      	lsls	r3, r2
 800821c:	608b      	str	r3, [r1, #8]
 800821e:	4648      	mov	r0, r9
 8008220:	f000 fee6 	bl	8008ff0 <_Bfree>
 8008224:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	1e2b      	subs	r3, r5, #0
 800822e:	bfb9      	ittee	lt
 8008230:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008234:	9305      	strlt	r3, [sp, #20]
 8008236:	2300      	movge	r3, #0
 8008238:	6033      	strge	r3, [r6, #0]
 800823a:	9f05      	ldr	r7, [sp, #20]
 800823c:	4b9a      	ldr	r3, [pc, #616]	@ (80084a8 <_dtoa_r+0x2d8>)
 800823e:	bfbc      	itt	lt
 8008240:	2201      	movlt	r2, #1
 8008242:	6032      	strlt	r2, [r6, #0]
 8008244:	43bb      	bics	r3, r7
 8008246:	d112      	bne.n	800826e <_dtoa_r+0x9e>
 8008248:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800824a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008254:	4323      	orrs	r3, r4
 8008256:	f000 855a 	beq.w	8008d0e <_dtoa_r+0xb3e>
 800825a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800825c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80084bc <_dtoa_r+0x2ec>
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 855c 	beq.w	8008d1e <_dtoa_r+0xb4e>
 8008266:	f10a 0303 	add.w	r3, sl, #3
 800826a:	f000 bd56 	b.w	8008d1a <_dtoa_r+0xb4a>
 800826e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008272:	2200      	movs	r2, #0
 8008274:	ec51 0b17 	vmov	r0, r1, d7
 8008278:	2300      	movs	r3, #0
 800827a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800827e:	f7f8 fc2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008282:	4680      	mov	r8, r0
 8008284:	b158      	cbz	r0, 800829e <_dtoa_r+0xce>
 8008286:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008288:	2301      	movs	r3, #1
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800828e:	b113      	cbz	r3, 8008296 <_dtoa_r+0xc6>
 8008290:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008292:	4b86      	ldr	r3, [pc, #536]	@ (80084ac <_dtoa_r+0x2dc>)
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80084c0 <_dtoa_r+0x2f0>
 800829a:	f000 bd40 	b.w	8008d1e <_dtoa_r+0xb4e>
 800829e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80082a2:	aa14      	add	r2, sp, #80	@ 0x50
 80082a4:	a915      	add	r1, sp, #84	@ 0x54
 80082a6:	4648      	mov	r0, r9
 80082a8:	f001 f984 	bl	80095b4 <__d2b>
 80082ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80082b0:	9002      	str	r0, [sp, #8]
 80082b2:	2e00      	cmp	r6, #0
 80082b4:	d078      	beq.n	80083a8 <_dtoa_r+0x1d8>
 80082b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082b8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80082bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80082c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80082cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80082d0:	4619      	mov	r1, r3
 80082d2:	2200      	movs	r2, #0
 80082d4:	4b76      	ldr	r3, [pc, #472]	@ (80084b0 <_dtoa_r+0x2e0>)
 80082d6:	f7f7 ffdf 	bl	8000298 <__aeabi_dsub>
 80082da:	a36b      	add	r3, pc, #428	@ (adr r3, 8008488 <_dtoa_r+0x2b8>)
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	f7f8 f992 	bl	8000608 <__aeabi_dmul>
 80082e4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008490 <_dtoa_r+0x2c0>)
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f7f7 ffd7 	bl	800029c <__adddf3>
 80082ee:	4604      	mov	r4, r0
 80082f0:	4630      	mov	r0, r6
 80082f2:	460d      	mov	r5, r1
 80082f4:	f7f8 f91e 	bl	8000534 <__aeabi_i2d>
 80082f8:	a367      	add	r3, pc, #412	@ (adr r3, 8008498 <_dtoa_r+0x2c8>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f8 f983 	bl	8000608 <__aeabi_dmul>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4620      	mov	r0, r4
 8008308:	4629      	mov	r1, r5
 800830a:	f7f7 ffc7 	bl	800029c <__adddf3>
 800830e:	4604      	mov	r4, r0
 8008310:	460d      	mov	r5, r1
 8008312:	f7f8 fc29 	bl	8000b68 <__aeabi_d2iz>
 8008316:	2200      	movs	r2, #0
 8008318:	4607      	mov	r7, r0
 800831a:	2300      	movs	r3, #0
 800831c:	4620      	mov	r0, r4
 800831e:	4629      	mov	r1, r5
 8008320:	f7f8 fbe4 	bl	8000aec <__aeabi_dcmplt>
 8008324:	b140      	cbz	r0, 8008338 <_dtoa_r+0x168>
 8008326:	4638      	mov	r0, r7
 8008328:	f7f8 f904 	bl	8000534 <__aeabi_i2d>
 800832c:	4622      	mov	r2, r4
 800832e:	462b      	mov	r3, r5
 8008330:	f7f8 fbd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008334:	b900      	cbnz	r0, 8008338 <_dtoa_r+0x168>
 8008336:	3f01      	subs	r7, #1
 8008338:	2f16      	cmp	r7, #22
 800833a:	d852      	bhi.n	80083e2 <_dtoa_r+0x212>
 800833c:	4b5d      	ldr	r3, [pc, #372]	@ (80084b4 <_dtoa_r+0x2e4>)
 800833e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800834a:	f7f8 fbcf 	bl	8000aec <__aeabi_dcmplt>
 800834e:	2800      	cmp	r0, #0
 8008350:	d049      	beq.n	80083e6 <_dtoa_r+0x216>
 8008352:	3f01      	subs	r7, #1
 8008354:	2300      	movs	r3, #0
 8008356:	9310      	str	r3, [sp, #64]	@ 0x40
 8008358:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800835a:	1b9b      	subs	r3, r3, r6
 800835c:	1e5a      	subs	r2, r3, #1
 800835e:	bf45      	ittet	mi
 8008360:	f1c3 0301 	rsbmi	r3, r3, #1
 8008364:	9300      	strmi	r3, [sp, #0]
 8008366:	2300      	movpl	r3, #0
 8008368:	2300      	movmi	r3, #0
 800836a:	9206      	str	r2, [sp, #24]
 800836c:	bf54      	ite	pl
 800836e:	9300      	strpl	r3, [sp, #0]
 8008370:	9306      	strmi	r3, [sp, #24]
 8008372:	2f00      	cmp	r7, #0
 8008374:	db39      	blt.n	80083ea <_dtoa_r+0x21a>
 8008376:	9b06      	ldr	r3, [sp, #24]
 8008378:	970d      	str	r7, [sp, #52]	@ 0x34
 800837a:	443b      	add	r3, r7
 800837c:	9306      	str	r3, [sp, #24]
 800837e:	2300      	movs	r3, #0
 8008380:	9308      	str	r3, [sp, #32]
 8008382:	9b07      	ldr	r3, [sp, #28]
 8008384:	2b09      	cmp	r3, #9
 8008386:	d863      	bhi.n	8008450 <_dtoa_r+0x280>
 8008388:	2b05      	cmp	r3, #5
 800838a:	bfc4      	itt	gt
 800838c:	3b04      	subgt	r3, #4
 800838e:	9307      	strgt	r3, [sp, #28]
 8008390:	9b07      	ldr	r3, [sp, #28]
 8008392:	f1a3 0302 	sub.w	r3, r3, #2
 8008396:	bfcc      	ite	gt
 8008398:	2400      	movgt	r4, #0
 800839a:	2401      	movle	r4, #1
 800839c:	2b03      	cmp	r3, #3
 800839e:	d863      	bhi.n	8008468 <_dtoa_r+0x298>
 80083a0:	e8df f003 	tbb	[pc, r3]
 80083a4:	2b375452 	.word	0x2b375452
 80083a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80083ac:	441e      	add	r6, r3
 80083ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	bfc1      	itttt	gt
 80083b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80083ba:	409f      	lslgt	r7, r3
 80083bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80083c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80083c4:	bfd6      	itet	le
 80083c6:	f1c3 0320 	rsble	r3, r3, #32
 80083ca:	ea47 0003 	orrgt.w	r0, r7, r3
 80083ce:	fa04 f003 	lslle.w	r0, r4, r3
 80083d2:	f7f8 f89f 	bl	8000514 <__aeabi_ui2d>
 80083d6:	2201      	movs	r2, #1
 80083d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80083dc:	3e01      	subs	r6, #1
 80083de:	9212      	str	r2, [sp, #72]	@ 0x48
 80083e0:	e776      	b.n	80082d0 <_dtoa_r+0x100>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e7b7      	b.n	8008356 <_dtoa_r+0x186>
 80083e6:	9010      	str	r0, [sp, #64]	@ 0x40
 80083e8:	e7b6      	b.n	8008358 <_dtoa_r+0x188>
 80083ea:	9b00      	ldr	r3, [sp, #0]
 80083ec:	1bdb      	subs	r3, r3, r7
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	427b      	negs	r3, r7
 80083f2:	9308      	str	r3, [sp, #32]
 80083f4:	2300      	movs	r3, #0
 80083f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80083f8:	e7c3      	b.n	8008382 <_dtoa_r+0x1b2>
 80083fa:	2301      	movs	r3, #1
 80083fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008400:	eb07 0b03 	add.w	fp, r7, r3
 8008404:	f10b 0301 	add.w	r3, fp, #1
 8008408:	2b01      	cmp	r3, #1
 800840a:	9303      	str	r3, [sp, #12]
 800840c:	bfb8      	it	lt
 800840e:	2301      	movlt	r3, #1
 8008410:	e006      	b.n	8008420 <_dtoa_r+0x250>
 8008412:	2301      	movs	r3, #1
 8008414:	9309      	str	r3, [sp, #36]	@ 0x24
 8008416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008418:	2b00      	cmp	r3, #0
 800841a:	dd28      	ble.n	800846e <_dtoa_r+0x29e>
 800841c:	469b      	mov	fp, r3
 800841e:	9303      	str	r3, [sp, #12]
 8008420:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008424:	2100      	movs	r1, #0
 8008426:	2204      	movs	r2, #4
 8008428:	f102 0514 	add.w	r5, r2, #20
 800842c:	429d      	cmp	r5, r3
 800842e:	d926      	bls.n	800847e <_dtoa_r+0x2ae>
 8008430:	6041      	str	r1, [r0, #4]
 8008432:	4648      	mov	r0, r9
 8008434:	f000 fd9c 	bl	8008f70 <_Balloc>
 8008438:	4682      	mov	sl, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	d142      	bne.n	80084c4 <_dtoa_r+0x2f4>
 800843e:	4b1e      	ldr	r3, [pc, #120]	@ (80084b8 <_dtoa_r+0x2e8>)
 8008440:	4602      	mov	r2, r0
 8008442:	f240 11af 	movw	r1, #431	@ 0x1af
 8008446:	e6da      	b.n	80081fe <_dtoa_r+0x2e>
 8008448:	2300      	movs	r3, #0
 800844a:	e7e3      	b.n	8008414 <_dtoa_r+0x244>
 800844c:	2300      	movs	r3, #0
 800844e:	e7d5      	b.n	80083fc <_dtoa_r+0x22c>
 8008450:	2401      	movs	r4, #1
 8008452:	2300      	movs	r3, #0
 8008454:	9307      	str	r3, [sp, #28]
 8008456:	9409      	str	r4, [sp, #36]	@ 0x24
 8008458:	f04f 3bff 	mov.w	fp, #4294967295
 800845c:	2200      	movs	r2, #0
 800845e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008462:	2312      	movs	r3, #18
 8008464:	920c      	str	r2, [sp, #48]	@ 0x30
 8008466:	e7db      	b.n	8008420 <_dtoa_r+0x250>
 8008468:	2301      	movs	r3, #1
 800846a:	9309      	str	r3, [sp, #36]	@ 0x24
 800846c:	e7f4      	b.n	8008458 <_dtoa_r+0x288>
 800846e:	f04f 0b01 	mov.w	fp, #1
 8008472:	f8cd b00c 	str.w	fp, [sp, #12]
 8008476:	465b      	mov	r3, fp
 8008478:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800847c:	e7d0      	b.n	8008420 <_dtoa_r+0x250>
 800847e:	3101      	adds	r1, #1
 8008480:	0052      	lsls	r2, r2, #1
 8008482:	e7d1      	b.n	8008428 <_dtoa_r+0x258>
 8008484:	f3af 8000 	nop.w
 8008488:	636f4361 	.word	0x636f4361
 800848c:	3fd287a7 	.word	0x3fd287a7
 8008490:	8b60c8b3 	.word	0x8b60c8b3
 8008494:	3fc68a28 	.word	0x3fc68a28
 8008498:	509f79fb 	.word	0x509f79fb
 800849c:	3fd34413 	.word	0x3fd34413
 80084a0:	0800bb2d 	.word	0x0800bb2d
 80084a4:	0800bb44 	.word	0x0800bb44
 80084a8:	7ff00000 	.word	0x7ff00000
 80084ac:	0800bafd 	.word	0x0800bafd
 80084b0:	3ff80000 	.word	0x3ff80000
 80084b4:	0800bc98 	.word	0x0800bc98
 80084b8:	0800bb9c 	.word	0x0800bb9c
 80084bc:	0800bb29 	.word	0x0800bb29
 80084c0:	0800bafc 	.word	0x0800bafc
 80084c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80084c8:	6018      	str	r0, [r3, #0]
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	2b0e      	cmp	r3, #14
 80084ce:	f200 80a1 	bhi.w	8008614 <_dtoa_r+0x444>
 80084d2:	2c00      	cmp	r4, #0
 80084d4:	f000 809e 	beq.w	8008614 <_dtoa_r+0x444>
 80084d8:	2f00      	cmp	r7, #0
 80084da:	dd33      	ble.n	8008544 <_dtoa_r+0x374>
 80084dc:	4b9c      	ldr	r3, [pc, #624]	@ (8008750 <_dtoa_r+0x580>)
 80084de:	f007 020f 	and.w	r2, r7, #15
 80084e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084e6:	ed93 7b00 	vldr	d7, [r3]
 80084ea:	05f8      	lsls	r0, r7, #23
 80084ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80084f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80084f4:	d516      	bpl.n	8008524 <_dtoa_r+0x354>
 80084f6:	4b97      	ldr	r3, [pc, #604]	@ (8008754 <_dtoa_r+0x584>)
 80084f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80084fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008500:	f7f8 f9ac 	bl	800085c <__aeabi_ddiv>
 8008504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008508:	f004 040f 	and.w	r4, r4, #15
 800850c:	2603      	movs	r6, #3
 800850e:	4d91      	ldr	r5, [pc, #580]	@ (8008754 <_dtoa_r+0x584>)
 8008510:	b954      	cbnz	r4, 8008528 <_dtoa_r+0x358>
 8008512:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800851a:	f7f8 f99f 	bl	800085c <__aeabi_ddiv>
 800851e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008522:	e028      	b.n	8008576 <_dtoa_r+0x3a6>
 8008524:	2602      	movs	r6, #2
 8008526:	e7f2      	b.n	800850e <_dtoa_r+0x33e>
 8008528:	07e1      	lsls	r1, r4, #31
 800852a:	d508      	bpl.n	800853e <_dtoa_r+0x36e>
 800852c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008530:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008534:	f7f8 f868 	bl	8000608 <__aeabi_dmul>
 8008538:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800853c:	3601      	adds	r6, #1
 800853e:	1064      	asrs	r4, r4, #1
 8008540:	3508      	adds	r5, #8
 8008542:	e7e5      	b.n	8008510 <_dtoa_r+0x340>
 8008544:	f000 80af 	beq.w	80086a6 <_dtoa_r+0x4d6>
 8008548:	427c      	negs	r4, r7
 800854a:	4b81      	ldr	r3, [pc, #516]	@ (8008750 <_dtoa_r+0x580>)
 800854c:	4d81      	ldr	r5, [pc, #516]	@ (8008754 <_dtoa_r+0x584>)
 800854e:	f004 020f 	and.w	r2, r4, #15
 8008552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800855e:	f7f8 f853 	bl	8000608 <__aeabi_dmul>
 8008562:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008566:	1124      	asrs	r4, r4, #4
 8008568:	2300      	movs	r3, #0
 800856a:	2602      	movs	r6, #2
 800856c:	2c00      	cmp	r4, #0
 800856e:	f040 808f 	bne.w	8008690 <_dtoa_r+0x4c0>
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1d3      	bne.n	800851e <_dtoa_r+0x34e>
 8008576:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008578:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 8094 	beq.w	80086aa <_dtoa_r+0x4da>
 8008582:	4b75      	ldr	r3, [pc, #468]	@ (8008758 <_dtoa_r+0x588>)
 8008584:	2200      	movs	r2, #0
 8008586:	4620      	mov	r0, r4
 8008588:	4629      	mov	r1, r5
 800858a:	f7f8 faaf 	bl	8000aec <__aeabi_dcmplt>
 800858e:	2800      	cmp	r0, #0
 8008590:	f000 808b 	beq.w	80086aa <_dtoa_r+0x4da>
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 8087 	beq.w	80086aa <_dtoa_r+0x4da>
 800859c:	f1bb 0f00 	cmp.w	fp, #0
 80085a0:	dd34      	ble.n	800860c <_dtoa_r+0x43c>
 80085a2:	4620      	mov	r0, r4
 80085a4:	4b6d      	ldr	r3, [pc, #436]	@ (800875c <_dtoa_r+0x58c>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	4629      	mov	r1, r5
 80085aa:	f7f8 f82d 	bl	8000608 <__aeabi_dmul>
 80085ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085b2:	f107 38ff 	add.w	r8, r7, #4294967295
 80085b6:	3601      	adds	r6, #1
 80085b8:	465c      	mov	r4, fp
 80085ba:	4630      	mov	r0, r6
 80085bc:	f7f7 ffba 	bl	8000534 <__aeabi_i2d>
 80085c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085c4:	f7f8 f820 	bl	8000608 <__aeabi_dmul>
 80085c8:	4b65      	ldr	r3, [pc, #404]	@ (8008760 <_dtoa_r+0x590>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	f7f7 fe66 	bl	800029c <__adddf3>
 80085d0:	4605      	mov	r5, r0
 80085d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80085d6:	2c00      	cmp	r4, #0
 80085d8:	d16a      	bne.n	80086b0 <_dtoa_r+0x4e0>
 80085da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085de:	4b61      	ldr	r3, [pc, #388]	@ (8008764 <_dtoa_r+0x594>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	f7f7 fe59 	bl	8000298 <__aeabi_dsub>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085ee:	462a      	mov	r2, r5
 80085f0:	4633      	mov	r3, r6
 80085f2:	f7f8 fa99 	bl	8000b28 <__aeabi_dcmpgt>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f040 8298 	bne.w	8008b2c <_dtoa_r+0x95c>
 80085fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008600:	462a      	mov	r2, r5
 8008602:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008606:	f7f8 fa71 	bl	8000aec <__aeabi_dcmplt>
 800860a:	bb38      	cbnz	r0, 800865c <_dtoa_r+0x48c>
 800860c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008610:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008614:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008616:	2b00      	cmp	r3, #0
 8008618:	f2c0 8157 	blt.w	80088ca <_dtoa_r+0x6fa>
 800861c:	2f0e      	cmp	r7, #14
 800861e:	f300 8154 	bgt.w	80088ca <_dtoa_r+0x6fa>
 8008622:	4b4b      	ldr	r3, [pc, #300]	@ (8008750 <_dtoa_r+0x580>)
 8008624:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008628:	ed93 7b00 	vldr	d7, [r3]
 800862c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800862e:	2b00      	cmp	r3, #0
 8008630:	ed8d 7b00 	vstr	d7, [sp]
 8008634:	f280 80e5 	bge.w	8008802 <_dtoa_r+0x632>
 8008638:	9b03      	ldr	r3, [sp, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f300 80e1 	bgt.w	8008802 <_dtoa_r+0x632>
 8008640:	d10c      	bne.n	800865c <_dtoa_r+0x48c>
 8008642:	4b48      	ldr	r3, [pc, #288]	@ (8008764 <_dtoa_r+0x594>)
 8008644:	2200      	movs	r2, #0
 8008646:	ec51 0b17 	vmov	r0, r1, d7
 800864a:	f7f7 ffdd 	bl	8000608 <__aeabi_dmul>
 800864e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008652:	f7f8 fa5f 	bl	8000b14 <__aeabi_dcmpge>
 8008656:	2800      	cmp	r0, #0
 8008658:	f000 8266 	beq.w	8008b28 <_dtoa_r+0x958>
 800865c:	2400      	movs	r4, #0
 800865e:	4625      	mov	r5, r4
 8008660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008662:	4656      	mov	r6, sl
 8008664:	ea6f 0803 	mvn.w	r8, r3
 8008668:	2700      	movs	r7, #0
 800866a:	4621      	mov	r1, r4
 800866c:	4648      	mov	r0, r9
 800866e:	f000 fcbf 	bl	8008ff0 <_Bfree>
 8008672:	2d00      	cmp	r5, #0
 8008674:	f000 80bd 	beq.w	80087f2 <_dtoa_r+0x622>
 8008678:	b12f      	cbz	r7, 8008686 <_dtoa_r+0x4b6>
 800867a:	42af      	cmp	r7, r5
 800867c:	d003      	beq.n	8008686 <_dtoa_r+0x4b6>
 800867e:	4639      	mov	r1, r7
 8008680:	4648      	mov	r0, r9
 8008682:	f000 fcb5 	bl	8008ff0 <_Bfree>
 8008686:	4629      	mov	r1, r5
 8008688:	4648      	mov	r0, r9
 800868a:	f000 fcb1 	bl	8008ff0 <_Bfree>
 800868e:	e0b0      	b.n	80087f2 <_dtoa_r+0x622>
 8008690:	07e2      	lsls	r2, r4, #31
 8008692:	d505      	bpl.n	80086a0 <_dtoa_r+0x4d0>
 8008694:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008698:	f7f7 ffb6 	bl	8000608 <__aeabi_dmul>
 800869c:	3601      	adds	r6, #1
 800869e:	2301      	movs	r3, #1
 80086a0:	1064      	asrs	r4, r4, #1
 80086a2:	3508      	adds	r5, #8
 80086a4:	e762      	b.n	800856c <_dtoa_r+0x39c>
 80086a6:	2602      	movs	r6, #2
 80086a8:	e765      	b.n	8008576 <_dtoa_r+0x3a6>
 80086aa:	9c03      	ldr	r4, [sp, #12]
 80086ac:	46b8      	mov	r8, r7
 80086ae:	e784      	b.n	80085ba <_dtoa_r+0x3ea>
 80086b0:	4b27      	ldr	r3, [pc, #156]	@ (8008750 <_dtoa_r+0x580>)
 80086b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086bc:	4454      	add	r4, sl
 80086be:	2900      	cmp	r1, #0
 80086c0:	d054      	beq.n	800876c <_dtoa_r+0x59c>
 80086c2:	4929      	ldr	r1, [pc, #164]	@ (8008768 <_dtoa_r+0x598>)
 80086c4:	2000      	movs	r0, #0
 80086c6:	f7f8 f8c9 	bl	800085c <__aeabi_ddiv>
 80086ca:	4633      	mov	r3, r6
 80086cc:	462a      	mov	r2, r5
 80086ce:	f7f7 fde3 	bl	8000298 <__aeabi_dsub>
 80086d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086d6:	4656      	mov	r6, sl
 80086d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086dc:	f7f8 fa44 	bl	8000b68 <__aeabi_d2iz>
 80086e0:	4605      	mov	r5, r0
 80086e2:	f7f7 ff27 	bl	8000534 <__aeabi_i2d>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ee:	f7f7 fdd3 	bl	8000298 <__aeabi_dsub>
 80086f2:	3530      	adds	r5, #48	@ 0x30
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086fc:	f806 5b01 	strb.w	r5, [r6], #1
 8008700:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008704:	f7f8 f9f2 	bl	8000aec <__aeabi_dcmplt>
 8008708:	2800      	cmp	r0, #0
 800870a:	d172      	bne.n	80087f2 <_dtoa_r+0x622>
 800870c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008710:	4911      	ldr	r1, [pc, #68]	@ (8008758 <_dtoa_r+0x588>)
 8008712:	2000      	movs	r0, #0
 8008714:	f7f7 fdc0 	bl	8000298 <__aeabi_dsub>
 8008718:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800871c:	f7f8 f9e6 	bl	8000aec <__aeabi_dcmplt>
 8008720:	2800      	cmp	r0, #0
 8008722:	f040 80b4 	bne.w	800888e <_dtoa_r+0x6be>
 8008726:	42a6      	cmp	r6, r4
 8008728:	f43f af70 	beq.w	800860c <_dtoa_r+0x43c>
 800872c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008730:	4b0a      	ldr	r3, [pc, #40]	@ (800875c <_dtoa_r+0x58c>)
 8008732:	2200      	movs	r2, #0
 8008734:	f7f7 ff68 	bl	8000608 <__aeabi_dmul>
 8008738:	4b08      	ldr	r3, [pc, #32]	@ (800875c <_dtoa_r+0x58c>)
 800873a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800873e:	2200      	movs	r2, #0
 8008740:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008744:	f7f7 ff60 	bl	8000608 <__aeabi_dmul>
 8008748:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800874c:	e7c4      	b.n	80086d8 <_dtoa_r+0x508>
 800874e:	bf00      	nop
 8008750:	0800bc98 	.word	0x0800bc98
 8008754:	0800bc70 	.word	0x0800bc70
 8008758:	3ff00000 	.word	0x3ff00000
 800875c:	40240000 	.word	0x40240000
 8008760:	401c0000 	.word	0x401c0000
 8008764:	40140000 	.word	0x40140000
 8008768:	3fe00000 	.word	0x3fe00000
 800876c:	4631      	mov	r1, r6
 800876e:	4628      	mov	r0, r5
 8008770:	f7f7 ff4a 	bl	8000608 <__aeabi_dmul>
 8008774:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008778:	9413      	str	r4, [sp, #76]	@ 0x4c
 800877a:	4656      	mov	r6, sl
 800877c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008780:	f7f8 f9f2 	bl	8000b68 <__aeabi_d2iz>
 8008784:	4605      	mov	r5, r0
 8008786:	f7f7 fed5 	bl	8000534 <__aeabi_i2d>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008792:	f7f7 fd81 	bl	8000298 <__aeabi_dsub>
 8008796:	3530      	adds	r5, #48	@ 0x30
 8008798:	f806 5b01 	strb.w	r5, [r6], #1
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	42a6      	cmp	r6, r4
 80087a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087a6:	f04f 0200 	mov.w	r2, #0
 80087aa:	d124      	bne.n	80087f6 <_dtoa_r+0x626>
 80087ac:	4baf      	ldr	r3, [pc, #700]	@ (8008a6c <_dtoa_r+0x89c>)
 80087ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80087b2:	f7f7 fd73 	bl	800029c <__adddf3>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087be:	f7f8 f9b3 	bl	8000b28 <__aeabi_dcmpgt>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d163      	bne.n	800888e <_dtoa_r+0x6be>
 80087c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80087ca:	49a8      	ldr	r1, [pc, #672]	@ (8008a6c <_dtoa_r+0x89c>)
 80087cc:	2000      	movs	r0, #0
 80087ce:	f7f7 fd63 	bl	8000298 <__aeabi_dsub>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087da:	f7f8 f987 	bl	8000aec <__aeabi_dcmplt>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f43f af14 	beq.w	800860c <_dtoa_r+0x43c>
 80087e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80087e6:	1e73      	subs	r3, r6, #1
 80087e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087ee:	2b30      	cmp	r3, #48	@ 0x30
 80087f0:	d0f8      	beq.n	80087e4 <_dtoa_r+0x614>
 80087f2:	4647      	mov	r7, r8
 80087f4:	e03b      	b.n	800886e <_dtoa_r+0x69e>
 80087f6:	4b9e      	ldr	r3, [pc, #632]	@ (8008a70 <_dtoa_r+0x8a0>)
 80087f8:	f7f7 ff06 	bl	8000608 <__aeabi_dmul>
 80087fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008800:	e7bc      	b.n	800877c <_dtoa_r+0x5ac>
 8008802:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008806:	4656      	mov	r6, sl
 8008808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800880c:	4620      	mov	r0, r4
 800880e:	4629      	mov	r1, r5
 8008810:	f7f8 f824 	bl	800085c <__aeabi_ddiv>
 8008814:	f7f8 f9a8 	bl	8000b68 <__aeabi_d2iz>
 8008818:	4680      	mov	r8, r0
 800881a:	f7f7 fe8b 	bl	8000534 <__aeabi_i2d>
 800881e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008822:	f7f7 fef1 	bl	8000608 <__aeabi_dmul>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008832:	f7f7 fd31 	bl	8000298 <__aeabi_dsub>
 8008836:	f806 4b01 	strb.w	r4, [r6], #1
 800883a:	9d03      	ldr	r5, [sp, #12]
 800883c:	eba6 040a 	sub.w	r4, r6, sl
 8008840:	42a5      	cmp	r5, r4
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	d133      	bne.n	80088b0 <_dtoa_r+0x6e0>
 8008848:	f7f7 fd28 	bl	800029c <__adddf3>
 800884c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008850:	4604      	mov	r4, r0
 8008852:	460d      	mov	r5, r1
 8008854:	f7f8 f968 	bl	8000b28 <__aeabi_dcmpgt>
 8008858:	b9c0      	cbnz	r0, 800888c <_dtoa_r+0x6bc>
 800885a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800885e:	4620      	mov	r0, r4
 8008860:	4629      	mov	r1, r5
 8008862:	f7f8 f939 	bl	8000ad8 <__aeabi_dcmpeq>
 8008866:	b110      	cbz	r0, 800886e <_dtoa_r+0x69e>
 8008868:	f018 0f01 	tst.w	r8, #1
 800886c:	d10e      	bne.n	800888c <_dtoa_r+0x6bc>
 800886e:	9902      	ldr	r1, [sp, #8]
 8008870:	4648      	mov	r0, r9
 8008872:	f000 fbbd 	bl	8008ff0 <_Bfree>
 8008876:	2300      	movs	r3, #0
 8008878:	7033      	strb	r3, [r6, #0]
 800887a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800887c:	3701      	adds	r7, #1
 800887e:	601f      	str	r7, [r3, #0]
 8008880:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 824b 	beq.w	8008d1e <_dtoa_r+0xb4e>
 8008888:	601e      	str	r6, [r3, #0]
 800888a:	e248      	b.n	8008d1e <_dtoa_r+0xb4e>
 800888c:	46b8      	mov	r8, r7
 800888e:	4633      	mov	r3, r6
 8008890:	461e      	mov	r6, r3
 8008892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008896:	2a39      	cmp	r2, #57	@ 0x39
 8008898:	d106      	bne.n	80088a8 <_dtoa_r+0x6d8>
 800889a:	459a      	cmp	sl, r3
 800889c:	d1f8      	bne.n	8008890 <_dtoa_r+0x6c0>
 800889e:	2230      	movs	r2, #48	@ 0x30
 80088a0:	f108 0801 	add.w	r8, r8, #1
 80088a4:	f88a 2000 	strb.w	r2, [sl]
 80088a8:	781a      	ldrb	r2, [r3, #0]
 80088aa:	3201      	adds	r2, #1
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	e7a0      	b.n	80087f2 <_dtoa_r+0x622>
 80088b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008a70 <_dtoa_r+0x8a0>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	f7f7 fea8 	bl	8000608 <__aeabi_dmul>
 80088b8:	2200      	movs	r2, #0
 80088ba:	2300      	movs	r3, #0
 80088bc:	4604      	mov	r4, r0
 80088be:	460d      	mov	r5, r1
 80088c0:	f7f8 f90a 	bl	8000ad8 <__aeabi_dcmpeq>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d09f      	beq.n	8008808 <_dtoa_r+0x638>
 80088c8:	e7d1      	b.n	800886e <_dtoa_r+0x69e>
 80088ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	f000 80ea 	beq.w	8008aa6 <_dtoa_r+0x8d6>
 80088d2:	9a07      	ldr	r2, [sp, #28]
 80088d4:	2a01      	cmp	r2, #1
 80088d6:	f300 80cd 	bgt.w	8008a74 <_dtoa_r+0x8a4>
 80088da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80088dc:	2a00      	cmp	r2, #0
 80088de:	f000 80c1 	beq.w	8008a64 <_dtoa_r+0x894>
 80088e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80088e6:	9c08      	ldr	r4, [sp, #32]
 80088e8:	9e00      	ldr	r6, [sp, #0]
 80088ea:	9a00      	ldr	r2, [sp, #0]
 80088ec:	441a      	add	r2, r3
 80088ee:	9200      	str	r2, [sp, #0]
 80088f0:	9a06      	ldr	r2, [sp, #24]
 80088f2:	2101      	movs	r1, #1
 80088f4:	441a      	add	r2, r3
 80088f6:	4648      	mov	r0, r9
 80088f8:	9206      	str	r2, [sp, #24]
 80088fa:	f000 fc2d 	bl	8009158 <__i2b>
 80088fe:	4605      	mov	r5, r0
 8008900:	b166      	cbz	r6, 800891c <_dtoa_r+0x74c>
 8008902:	9b06      	ldr	r3, [sp, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	dd09      	ble.n	800891c <_dtoa_r+0x74c>
 8008908:	42b3      	cmp	r3, r6
 800890a:	9a00      	ldr	r2, [sp, #0]
 800890c:	bfa8      	it	ge
 800890e:	4633      	movge	r3, r6
 8008910:	1ad2      	subs	r2, r2, r3
 8008912:	9200      	str	r2, [sp, #0]
 8008914:	9a06      	ldr	r2, [sp, #24]
 8008916:	1af6      	subs	r6, r6, r3
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	9306      	str	r3, [sp, #24]
 800891c:	9b08      	ldr	r3, [sp, #32]
 800891e:	b30b      	cbz	r3, 8008964 <_dtoa_r+0x794>
 8008920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 80c6 	beq.w	8008ab4 <_dtoa_r+0x8e4>
 8008928:	2c00      	cmp	r4, #0
 800892a:	f000 80c0 	beq.w	8008aae <_dtoa_r+0x8de>
 800892e:	4629      	mov	r1, r5
 8008930:	4622      	mov	r2, r4
 8008932:	4648      	mov	r0, r9
 8008934:	f000 fcc8 	bl	80092c8 <__pow5mult>
 8008938:	9a02      	ldr	r2, [sp, #8]
 800893a:	4601      	mov	r1, r0
 800893c:	4605      	mov	r5, r0
 800893e:	4648      	mov	r0, r9
 8008940:	f000 fc20 	bl	8009184 <__multiply>
 8008944:	9902      	ldr	r1, [sp, #8]
 8008946:	4680      	mov	r8, r0
 8008948:	4648      	mov	r0, r9
 800894a:	f000 fb51 	bl	8008ff0 <_Bfree>
 800894e:	9b08      	ldr	r3, [sp, #32]
 8008950:	1b1b      	subs	r3, r3, r4
 8008952:	9308      	str	r3, [sp, #32]
 8008954:	f000 80b1 	beq.w	8008aba <_dtoa_r+0x8ea>
 8008958:	9a08      	ldr	r2, [sp, #32]
 800895a:	4641      	mov	r1, r8
 800895c:	4648      	mov	r0, r9
 800895e:	f000 fcb3 	bl	80092c8 <__pow5mult>
 8008962:	9002      	str	r0, [sp, #8]
 8008964:	2101      	movs	r1, #1
 8008966:	4648      	mov	r0, r9
 8008968:	f000 fbf6 	bl	8009158 <__i2b>
 800896c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800896e:	4604      	mov	r4, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 81d8 	beq.w	8008d26 <_dtoa_r+0xb56>
 8008976:	461a      	mov	r2, r3
 8008978:	4601      	mov	r1, r0
 800897a:	4648      	mov	r0, r9
 800897c:	f000 fca4 	bl	80092c8 <__pow5mult>
 8008980:	9b07      	ldr	r3, [sp, #28]
 8008982:	2b01      	cmp	r3, #1
 8008984:	4604      	mov	r4, r0
 8008986:	f300 809f 	bgt.w	8008ac8 <_dtoa_r+0x8f8>
 800898a:	9b04      	ldr	r3, [sp, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f040 8097 	bne.w	8008ac0 <_dtoa_r+0x8f0>
 8008992:	9b05      	ldr	r3, [sp, #20]
 8008994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008998:	2b00      	cmp	r3, #0
 800899a:	f040 8093 	bne.w	8008ac4 <_dtoa_r+0x8f4>
 800899e:	9b05      	ldr	r3, [sp, #20]
 80089a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089a4:	0d1b      	lsrs	r3, r3, #20
 80089a6:	051b      	lsls	r3, r3, #20
 80089a8:	b133      	cbz	r3, 80089b8 <_dtoa_r+0x7e8>
 80089aa:	9b00      	ldr	r3, [sp, #0]
 80089ac:	3301      	adds	r3, #1
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	9b06      	ldr	r3, [sp, #24]
 80089b2:	3301      	adds	r3, #1
 80089b4:	9306      	str	r3, [sp, #24]
 80089b6:	2301      	movs	r3, #1
 80089b8:	9308      	str	r3, [sp, #32]
 80089ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 81b8 	beq.w	8008d32 <_dtoa_r+0xb62>
 80089c2:	6923      	ldr	r3, [r4, #16]
 80089c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089c8:	6918      	ldr	r0, [r3, #16]
 80089ca:	f000 fb79 	bl	80090c0 <__hi0bits>
 80089ce:	f1c0 0020 	rsb	r0, r0, #32
 80089d2:	9b06      	ldr	r3, [sp, #24]
 80089d4:	4418      	add	r0, r3
 80089d6:	f010 001f 	ands.w	r0, r0, #31
 80089da:	f000 8082 	beq.w	8008ae2 <_dtoa_r+0x912>
 80089de:	f1c0 0320 	rsb	r3, r0, #32
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	dd73      	ble.n	8008ace <_dtoa_r+0x8fe>
 80089e6:	9b00      	ldr	r3, [sp, #0]
 80089e8:	f1c0 001c 	rsb	r0, r0, #28
 80089ec:	4403      	add	r3, r0
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	9b06      	ldr	r3, [sp, #24]
 80089f2:	4403      	add	r3, r0
 80089f4:	4406      	add	r6, r0
 80089f6:	9306      	str	r3, [sp, #24]
 80089f8:	9b00      	ldr	r3, [sp, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	dd05      	ble.n	8008a0a <_dtoa_r+0x83a>
 80089fe:	9902      	ldr	r1, [sp, #8]
 8008a00:	461a      	mov	r2, r3
 8008a02:	4648      	mov	r0, r9
 8008a04:	f000 fcba 	bl	800937c <__lshift>
 8008a08:	9002      	str	r0, [sp, #8]
 8008a0a:	9b06      	ldr	r3, [sp, #24]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	dd05      	ble.n	8008a1c <_dtoa_r+0x84c>
 8008a10:	4621      	mov	r1, r4
 8008a12:	461a      	mov	r2, r3
 8008a14:	4648      	mov	r0, r9
 8008a16:	f000 fcb1 	bl	800937c <__lshift>
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d061      	beq.n	8008ae6 <_dtoa_r+0x916>
 8008a22:	9802      	ldr	r0, [sp, #8]
 8008a24:	4621      	mov	r1, r4
 8008a26:	f000 fd15 	bl	8009454 <__mcmp>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	da5b      	bge.n	8008ae6 <_dtoa_r+0x916>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	9902      	ldr	r1, [sp, #8]
 8008a32:	220a      	movs	r2, #10
 8008a34:	4648      	mov	r0, r9
 8008a36:	f000 fafd 	bl	8009034 <__multadd>
 8008a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a3c:	9002      	str	r0, [sp, #8]
 8008a3e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8177 	beq.w	8008d36 <_dtoa_r+0xb66>
 8008a48:	4629      	mov	r1, r5
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	4648      	mov	r0, r9
 8008a50:	f000 faf0 	bl	8009034 <__multadd>
 8008a54:	f1bb 0f00 	cmp.w	fp, #0
 8008a58:	4605      	mov	r5, r0
 8008a5a:	dc6f      	bgt.n	8008b3c <_dtoa_r+0x96c>
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	dc49      	bgt.n	8008af6 <_dtoa_r+0x926>
 8008a62:	e06b      	b.n	8008b3c <_dtoa_r+0x96c>
 8008a64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008a66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a6a:	e73c      	b.n	80088e6 <_dtoa_r+0x716>
 8008a6c:	3fe00000 	.word	0x3fe00000
 8008a70:	40240000 	.word	0x40240000
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	1e5c      	subs	r4, r3, #1
 8008a78:	9b08      	ldr	r3, [sp, #32]
 8008a7a:	42a3      	cmp	r3, r4
 8008a7c:	db09      	blt.n	8008a92 <_dtoa_r+0x8c2>
 8008a7e:	1b1c      	subs	r4, r3, r4
 8008a80:	9b03      	ldr	r3, [sp, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f6bf af30 	bge.w	80088e8 <_dtoa_r+0x718>
 8008a88:	9b00      	ldr	r3, [sp, #0]
 8008a8a:	9a03      	ldr	r2, [sp, #12]
 8008a8c:	1a9e      	subs	r6, r3, r2
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e72b      	b.n	80088ea <_dtoa_r+0x71a>
 8008a92:	9b08      	ldr	r3, [sp, #32]
 8008a94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a96:	9408      	str	r4, [sp, #32]
 8008a98:	1ae3      	subs	r3, r4, r3
 8008a9a:	441a      	add	r2, r3
 8008a9c:	9e00      	ldr	r6, [sp, #0]
 8008a9e:	9b03      	ldr	r3, [sp, #12]
 8008aa0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008aa2:	2400      	movs	r4, #0
 8008aa4:	e721      	b.n	80088ea <_dtoa_r+0x71a>
 8008aa6:	9c08      	ldr	r4, [sp, #32]
 8008aa8:	9e00      	ldr	r6, [sp, #0]
 8008aaa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008aac:	e728      	b.n	8008900 <_dtoa_r+0x730>
 8008aae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008ab2:	e751      	b.n	8008958 <_dtoa_r+0x788>
 8008ab4:	9a08      	ldr	r2, [sp, #32]
 8008ab6:	9902      	ldr	r1, [sp, #8]
 8008ab8:	e750      	b.n	800895c <_dtoa_r+0x78c>
 8008aba:	f8cd 8008 	str.w	r8, [sp, #8]
 8008abe:	e751      	b.n	8008964 <_dtoa_r+0x794>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	e779      	b.n	80089b8 <_dtoa_r+0x7e8>
 8008ac4:	9b04      	ldr	r3, [sp, #16]
 8008ac6:	e777      	b.n	80089b8 <_dtoa_r+0x7e8>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9308      	str	r3, [sp, #32]
 8008acc:	e779      	b.n	80089c2 <_dtoa_r+0x7f2>
 8008ace:	d093      	beq.n	80089f8 <_dtoa_r+0x828>
 8008ad0:	9a00      	ldr	r2, [sp, #0]
 8008ad2:	331c      	adds	r3, #28
 8008ad4:	441a      	add	r2, r3
 8008ad6:	9200      	str	r2, [sp, #0]
 8008ad8:	9a06      	ldr	r2, [sp, #24]
 8008ada:	441a      	add	r2, r3
 8008adc:	441e      	add	r6, r3
 8008ade:	9206      	str	r2, [sp, #24]
 8008ae0:	e78a      	b.n	80089f8 <_dtoa_r+0x828>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	e7f4      	b.n	8008ad0 <_dtoa_r+0x900>
 8008ae6:	9b03      	ldr	r3, [sp, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	46b8      	mov	r8, r7
 8008aec:	dc20      	bgt.n	8008b30 <_dtoa_r+0x960>
 8008aee:	469b      	mov	fp, r3
 8008af0:	9b07      	ldr	r3, [sp, #28]
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	dd1e      	ble.n	8008b34 <_dtoa_r+0x964>
 8008af6:	f1bb 0f00 	cmp.w	fp, #0
 8008afa:	f47f adb1 	bne.w	8008660 <_dtoa_r+0x490>
 8008afe:	4621      	mov	r1, r4
 8008b00:	465b      	mov	r3, fp
 8008b02:	2205      	movs	r2, #5
 8008b04:	4648      	mov	r0, r9
 8008b06:	f000 fa95 	bl	8009034 <__multadd>
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	9802      	ldr	r0, [sp, #8]
 8008b10:	f000 fca0 	bl	8009454 <__mcmp>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	f77f ada3 	ble.w	8008660 <_dtoa_r+0x490>
 8008b1a:	4656      	mov	r6, sl
 8008b1c:	2331      	movs	r3, #49	@ 0x31
 8008b1e:	f806 3b01 	strb.w	r3, [r6], #1
 8008b22:	f108 0801 	add.w	r8, r8, #1
 8008b26:	e59f      	b.n	8008668 <_dtoa_r+0x498>
 8008b28:	9c03      	ldr	r4, [sp, #12]
 8008b2a:	46b8      	mov	r8, r7
 8008b2c:	4625      	mov	r5, r4
 8008b2e:	e7f4      	b.n	8008b1a <_dtoa_r+0x94a>
 8008b30:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 8101 	beq.w	8008d3e <_dtoa_r+0xb6e>
 8008b3c:	2e00      	cmp	r6, #0
 8008b3e:	dd05      	ble.n	8008b4c <_dtoa_r+0x97c>
 8008b40:	4629      	mov	r1, r5
 8008b42:	4632      	mov	r2, r6
 8008b44:	4648      	mov	r0, r9
 8008b46:	f000 fc19 	bl	800937c <__lshift>
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	9b08      	ldr	r3, [sp, #32]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d05c      	beq.n	8008c0c <_dtoa_r+0xa3c>
 8008b52:	6869      	ldr	r1, [r5, #4]
 8008b54:	4648      	mov	r0, r9
 8008b56:	f000 fa0b 	bl	8008f70 <_Balloc>
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	b928      	cbnz	r0, 8008b6a <_dtoa_r+0x99a>
 8008b5e:	4b82      	ldr	r3, [pc, #520]	@ (8008d68 <_dtoa_r+0xb98>)
 8008b60:	4602      	mov	r2, r0
 8008b62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b66:	f7ff bb4a 	b.w	80081fe <_dtoa_r+0x2e>
 8008b6a:	692a      	ldr	r2, [r5, #16]
 8008b6c:	3202      	adds	r2, #2
 8008b6e:	0092      	lsls	r2, r2, #2
 8008b70:	f105 010c 	add.w	r1, r5, #12
 8008b74:	300c      	adds	r0, #12
 8008b76:	f7ff fa92 	bl	800809e <memcpy>
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4648      	mov	r0, r9
 8008b80:	f000 fbfc 	bl	800937c <__lshift>
 8008b84:	f10a 0301 	add.w	r3, sl, #1
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	eb0a 030b 	add.w	r3, sl, fp
 8008b8e:	9308      	str	r3, [sp, #32]
 8008b90:	9b04      	ldr	r3, [sp, #16]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	462f      	mov	r7, r5
 8008b98:	9306      	str	r3, [sp, #24]
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	9b00      	ldr	r3, [sp, #0]
 8008b9e:	9802      	ldr	r0, [sp, #8]
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ba6:	f7ff fa88 	bl	80080ba <quorem>
 8008baa:	4603      	mov	r3, r0
 8008bac:	3330      	adds	r3, #48	@ 0x30
 8008bae:	9003      	str	r0, [sp, #12]
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	9802      	ldr	r0, [sp, #8]
 8008bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bb6:	f000 fc4d 	bl	8009454 <__mcmp>
 8008bba:	462a      	mov	r2, r5
 8008bbc:	9004      	str	r0, [sp, #16]
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4648      	mov	r0, r9
 8008bc2:	f000 fc63 	bl	800948c <__mdiff>
 8008bc6:	68c2      	ldr	r2, [r0, #12]
 8008bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bca:	4606      	mov	r6, r0
 8008bcc:	bb02      	cbnz	r2, 8008c10 <_dtoa_r+0xa40>
 8008bce:	4601      	mov	r1, r0
 8008bd0:	9802      	ldr	r0, [sp, #8]
 8008bd2:	f000 fc3f 	bl	8009454 <__mcmp>
 8008bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd8:	4602      	mov	r2, r0
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4648      	mov	r0, r9
 8008bde:	920c      	str	r2, [sp, #48]	@ 0x30
 8008be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008be2:	f000 fa05 	bl	8008ff0 <_Bfree>
 8008be6:	9b07      	ldr	r3, [sp, #28]
 8008be8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008bea:	9e00      	ldr	r6, [sp, #0]
 8008bec:	ea42 0103 	orr.w	r1, r2, r3
 8008bf0:	9b06      	ldr	r3, [sp, #24]
 8008bf2:	4319      	orrs	r1, r3
 8008bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf6:	d10d      	bne.n	8008c14 <_dtoa_r+0xa44>
 8008bf8:	2b39      	cmp	r3, #57	@ 0x39
 8008bfa:	d027      	beq.n	8008c4c <_dtoa_r+0xa7c>
 8008bfc:	9a04      	ldr	r2, [sp, #16]
 8008bfe:	2a00      	cmp	r2, #0
 8008c00:	dd01      	ble.n	8008c06 <_dtoa_r+0xa36>
 8008c02:	9b03      	ldr	r3, [sp, #12]
 8008c04:	3331      	adds	r3, #49	@ 0x31
 8008c06:	f88b 3000 	strb.w	r3, [fp]
 8008c0a:	e52e      	b.n	800866a <_dtoa_r+0x49a>
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	e7b9      	b.n	8008b84 <_dtoa_r+0x9b4>
 8008c10:	2201      	movs	r2, #1
 8008c12:	e7e2      	b.n	8008bda <_dtoa_r+0xa0a>
 8008c14:	9904      	ldr	r1, [sp, #16]
 8008c16:	2900      	cmp	r1, #0
 8008c18:	db04      	blt.n	8008c24 <_dtoa_r+0xa54>
 8008c1a:	9807      	ldr	r0, [sp, #28]
 8008c1c:	4301      	orrs	r1, r0
 8008c1e:	9806      	ldr	r0, [sp, #24]
 8008c20:	4301      	orrs	r1, r0
 8008c22:	d120      	bne.n	8008c66 <_dtoa_r+0xa96>
 8008c24:	2a00      	cmp	r2, #0
 8008c26:	ddee      	ble.n	8008c06 <_dtoa_r+0xa36>
 8008c28:	9902      	ldr	r1, [sp, #8]
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	4648      	mov	r0, r9
 8008c30:	f000 fba4 	bl	800937c <__lshift>
 8008c34:	4621      	mov	r1, r4
 8008c36:	9002      	str	r0, [sp, #8]
 8008c38:	f000 fc0c 	bl	8009454 <__mcmp>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	9b00      	ldr	r3, [sp, #0]
 8008c40:	dc02      	bgt.n	8008c48 <_dtoa_r+0xa78>
 8008c42:	d1e0      	bne.n	8008c06 <_dtoa_r+0xa36>
 8008c44:	07da      	lsls	r2, r3, #31
 8008c46:	d5de      	bpl.n	8008c06 <_dtoa_r+0xa36>
 8008c48:	2b39      	cmp	r3, #57	@ 0x39
 8008c4a:	d1da      	bne.n	8008c02 <_dtoa_r+0xa32>
 8008c4c:	2339      	movs	r3, #57	@ 0x39
 8008c4e:	f88b 3000 	strb.w	r3, [fp]
 8008c52:	4633      	mov	r3, r6
 8008c54:	461e      	mov	r6, r3
 8008c56:	3b01      	subs	r3, #1
 8008c58:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c5c:	2a39      	cmp	r2, #57	@ 0x39
 8008c5e:	d04e      	beq.n	8008cfe <_dtoa_r+0xb2e>
 8008c60:	3201      	adds	r2, #1
 8008c62:	701a      	strb	r2, [r3, #0]
 8008c64:	e501      	b.n	800866a <_dtoa_r+0x49a>
 8008c66:	2a00      	cmp	r2, #0
 8008c68:	dd03      	ble.n	8008c72 <_dtoa_r+0xaa2>
 8008c6a:	2b39      	cmp	r3, #57	@ 0x39
 8008c6c:	d0ee      	beq.n	8008c4c <_dtoa_r+0xa7c>
 8008c6e:	3301      	adds	r3, #1
 8008c70:	e7c9      	b.n	8008c06 <_dtoa_r+0xa36>
 8008c72:	9a00      	ldr	r2, [sp, #0]
 8008c74:	9908      	ldr	r1, [sp, #32]
 8008c76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c7a:	428a      	cmp	r2, r1
 8008c7c:	d028      	beq.n	8008cd0 <_dtoa_r+0xb00>
 8008c7e:	9902      	ldr	r1, [sp, #8]
 8008c80:	2300      	movs	r3, #0
 8008c82:	220a      	movs	r2, #10
 8008c84:	4648      	mov	r0, r9
 8008c86:	f000 f9d5 	bl	8009034 <__multadd>
 8008c8a:	42af      	cmp	r7, r5
 8008c8c:	9002      	str	r0, [sp, #8]
 8008c8e:	f04f 0300 	mov.w	r3, #0
 8008c92:	f04f 020a 	mov.w	r2, #10
 8008c96:	4639      	mov	r1, r7
 8008c98:	4648      	mov	r0, r9
 8008c9a:	d107      	bne.n	8008cac <_dtoa_r+0xadc>
 8008c9c:	f000 f9ca 	bl	8009034 <__multadd>
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	9b00      	ldr	r3, [sp, #0]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	e777      	b.n	8008b9c <_dtoa_r+0x9cc>
 8008cac:	f000 f9c2 	bl	8009034 <__multadd>
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	220a      	movs	r2, #10
 8008cb8:	4648      	mov	r0, r9
 8008cba:	f000 f9bb 	bl	8009034 <__multadd>
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	e7f0      	b.n	8008ca4 <_dtoa_r+0xad4>
 8008cc2:	f1bb 0f00 	cmp.w	fp, #0
 8008cc6:	bfcc      	ite	gt
 8008cc8:	465e      	movgt	r6, fp
 8008cca:	2601      	movle	r6, #1
 8008ccc:	4456      	add	r6, sl
 8008cce:	2700      	movs	r7, #0
 8008cd0:	9902      	ldr	r1, [sp, #8]
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	4648      	mov	r0, r9
 8008cd8:	f000 fb50 	bl	800937c <__lshift>
 8008cdc:	4621      	mov	r1, r4
 8008cde:	9002      	str	r0, [sp, #8]
 8008ce0:	f000 fbb8 	bl	8009454 <__mcmp>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	dcb4      	bgt.n	8008c52 <_dtoa_r+0xa82>
 8008ce8:	d102      	bne.n	8008cf0 <_dtoa_r+0xb20>
 8008cea:	9b00      	ldr	r3, [sp, #0]
 8008cec:	07db      	lsls	r3, r3, #31
 8008cee:	d4b0      	bmi.n	8008c52 <_dtoa_r+0xa82>
 8008cf0:	4633      	mov	r3, r6
 8008cf2:	461e      	mov	r6, r3
 8008cf4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cf8:	2a30      	cmp	r2, #48	@ 0x30
 8008cfa:	d0fa      	beq.n	8008cf2 <_dtoa_r+0xb22>
 8008cfc:	e4b5      	b.n	800866a <_dtoa_r+0x49a>
 8008cfe:	459a      	cmp	sl, r3
 8008d00:	d1a8      	bne.n	8008c54 <_dtoa_r+0xa84>
 8008d02:	2331      	movs	r3, #49	@ 0x31
 8008d04:	f108 0801 	add.w	r8, r8, #1
 8008d08:	f88a 3000 	strb.w	r3, [sl]
 8008d0c:	e4ad      	b.n	800866a <_dtoa_r+0x49a>
 8008d0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d10:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008d6c <_dtoa_r+0xb9c>
 8008d14:	b11b      	cbz	r3, 8008d1e <_dtoa_r+0xb4e>
 8008d16:	f10a 0308 	add.w	r3, sl, #8
 8008d1a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	4650      	mov	r0, sl
 8008d20:	b017      	add	sp, #92	@ 0x5c
 8008d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d26:	9b07      	ldr	r3, [sp, #28]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	f77f ae2e 	ble.w	800898a <_dtoa_r+0x7ba>
 8008d2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d30:	9308      	str	r3, [sp, #32]
 8008d32:	2001      	movs	r0, #1
 8008d34:	e64d      	b.n	80089d2 <_dtoa_r+0x802>
 8008d36:	f1bb 0f00 	cmp.w	fp, #0
 8008d3a:	f77f aed9 	ble.w	8008af0 <_dtoa_r+0x920>
 8008d3e:	4656      	mov	r6, sl
 8008d40:	9802      	ldr	r0, [sp, #8]
 8008d42:	4621      	mov	r1, r4
 8008d44:	f7ff f9b9 	bl	80080ba <quorem>
 8008d48:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008d4c:	f806 3b01 	strb.w	r3, [r6], #1
 8008d50:	eba6 020a 	sub.w	r2, r6, sl
 8008d54:	4593      	cmp	fp, r2
 8008d56:	ddb4      	ble.n	8008cc2 <_dtoa_r+0xaf2>
 8008d58:	9902      	ldr	r1, [sp, #8]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	220a      	movs	r2, #10
 8008d5e:	4648      	mov	r0, r9
 8008d60:	f000 f968 	bl	8009034 <__multadd>
 8008d64:	9002      	str	r0, [sp, #8]
 8008d66:	e7eb      	b.n	8008d40 <_dtoa_r+0xb70>
 8008d68:	0800bb9c 	.word	0x0800bb9c
 8008d6c:	0800bb20 	.word	0x0800bb20

08008d70 <_free_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4605      	mov	r5, r0
 8008d74:	2900      	cmp	r1, #0
 8008d76:	d041      	beq.n	8008dfc <_free_r+0x8c>
 8008d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d7c:	1f0c      	subs	r4, r1, #4
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bfb8      	it	lt
 8008d82:	18e4      	addlt	r4, r4, r3
 8008d84:	f000 f8e8 	bl	8008f58 <__malloc_lock>
 8008d88:	4a1d      	ldr	r2, [pc, #116]	@ (8008e00 <_free_r+0x90>)
 8008d8a:	6813      	ldr	r3, [r2, #0]
 8008d8c:	b933      	cbnz	r3, 8008d9c <_free_r+0x2c>
 8008d8e:	6063      	str	r3, [r4, #4]
 8008d90:	6014      	str	r4, [r2, #0]
 8008d92:	4628      	mov	r0, r5
 8008d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d98:	f000 b8e4 	b.w	8008f64 <__malloc_unlock>
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	d908      	bls.n	8008db2 <_free_r+0x42>
 8008da0:	6820      	ldr	r0, [r4, #0]
 8008da2:	1821      	adds	r1, r4, r0
 8008da4:	428b      	cmp	r3, r1
 8008da6:	bf01      	itttt	eq
 8008da8:	6819      	ldreq	r1, [r3, #0]
 8008daa:	685b      	ldreq	r3, [r3, #4]
 8008dac:	1809      	addeq	r1, r1, r0
 8008dae:	6021      	streq	r1, [r4, #0]
 8008db0:	e7ed      	b.n	8008d8e <_free_r+0x1e>
 8008db2:	461a      	mov	r2, r3
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	b10b      	cbz	r3, 8008dbc <_free_r+0x4c>
 8008db8:	42a3      	cmp	r3, r4
 8008dba:	d9fa      	bls.n	8008db2 <_free_r+0x42>
 8008dbc:	6811      	ldr	r1, [r2, #0]
 8008dbe:	1850      	adds	r0, r2, r1
 8008dc0:	42a0      	cmp	r0, r4
 8008dc2:	d10b      	bne.n	8008ddc <_free_r+0x6c>
 8008dc4:	6820      	ldr	r0, [r4, #0]
 8008dc6:	4401      	add	r1, r0
 8008dc8:	1850      	adds	r0, r2, r1
 8008dca:	4283      	cmp	r3, r0
 8008dcc:	6011      	str	r1, [r2, #0]
 8008dce:	d1e0      	bne.n	8008d92 <_free_r+0x22>
 8008dd0:	6818      	ldr	r0, [r3, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	6053      	str	r3, [r2, #4]
 8008dd6:	4408      	add	r0, r1
 8008dd8:	6010      	str	r0, [r2, #0]
 8008dda:	e7da      	b.n	8008d92 <_free_r+0x22>
 8008ddc:	d902      	bls.n	8008de4 <_free_r+0x74>
 8008dde:	230c      	movs	r3, #12
 8008de0:	602b      	str	r3, [r5, #0]
 8008de2:	e7d6      	b.n	8008d92 <_free_r+0x22>
 8008de4:	6820      	ldr	r0, [r4, #0]
 8008de6:	1821      	adds	r1, r4, r0
 8008de8:	428b      	cmp	r3, r1
 8008dea:	bf04      	itt	eq
 8008dec:	6819      	ldreq	r1, [r3, #0]
 8008dee:	685b      	ldreq	r3, [r3, #4]
 8008df0:	6063      	str	r3, [r4, #4]
 8008df2:	bf04      	itt	eq
 8008df4:	1809      	addeq	r1, r1, r0
 8008df6:	6021      	streq	r1, [r4, #0]
 8008df8:	6054      	str	r4, [r2, #4]
 8008dfa:	e7ca      	b.n	8008d92 <_free_r+0x22>
 8008dfc:	bd38      	pop	{r3, r4, r5, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000960 	.word	0x20000960

08008e04 <malloc>:
 8008e04:	4b02      	ldr	r3, [pc, #8]	@ (8008e10 <malloc+0xc>)
 8008e06:	4601      	mov	r1, r0
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	f000 b825 	b.w	8008e58 <_malloc_r>
 8008e0e:	bf00      	nop
 8008e10:	20000028 	.word	0x20000028

08008e14 <sbrk_aligned>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4e0f      	ldr	r6, [pc, #60]	@ (8008e54 <sbrk_aligned+0x40>)
 8008e18:	460c      	mov	r4, r1
 8008e1a:	6831      	ldr	r1, [r6, #0]
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	b911      	cbnz	r1, 8008e26 <sbrk_aligned+0x12>
 8008e20:	f001 f814 	bl	8009e4c <_sbrk_r>
 8008e24:	6030      	str	r0, [r6, #0]
 8008e26:	4621      	mov	r1, r4
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f001 f80f 	bl	8009e4c <_sbrk_r>
 8008e2e:	1c43      	adds	r3, r0, #1
 8008e30:	d103      	bne.n	8008e3a <sbrk_aligned+0x26>
 8008e32:	f04f 34ff 	mov.w	r4, #4294967295
 8008e36:	4620      	mov	r0, r4
 8008e38:	bd70      	pop	{r4, r5, r6, pc}
 8008e3a:	1cc4      	adds	r4, r0, #3
 8008e3c:	f024 0403 	bic.w	r4, r4, #3
 8008e40:	42a0      	cmp	r0, r4
 8008e42:	d0f8      	beq.n	8008e36 <sbrk_aligned+0x22>
 8008e44:	1a21      	subs	r1, r4, r0
 8008e46:	4628      	mov	r0, r5
 8008e48:	f001 f800 	bl	8009e4c <_sbrk_r>
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d1f2      	bne.n	8008e36 <sbrk_aligned+0x22>
 8008e50:	e7ef      	b.n	8008e32 <sbrk_aligned+0x1e>
 8008e52:	bf00      	nop
 8008e54:	2000095c 	.word	0x2000095c

08008e58 <_malloc_r>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	1ccd      	adds	r5, r1, #3
 8008e5e:	f025 0503 	bic.w	r5, r5, #3
 8008e62:	3508      	adds	r5, #8
 8008e64:	2d0c      	cmp	r5, #12
 8008e66:	bf38      	it	cc
 8008e68:	250c      	movcc	r5, #12
 8008e6a:	2d00      	cmp	r5, #0
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	db01      	blt.n	8008e74 <_malloc_r+0x1c>
 8008e70:	42a9      	cmp	r1, r5
 8008e72:	d904      	bls.n	8008e7e <_malloc_r+0x26>
 8008e74:	230c      	movs	r3, #12
 8008e76:	6033      	str	r3, [r6, #0]
 8008e78:	2000      	movs	r0, #0
 8008e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f54 <_malloc_r+0xfc>
 8008e82:	f000 f869 	bl	8008f58 <__malloc_lock>
 8008e86:	f8d8 3000 	ldr.w	r3, [r8]
 8008e8a:	461c      	mov	r4, r3
 8008e8c:	bb44      	cbnz	r4, 8008ee0 <_malloc_r+0x88>
 8008e8e:	4629      	mov	r1, r5
 8008e90:	4630      	mov	r0, r6
 8008e92:	f7ff ffbf 	bl	8008e14 <sbrk_aligned>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	4604      	mov	r4, r0
 8008e9a:	d158      	bne.n	8008f4e <_malloc_r+0xf6>
 8008e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8008ea0:	4627      	mov	r7, r4
 8008ea2:	2f00      	cmp	r7, #0
 8008ea4:	d143      	bne.n	8008f2e <_malloc_r+0xd6>
 8008ea6:	2c00      	cmp	r4, #0
 8008ea8:	d04b      	beq.n	8008f42 <_malloc_r+0xea>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	4639      	mov	r1, r7
 8008eae:	4630      	mov	r0, r6
 8008eb0:	eb04 0903 	add.w	r9, r4, r3
 8008eb4:	f000 ffca 	bl	8009e4c <_sbrk_r>
 8008eb8:	4581      	cmp	r9, r0
 8008eba:	d142      	bne.n	8008f42 <_malloc_r+0xea>
 8008ebc:	6821      	ldr	r1, [r4, #0]
 8008ebe:	1a6d      	subs	r5, r5, r1
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7ff ffa6 	bl	8008e14 <sbrk_aligned>
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d03a      	beq.n	8008f42 <_malloc_r+0xea>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	442b      	add	r3, r5
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	bb62      	cbnz	r2, 8008f34 <_malloc_r+0xdc>
 8008eda:	f8c8 7000 	str.w	r7, [r8]
 8008ede:	e00f      	b.n	8008f00 <_malloc_r+0xa8>
 8008ee0:	6822      	ldr	r2, [r4, #0]
 8008ee2:	1b52      	subs	r2, r2, r5
 8008ee4:	d420      	bmi.n	8008f28 <_malloc_r+0xd0>
 8008ee6:	2a0b      	cmp	r2, #11
 8008ee8:	d917      	bls.n	8008f1a <_malloc_r+0xc2>
 8008eea:	1961      	adds	r1, r4, r5
 8008eec:	42a3      	cmp	r3, r4
 8008eee:	6025      	str	r5, [r4, #0]
 8008ef0:	bf18      	it	ne
 8008ef2:	6059      	strne	r1, [r3, #4]
 8008ef4:	6863      	ldr	r3, [r4, #4]
 8008ef6:	bf08      	it	eq
 8008ef8:	f8c8 1000 	streq.w	r1, [r8]
 8008efc:	5162      	str	r2, [r4, r5]
 8008efe:	604b      	str	r3, [r1, #4]
 8008f00:	4630      	mov	r0, r6
 8008f02:	f000 f82f 	bl	8008f64 <__malloc_unlock>
 8008f06:	f104 000b 	add.w	r0, r4, #11
 8008f0a:	1d23      	adds	r3, r4, #4
 8008f0c:	f020 0007 	bic.w	r0, r0, #7
 8008f10:	1ac2      	subs	r2, r0, r3
 8008f12:	bf1c      	itt	ne
 8008f14:	1a1b      	subne	r3, r3, r0
 8008f16:	50a3      	strne	r3, [r4, r2]
 8008f18:	e7af      	b.n	8008e7a <_malloc_r+0x22>
 8008f1a:	6862      	ldr	r2, [r4, #4]
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	bf0c      	ite	eq
 8008f20:	f8c8 2000 	streq.w	r2, [r8]
 8008f24:	605a      	strne	r2, [r3, #4]
 8008f26:	e7eb      	b.n	8008f00 <_malloc_r+0xa8>
 8008f28:	4623      	mov	r3, r4
 8008f2a:	6864      	ldr	r4, [r4, #4]
 8008f2c:	e7ae      	b.n	8008e8c <_malloc_r+0x34>
 8008f2e:	463c      	mov	r4, r7
 8008f30:	687f      	ldr	r7, [r7, #4]
 8008f32:	e7b6      	b.n	8008ea2 <_malloc_r+0x4a>
 8008f34:	461a      	mov	r2, r3
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	d1fb      	bne.n	8008f34 <_malloc_r+0xdc>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	6053      	str	r3, [r2, #4]
 8008f40:	e7de      	b.n	8008f00 <_malloc_r+0xa8>
 8008f42:	230c      	movs	r3, #12
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	4630      	mov	r0, r6
 8008f48:	f000 f80c 	bl	8008f64 <__malloc_unlock>
 8008f4c:	e794      	b.n	8008e78 <_malloc_r+0x20>
 8008f4e:	6005      	str	r5, [r0, #0]
 8008f50:	e7d6      	b.n	8008f00 <_malloc_r+0xa8>
 8008f52:	bf00      	nop
 8008f54:	20000960 	.word	0x20000960

08008f58 <__malloc_lock>:
 8008f58:	4801      	ldr	r0, [pc, #4]	@ (8008f60 <__malloc_lock+0x8>)
 8008f5a:	f7ff b89e 	b.w	800809a <__retarget_lock_acquire_recursive>
 8008f5e:	bf00      	nop
 8008f60:	20000958 	.word	0x20000958

08008f64 <__malloc_unlock>:
 8008f64:	4801      	ldr	r0, [pc, #4]	@ (8008f6c <__malloc_unlock+0x8>)
 8008f66:	f7ff b899 	b.w	800809c <__retarget_lock_release_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	20000958 	.word	0x20000958

08008f70 <_Balloc>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	69c6      	ldr	r6, [r0, #28]
 8008f74:	4604      	mov	r4, r0
 8008f76:	460d      	mov	r5, r1
 8008f78:	b976      	cbnz	r6, 8008f98 <_Balloc+0x28>
 8008f7a:	2010      	movs	r0, #16
 8008f7c:	f7ff ff42 	bl	8008e04 <malloc>
 8008f80:	4602      	mov	r2, r0
 8008f82:	61e0      	str	r0, [r4, #28]
 8008f84:	b920      	cbnz	r0, 8008f90 <_Balloc+0x20>
 8008f86:	4b18      	ldr	r3, [pc, #96]	@ (8008fe8 <_Balloc+0x78>)
 8008f88:	4818      	ldr	r0, [pc, #96]	@ (8008fec <_Balloc+0x7c>)
 8008f8a:	216b      	movs	r1, #107	@ 0x6b
 8008f8c:	f000 ff6e 	bl	8009e6c <__assert_func>
 8008f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f94:	6006      	str	r6, [r0, #0]
 8008f96:	60c6      	str	r6, [r0, #12]
 8008f98:	69e6      	ldr	r6, [r4, #28]
 8008f9a:	68f3      	ldr	r3, [r6, #12]
 8008f9c:	b183      	cbz	r3, 8008fc0 <_Balloc+0x50>
 8008f9e:	69e3      	ldr	r3, [r4, #28]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fa6:	b9b8      	cbnz	r0, 8008fd8 <_Balloc+0x68>
 8008fa8:	2101      	movs	r1, #1
 8008faa:	fa01 f605 	lsl.w	r6, r1, r5
 8008fae:	1d72      	adds	r2, r6, #5
 8008fb0:	0092      	lsls	r2, r2, #2
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 ff78 	bl	8009ea8 <_calloc_r>
 8008fb8:	b160      	cbz	r0, 8008fd4 <_Balloc+0x64>
 8008fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fbe:	e00e      	b.n	8008fde <_Balloc+0x6e>
 8008fc0:	2221      	movs	r2, #33	@ 0x21
 8008fc2:	2104      	movs	r1, #4
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f000 ff6f 	bl	8009ea8 <_calloc_r>
 8008fca:	69e3      	ldr	r3, [r4, #28]
 8008fcc:	60f0      	str	r0, [r6, #12]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e4      	bne.n	8008f9e <_Balloc+0x2e>
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
 8008fd8:	6802      	ldr	r2, [r0, #0]
 8008fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fe4:	e7f7      	b.n	8008fd6 <_Balloc+0x66>
 8008fe6:	bf00      	nop
 8008fe8:	0800bb2d 	.word	0x0800bb2d
 8008fec:	0800bbad 	.word	0x0800bbad

08008ff0 <_Bfree>:
 8008ff0:	b570      	push	{r4, r5, r6, lr}
 8008ff2:	69c6      	ldr	r6, [r0, #28]
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	b976      	cbnz	r6, 8009018 <_Bfree+0x28>
 8008ffa:	2010      	movs	r0, #16
 8008ffc:	f7ff ff02 	bl	8008e04 <malloc>
 8009000:	4602      	mov	r2, r0
 8009002:	61e8      	str	r0, [r5, #28]
 8009004:	b920      	cbnz	r0, 8009010 <_Bfree+0x20>
 8009006:	4b09      	ldr	r3, [pc, #36]	@ (800902c <_Bfree+0x3c>)
 8009008:	4809      	ldr	r0, [pc, #36]	@ (8009030 <_Bfree+0x40>)
 800900a:	218f      	movs	r1, #143	@ 0x8f
 800900c:	f000 ff2e 	bl	8009e6c <__assert_func>
 8009010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009014:	6006      	str	r6, [r0, #0]
 8009016:	60c6      	str	r6, [r0, #12]
 8009018:	b13c      	cbz	r4, 800902a <_Bfree+0x3a>
 800901a:	69eb      	ldr	r3, [r5, #28]
 800901c:	6862      	ldr	r2, [r4, #4]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009024:	6021      	str	r1, [r4, #0]
 8009026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	0800bb2d 	.word	0x0800bb2d
 8009030:	0800bbad 	.word	0x0800bbad

08009034 <__multadd>:
 8009034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009038:	690d      	ldr	r5, [r1, #16]
 800903a:	4607      	mov	r7, r0
 800903c:	460c      	mov	r4, r1
 800903e:	461e      	mov	r6, r3
 8009040:	f101 0c14 	add.w	ip, r1, #20
 8009044:	2000      	movs	r0, #0
 8009046:	f8dc 3000 	ldr.w	r3, [ip]
 800904a:	b299      	uxth	r1, r3
 800904c:	fb02 6101 	mla	r1, r2, r1, r6
 8009050:	0c1e      	lsrs	r6, r3, #16
 8009052:	0c0b      	lsrs	r3, r1, #16
 8009054:	fb02 3306 	mla	r3, r2, r6, r3
 8009058:	b289      	uxth	r1, r1
 800905a:	3001      	adds	r0, #1
 800905c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009060:	4285      	cmp	r5, r0
 8009062:	f84c 1b04 	str.w	r1, [ip], #4
 8009066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800906a:	dcec      	bgt.n	8009046 <__multadd+0x12>
 800906c:	b30e      	cbz	r6, 80090b2 <__multadd+0x7e>
 800906e:	68a3      	ldr	r3, [r4, #8]
 8009070:	42ab      	cmp	r3, r5
 8009072:	dc19      	bgt.n	80090a8 <__multadd+0x74>
 8009074:	6861      	ldr	r1, [r4, #4]
 8009076:	4638      	mov	r0, r7
 8009078:	3101      	adds	r1, #1
 800907a:	f7ff ff79 	bl	8008f70 <_Balloc>
 800907e:	4680      	mov	r8, r0
 8009080:	b928      	cbnz	r0, 800908e <__multadd+0x5a>
 8009082:	4602      	mov	r2, r0
 8009084:	4b0c      	ldr	r3, [pc, #48]	@ (80090b8 <__multadd+0x84>)
 8009086:	480d      	ldr	r0, [pc, #52]	@ (80090bc <__multadd+0x88>)
 8009088:	21ba      	movs	r1, #186	@ 0xba
 800908a:	f000 feef 	bl	8009e6c <__assert_func>
 800908e:	6922      	ldr	r2, [r4, #16]
 8009090:	3202      	adds	r2, #2
 8009092:	f104 010c 	add.w	r1, r4, #12
 8009096:	0092      	lsls	r2, r2, #2
 8009098:	300c      	adds	r0, #12
 800909a:	f7ff f800 	bl	800809e <memcpy>
 800909e:	4621      	mov	r1, r4
 80090a0:	4638      	mov	r0, r7
 80090a2:	f7ff ffa5 	bl	8008ff0 <_Bfree>
 80090a6:	4644      	mov	r4, r8
 80090a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090ac:	3501      	adds	r5, #1
 80090ae:	615e      	str	r6, [r3, #20]
 80090b0:	6125      	str	r5, [r4, #16]
 80090b2:	4620      	mov	r0, r4
 80090b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b8:	0800bb9c 	.word	0x0800bb9c
 80090bc:	0800bbad 	.word	0x0800bbad

080090c0 <__hi0bits>:
 80090c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80090c4:	4603      	mov	r3, r0
 80090c6:	bf36      	itet	cc
 80090c8:	0403      	lslcc	r3, r0, #16
 80090ca:	2000      	movcs	r0, #0
 80090cc:	2010      	movcc	r0, #16
 80090ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090d2:	bf3c      	itt	cc
 80090d4:	021b      	lslcc	r3, r3, #8
 80090d6:	3008      	addcc	r0, #8
 80090d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090dc:	bf3c      	itt	cc
 80090de:	011b      	lslcc	r3, r3, #4
 80090e0:	3004      	addcc	r0, #4
 80090e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090e6:	bf3c      	itt	cc
 80090e8:	009b      	lslcc	r3, r3, #2
 80090ea:	3002      	addcc	r0, #2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	db05      	blt.n	80090fc <__hi0bits+0x3c>
 80090f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80090f4:	f100 0001 	add.w	r0, r0, #1
 80090f8:	bf08      	it	eq
 80090fa:	2020      	moveq	r0, #32
 80090fc:	4770      	bx	lr

080090fe <__lo0bits>:
 80090fe:	6803      	ldr	r3, [r0, #0]
 8009100:	4602      	mov	r2, r0
 8009102:	f013 0007 	ands.w	r0, r3, #7
 8009106:	d00b      	beq.n	8009120 <__lo0bits+0x22>
 8009108:	07d9      	lsls	r1, r3, #31
 800910a:	d421      	bmi.n	8009150 <__lo0bits+0x52>
 800910c:	0798      	lsls	r0, r3, #30
 800910e:	bf49      	itett	mi
 8009110:	085b      	lsrmi	r3, r3, #1
 8009112:	089b      	lsrpl	r3, r3, #2
 8009114:	2001      	movmi	r0, #1
 8009116:	6013      	strmi	r3, [r2, #0]
 8009118:	bf5c      	itt	pl
 800911a:	6013      	strpl	r3, [r2, #0]
 800911c:	2002      	movpl	r0, #2
 800911e:	4770      	bx	lr
 8009120:	b299      	uxth	r1, r3
 8009122:	b909      	cbnz	r1, 8009128 <__lo0bits+0x2a>
 8009124:	0c1b      	lsrs	r3, r3, #16
 8009126:	2010      	movs	r0, #16
 8009128:	b2d9      	uxtb	r1, r3
 800912a:	b909      	cbnz	r1, 8009130 <__lo0bits+0x32>
 800912c:	3008      	adds	r0, #8
 800912e:	0a1b      	lsrs	r3, r3, #8
 8009130:	0719      	lsls	r1, r3, #28
 8009132:	bf04      	itt	eq
 8009134:	091b      	lsreq	r3, r3, #4
 8009136:	3004      	addeq	r0, #4
 8009138:	0799      	lsls	r1, r3, #30
 800913a:	bf04      	itt	eq
 800913c:	089b      	lsreq	r3, r3, #2
 800913e:	3002      	addeq	r0, #2
 8009140:	07d9      	lsls	r1, r3, #31
 8009142:	d403      	bmi.n	800914c <__lo0bits+0x4e>
 8009144:	085b      	lsrs	r3, r3, #1
 8009146:	f100 0001 	add.w	r0, r0, #1
 800914a:	d003      	beq.n	8009154 <__lo0bits+0x56>
 800914c:	6013      	str	r3, [r2, #0]
 800914e:	4770      	bx	lr
 8009150:	2000      	movs	r0, #0
 8009152:	4770      	bx	lr
 8009154:	2020      	movs	r0, #32
 8009156:	4770      	bx	lr

08009158 <__i2b>:
 8009158:	b510      	push	{r4, lr}
 800915a:	460c      	mov	r4, r1
 800915c:	2101      	movs	r1, #1
 800915e:	f7ff ff07 	bl	8008f70 <_Balloc>
 8009162:	4602      	mov	r2, r0
 8009164:	b928      	cbnz	r0, 8009172 <__i2b+0x1a>
 8009166:	4b05      	ldr	r3, [pc, #20]	@ (800917c <__i2b+0x24>)
 8009168:	4805      	ldr	r0, [pc, #20]	@ (8009180 <__i2b+0x28>)
 800916a:	f240 1145 	movw	r1, #325	@ 0x145
 800916e:	f000 fe7d 	bl	8009e6c <__assert_func>
 8009172:	2301      	movs	r3, #1
 8009174:	6144      	str	r4, [r0, #20]
 8009176:	6103      	str	r3, [r0, #16]
 8009178:	bd10      	pop	{r4, pc}
 800917a:	bf00      	nop
 800917c:	0800bb9c 	.word	0x0800bb9c
 8009180:	0800bbad 	.word	0x0800bbad

08009184 <__multiply>:
 8009184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009188:	4617      	mov	r7, r2
 800918a:	690a      	ldr	r2, [r1, #16]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	429a      	cmp	r2, r3
 8009190:	bfa8      	it	ge
 8009192:	463b      	movge	r3, r7
 8009194:	4689      	mov	r9, r1
 8009196:	bfa4      	itt	ge
 8009198:	460f      	movge	r7, r1
 800919a:	4699      	movge	r9, r3
 800919c:	693d      	ldr	r5, [r7, #16]
 800919e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	eb05 060a 	add.w	r6, r5, sl
 80091aa:	42b3      	cmp	r3, r6
 80091ac:	b085      	sub	sp, #20
 80091ae:	bfb8      	it	lt
 80091b0:	3101      	addlt	r1, #1
 80091b2:	f7ff fedd 	bl	8008f70 <_Balloc>
 80091b6:	b930      	cbnz	r0, 80091c6 <__multiply+0x42>
 80091b8:	4602      	mov	r2, r0
 80091ba:	4b41      	ldr	r3, [pc, #260]	@ (80092c0 <__multiply+0x13c>)
 80091bc:	4841      	ldr	r0, [pc, #260]	@ (80092c4 <__multiply+0x140>)
 80091be:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80091c2:	f000 fe53 	bl	8009e6c <__assert_func>
 80091c6:	f100 0414 	add.w	r4, r0, #20
 80091ca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80091ce:	4623      	mov	r3, r4
 80091d0:	2200      	movs	r2, #0
 80091d2:	4573      	cmp	r3, lr
 80091d4:	d320      	bcc.n	8009218 <__multiply+0x94>
 80091d6:	f107 0814 	add.w	r8, r7, #20
 80091da:	f109 0114 	add.w	r1, r9, #20
 80091de:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80091e2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80091e6:	9302      	str	r3, [sp, #8]
 80091e8:	1beb      	subs	r3, r5, r7
 80091ea:	3b15      	subs	r3, #21
 80091ec:	f023 0303 	bic.w	r3, r3, #3
 80091f0:	3304      	adds	r3, #4
 80091f2:	3715      	adds	r7, #21
 80091f4:	42bd      	cmp	r5, r7
 80091f6:	bf38      	it	cc
 80091f8:	2304      	movcc	r3, #4
 80091fa:	9301      	str	r3, [sp, #4]
 80091fc:	9b02      	ldr	r3, [sp, #8]
 80091fe:	9103      	str	r1, [sp, #12]
 8009200:	428b      	cmp	r3, r1
 8009202:	d80c      	bhi.n	800921e <__multiply+0x9a>
 8009204:	2e00      	cmp	r6, #0
 8009206:	dd03      	ble.n	8009210 <__multiply+0x8c>
 8009208:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800920c:	2b00      	cmp	r3, #0
 800920e:	d055      	beq.n	80092bc <__multiply+0x138>
 8009210:	6106      	str	r6, [r0, #16]
 8009212:	b005      	add	sp, #20
 8009214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009218:	f843 2b04 	str.w	r2, [r3], #4
 800921c:	e7d9      	b.n	80091d2 <__multiply+0x4e>
 800921e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009222:	f1ba 0f00 	cmp.w	sl, #0
 8009226:	d01f      	beq.n	8009268 <__multiply+0xe4>
 8009228:	46c4      	mov	ip, r8
 800922a:	46a1      	mov	r9, r4
 800922c:	2700      	movs	r7, #0
 800922e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009232:	f8d9 3000 	ldr.w	r3, [r9]
 8009236:	fa1f fb82 	uxth.w	fp, r2
 800923a:	b29b      	uxth	r3, r3
 800923c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009240:	443b      	add	r3, r7
 8009242:	f8d9 7000 	ldr.w	r7, [r9]
 8009246:	0c12      	lsrs	r2, r2, #16
 8009248:	0c3f      	lsrs	r7, r7, #16
 800924a:	fb0a 7202 	mla	r2, sl, r2, r7
 800924e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009252:	b29b      	uxth	r3, r3
 8009254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009258:	4565      	cmp	r5, ip
 800925a:	f849 3b04 	str.w	r3, [r9], #4
 800925e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009262:	d8e4      	bhi.n	800922e <__multiply+0xaa>
 8009264:	9b01      	ldr	r3, [sp, #4]
 8009266:	50e7      	str	r7, [r4, r3]
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800926e:	3104      	adds	r1, #4
 8009270:	f1b9 0f00 	cmp.w	r9, #0
 8009274:	d020      	beq.n	80092b8 <__multiply+0x134>
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	4647      	mov	r7, r8
 800927a:	46a4      	mov	ip, r4
 800927c:	f04f 0a00 	mov.w	sl, #0
 8009280:	f8b7 b000 	ldrh.w	fp, [r7]
 8009284:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009288:	fb09 220b 	mla	r2, r9, fp, r2
 800928c:	4452      	add	r2, sl
 800928e:	b29b      	uxth	r3, r3
 8009290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009294:	f84c 3b04 	str.w	r3, [ip], #4
 8009298:	f857 3b04 	ldr.w	r3, [r7], #4
 800929c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092a0:	f8bc 3000 	ldrh.w	r3, [ip]
 80092a4:	fb09 330a 	mla	r3, r9, sl, r3
 80092a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80092ac:	42bd      	cmp	r5, r7
 80092ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092b2:	d8e5      	bhi.n	8009280 <__multiply+0xfc>
 80092b4:	9a01      	ldr	r2, [sp, #4]
 80092b6:	50a3      	str	r3, [r4, r2]
 80092b8:	3404      	adds	r4, #4
 80092ba:	e79f      	b.n	80091fc <__multiply+0x78>
 80092bc:	3e01      	subs	r6, #1
 80092be:	e7a1      	b.n	8009204 <__multiply+0x80>
 80092c0:	0800bb9c 	.word	0x0800bb9c
 80092c4:	0800bbad 	.word	0x0800bbad

080092c8 <__pow5mult>:
 80092c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092cc:	4615      	mov	r5, r2
 80092ce:	f012 0203 	ands.w	r2, r2, #3
 80092d2:	4607      	mov	r7, r0
 80092d4:	460e      	mov	r6, r1
 80092d6:	d007      	beq.n	80092e8 <__pow5mult+0x20>
 80092d8:	4c25      	ldr	r4, [pc, #148]	@ (8009370 <__pow5mult+0xa8>)
 80092da:	3a01      	subs	r2, #1
 80092dc:	2300      	movs	r3, #0
 80092de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092e2:	f7ff fea7 	bl	8009034 <__multadd>
 80092e6:	4606      	mov	r6, r0
 80092e8:	10ad      	asrs	r5, r5, #2
 80092ea:	d03d      	beq.n	8009368 <__pow5mult+0xa0>
 80092ec:	69fc      	ldr	r4, [r7, #28]
 80092ee:	b97c      	cbnz	r4, 8009310 <__pow5mult+0x48>
 80092f0:	2010      	movs	r0, #16
 80092f2:	f7ff fd87 	bl	8008e04 <malloc>
 80092f6:	4602      	mov	r2, r0
 80092f8:	61f8      	str	r0, [r7, #28]
 80092fa:	b928      	cbnz	r0, 8009308 <__pow5mult+0x40>
 80092fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009374 <__pow5mult+0xac>)
 80092fe:	481e      	ldr	r0, [pc, #120]	@ (8009378 <__pow5mult+0xb0>)
 8009300:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009304:	f000 fdb2 	bl	8009e6c <__assert_func>
 8009308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800930c:	6004      	str	r4, [r0, #0]
 800930e:	60c4      	str	r4, [r0, #12]
 8009310:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009318:	b94c      	cbnz	r4, 800932e <__pow5mult+0x66>
 800931a:	f240 2171 	movw	r1, #625	@ 0x271
 800931e:	4638      	mov	r0, r7
 8009320:	f7ff ff1a 	bl	8009158 <__i2b>
 8009324:	2300      	movs	r3, #0
 8009326:	f8c8 0008 	str.w	r0, [r8, #8]
 800932a:	4604      	mov	r4, r0
 800932c:	6003      	str	r3, [r0, #0]
 800932e:	f04f 0900 	mov.w	r9, #0
 8009332:	07eb      	lsls	r3, r5, #31
 8009334:	d50a      	bpl.n	800934c <__pow5mult+0x84>
 8009336:	4631      	mov	r1, r6
 8009338:	4622      	mov	r2, r4
 800933a:	4638      	mov	r0, r7
 800933c:	f7ff ff22 	bl	8009184 <__multiply>
 8009340:	4631      	mov	r1, r6
 8009342:	4680      	mov	r8, r0
 8009344:	4638      	mov	r0, r7
 8009346:	f7ff fe53 	bl	8008ff0 <_Bfree>
 800934a:	4646      	mov	r6, r8
 800934c:	106d      	asrs	r5, r5, #1
 800934e:	d00b      	beq.n	8009368 <__pow5mult+0xa0>
 8009350:	6820      	ldr	r0, [r4, #0]
 8009352:	b938      	cbnz	r0, 8009364 <__pow5mult+0x9c>
 8009354:	4622      	mov	r2, r4
 8009356:	4621      	mov	r1, r4
 8009358:	4638      	mov	r0, r7
 800935a:	f7ff ff13 	bl	8009184 <__multiply>
 800935e:	6020      	str	r0, [r4, #0]
 8009360:	f8c0 9000 	str.w	r9, [r0]
 8009364:	4604      	mov	r4, r0
 8009366:	e7e4      	b.n	8009332 <__pow5mult+0x6a>
 8009368:	4630      	mov	r0, r6
 800936a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800936e:	bf00      	nop
 8009370:	0800bc60 	.word	0x0800bc60
 8009374:	0800bb2d 	.word	0x0800bb2d
 8009378:	0800bbad 	.word	0x0800bbad

0800937c <__lshift>:
 800937c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009380:	460c      	mov	r4, r1
 8009382:	6849      	ldr	r1, [r1, #4]
 8009384:	6923      	ldr	r3, [r4, #16]
 8009386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	4607      	mov	r7, r0
 800938e:	4691      	mov	r9, r2
 8009390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009394:	f108 0601 	add.w	r6, r8, #1
 8009398:	42b3      	cmp	r3, r6
 800939a:	db0b      	blt.n	80093b4 <__lshift+0x38>
 800939c:	4638      	mov	r0, r7
 800939e:	f7ff fde7 	bl	8008f70 <_Balloc>
 80093a2:	4605      	mov	r5, r0
 80093a4:	b948      	cbnz	r0, 80093ba <__lshift+0x3e>
 80093a6:	4602      	mov	r2, r0
 80093a8:	4b28      	ldr	r3, [pc, #160]	@ (800944c <__lshift+0xd0>)
 80093aa:	4829      	ldr	r0, [pc, #164]	@ (8009450 <__lshift+0xd4>)
 80093ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80093b0:	f000 fd5c 	bl	8009e6c <__assert_func>
 80093b4:	3101      	adds	r1, #1
 80093b6:	005b      	lsls	r3, r3, #1
 80093b8:	e7ee      	b.n	8009398 <__lshift+0x1c>
 80093ba:	2300      	movs	r3, #0
 80093bc:	f100 0114 	add.w	r1, r0, #20
 80093c0:	f100 0210 	add.w	r2, r0, #16
 80093c4:	4618      	mov	r0, r3
 80093c6:	4553      	cmp	r3, sl
 80093c8:	db33      	blt.n	8009432 <__lshift+0xb6>
 80093ca:	6920      	ldr	r0, [r4, #16]
 80093cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093d0:	f104 0314 	add.w	r3, r4, #20
 80093d4:	f019 091f 	ands.w	r9, r9, #31
 80093d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093e0:	d02b      	beq.n	800943a <__lshift+0xbe>
 80093e2:	f1c9 0e20 	rsb	lr, r9, #32
 80093e6:	468a      	mov	sl, r1
 80093e8:	2200      	movs	r2, #0
 80093ea:	6818      	ldr	r0, [r3, #0]
 80093ec:	fa00 f009 	lsl.w	r0, r0, r9
 80093f0:	4310      	orrs	r0, r2
 80093f2:	f84a 0b04 	str.w	r0, [sl], #4
 80093f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093fa:	459c      	cmp	ip, r3
 80093fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009400:	d8f3      	bhi.n	80093ea <__lshift+0x6e>
 8009402:	ebac 0304 	sub.w	r3, ip, r4
 8009406:	3b15      	subs	r3, #21
 8009408:	f023 0303 	bic.w	r3, r3, #3
 800940c:	3304      	adds	r3, #4
 800940e:	f104 0015 	add.w	r0, r4, #21
 8009412:	4560      	cmp	r0, ip
 8009414:	bf88      	it	hi
 8009416:	2304      	movhi	r3, #4
 8009418:	50ca      	str	r2, [r1, r3]
 800941a:	b10a      	cbz	r2, 8009420 <__lshift+0xa4>
 800941c:	f108 0602 	add.w	r6, r8, #2
 8009420:	3e01      	subs	r6, #1
 8009422:	4638      	mov	r0, r7
 8009424:	612e      	str	r6, [r5, #16]
 8009426:	4621      	mov	r1, r4
 8009428:	f7ff fde2 	bl	8008ff0 <_Bfree>
 800942c:	4628      	mov	r0, r5
 800942e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009432:	f842 0f04 	str.w	r0, [r2, #4]!
 8009436:	3301      	adds	r3, #1
 8009438:	e7c5      	b.n	80093c6 <__lshift+0x4a>
 800943a:	3904      	subs	r1, #4
 800943c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009440:	f841 2f04 	str.w	r2, [r1, #4]!
 8009444:	459c      	cmp	ip, r3
 8009446:	d8f9      	bhi.n	800943c <__lshift+0xc0>
 8009448:	e7ea      	b.n	8009420 <__lshift+0xa4>
 800944a:	bf00      	nop
 800944c:	0800bb9c 	.word	0x0800bb9c
 8009450:	0800bbad 	.word	0x0800bbad

08009454 <__mcmp>:
 8009454:	690a      	ldr	r2, [r1, #16]
 8009456:	4603      	mov	r3, r0
 8009458:	6900      	ldr	r0, [r0, #16]
 800945a:	1a80      	subs	r0, r0, r2
 800945c:	b530      	push	{r4, r5, lr}
 800945e:	d10e      	bne.n	800947e <__mcmp+0x2a>
 8009460:	3314      	adds	r3, #20
 8009462:	3114      	adds	r1, #20
 8009464:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009468:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800946c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009470:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009474:	4295      	cmp	r5, r2
 8009476:	d003      	beq.n	8009480 <__mcmp+0x2c>
 8009478:	d205      	bcs.n	8009486 <__mcmp+0x32>
 800947a:	f04f 30ff 	mov.w	r0, #4294967295
 800947e:	bd30      	pop	{r4, r5, pc}
 8009480:	42a3      	cmp	r3, r4
 8009482:	d3f3      	bcc.n	800946c <__mcmp+0x18>
 8009484:	e7fb      	b.n	800947e <__mcmp+0x2a>
 8009486:	2001      	movs	r0, #1
 8009488:	e7f9      	b.n	800947e <__mcmp+0x2a>
	...

0800948c <__mdiff>:
 800948c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009490:	4689      	mov	r9, r1
 8009492:	4606      	mov	r6, r0
 8009494:	4611      	mov	r1, r2
 8009496:	4648      	mov	r0, r9
 8009498:	4614      	mov	r4, r2
 800949a:	f7ff ffdb 	bl	8009454 <__mcmp>
 800949e:	1e05      	subs	r5, r0, #0
 80094a0:	d112      	bne.n	80094c8 <__mdiff+0x3c>
 80094a2:	4629      	mov	r1, r5
 80094a4:	4630      	mov	r0, r6
 80094a6:	f7ff fd63 	bl	8008f70 <_Balloc>
 80094aa:	4602      	mov	r2, r0
 80094ac:	b928      	cbnz	r0, 80094ba <__mdiff+0x2e>
 80094ae:	4b3f      	ldr	r3, [pc, #252]	@ (80095ac <__mdiff+0x120>)
 80094b0:	f240 2137 	movw	r1, #567	@ 0x237
 80094b4:	483e      	ldr	r0, [pc, #248]	@ (80095b0 <__mdiff+0x124>)
 80094b6:	f000 fcd9 	bl	8009e6c <__assert_func>
 80094ba:	2301      	movs	r3, #1
 80094bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094c0:	4610      	mov	r0, r2
 80094c2:	b003      	add	sp, #12
 80094c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c8:	bfbc      	itt	lt
 80094ca:	464b      	movlt	r3, r9
 80094cc:	46a1      	movlt	r9, r4
 80094ce:	4630      	mov	r0, r6
 80094d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80094d4:	bfba      	itte	lt
 80094d6:	461c      	movlt	r4, r3
 80094d8:	2501      	movlt	r5, #1
 80094da:	2500      	movge	r5, #0
 80094dc:	f7ff fd48 	bl	8008f70 <_Balloc>
 80094e0:	4602      	mov	r2, r0
 80094e2:	b918      	cbnz	r0, 80094ec <__mdiff+0x60>
 80094e4:	4b31      	ldr	r3, [pc, #196]	@ (80095ac <__mdiff+0x120>)
 80094e6:	f240 2145 	movw	r1, #581	@ 0x245
 80094ea:	e7e3      	b.n	80094b4 <__mdiff+0x28>
 80094ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80094f0:	6926      	ldr	r6, [r4, #16]
 80094f2:	60c5      	str	r5, [r0, #12]
 80094f4:	f109 0310 	add.w	r3, r9, #16
 80094f8:	f109 0514 	add.w	r5, r9, #20
 80094fc:	f104 0e14 	add.w	lr, r4, #20
 8009500:	f100 0b14 	add.w	fp, r0, #20
 8009504:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009508:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	46d9      	mov	r9, fp
 8009510:	f04f 0c00 	mov.w	ip, #0
 8009514:	9b01      	ldr	r3, [sp, #4]
 8009516:	f85e 0b04 	ldr.w	r0, [lr], #4
 800951a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	fa1f f38a 	uxth.w	r3, sl
 8009524:	4619      	mov	r1, r3
 8009526:	b283      	uxth	r3, r0
 8009528:	1acb      	subs	r3, r1, r3
 800952a:	0c00      	lsrs	r0, r0, #16
 800952c:	4463      	add	r3, ip
 800952e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009532:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009536:	b29b      	uxth	r3, r3
 8009538:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800953c:	4576      	cmp	r6, lr
 800953e:	f849 3b04 	str.w	r3, [r9], #4
 8009542:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009546:	d8e5      	bhi.n	8009514 <__mdiff+0x88>
 8009548:	1b33      	subs	r3, r6, r4
 800954a:	3b15      	subs	r3, #21
 800954c:	f023 0303 	bic.w	r3, r3, #3
 8009550:	3415      	adds	r4, #21
 8009552:	3304      	adds	r3, #4
 8009554:	42a6      	cmp	r6, r4
 8009556:	bf38      	it	cc
 8009558:	2304      	movcc	r3, #4
 800955a:	441d      	add	r5, r3
 800955c:	445b      	add	r3, fp
 800955e:	461e      	mov	r6, r3
 8009560:	462c      	mov	r4, r5
 8009562:	4544      	cmp	r4, r8
 8009564:	d30e      	bcc.n	8009584 <__mdiff+0xf8>
 8009566:	f108 0103 	add.w	r1, r8, #3
 800956a:	1b49      	subs	r1, r1, r5
 800956c:	f021 0103 	bic.w	r1, r1, #3
 8009570:	3d03      	subs	r5, #3
 8009572:	45a8      	cmp	r8, r5
 8009574:	bf38      	it	cc
 8009576:	2100      	movcc	r1, #0
 8009578:	440b      	add	r3, r1
 800957a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800957e:	b191      	cbz	r1, 80095a6 <__mdiff+0x11a>
 8009580:	6117      	str	r7, [r2, #16]
 8009582:	e79d      	b.n	80094c0 <__mdiff+0x34>
 8009584:	f854 1b04 	ldr.w	r1, [r4], #4
 8009588:	46e6      	mov	lr, ip
 800958a:	0c08      	lsrs	r0, r1, #16
 800958c:	fa1c fc81 	uxtah	ip, ip, r1
 8009590:	4471      	add	r1, lr
 8009592:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009596:	b289      	uxth	r1, r1
 8009598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800959c:	f846 1b04 	str.w	r1, [r6], #4
 80095a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095a4:	e7dd      	b.n	8009562 <__mdiff+0xd6>
 80095a6:	3f01      	subs	r7, #1
 80095a8:	e7e7      	b.n	800957a <__mdiff+0xee>
 80095aa:	bf00      	nop
 80095ac:	0800bb9c 	.word	0x0800bb9c
 80095b0:	0800bbad 	.word	0x0800bbad

080095b4 <__d2b>:
 80095b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	460f      	mov	r7, r1
 80095ba:	2101      	movs	r1, #1
 80095bc:	ec59 8b10 	vmov	r8, r9, d0
 80095c0:	4616      	mov	r6, r2
 80095c2:	f7ff fcd5 	bl	8008f70 <_Balloc>
 80095c6:	4604      	mov	r4, r0
 80095c8:	b930      	cbnz	r0, 80095d8 <__d2b+0x24>
 80095ca:	4602      	mov	r2, r0
 80095cc:	4b23      	ldr	r3, [pc, #140]	@ (800965c <__d2b+0xa8>)
 80095ce:	4824      	ldr	r0, [pc, #144]	@ (8009660 <__d2b+0xac>)
 80095d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80095d4:	f000 fc4a 	bl	8009e6c <__assert_func>
 80095d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095e0:	b10d      	cbz	r5, 80095e6 <__d2b+0x32>
 80095e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	f1b8 0300 	subs.w	r3, r8, #0
 80095ec:	d023      	beq.n	8009636 <__d2b+0x82>
 80095ee:	4668      	mov	r0, sp
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	f7ff fd84 	bl	80090fe <__lo0bits>
 80095f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095fa:	b1d0      	cbz	r0, 8009632 <__d2b+0x7e>
 80095fc:	f1c0 0320 	rsb	r3, r0, #32
 8009600:	fa02 f303 	lsl.w	r3, r2, r3
 8009604:	430b      	orrs	r3, r1
 8009606:	40c2      	lsrs	r2, r0
 8009608:	6163      	str	r3, [r4, #20]
 800960a:	9201      	str	r2, [sp, #4]
 800960c:	9b01      	ldr	r3, [sp, #4]
 800960e:	61a3      	str	r3, [r4, #24]
 8009610:	2b00      	cmp	r3, #0
 8009612:	bf0c      	ite	eq
 8009614:	2201      	moveq	r2, #1
 8009616:	2202      	movne	r2, #2
 8009618:	6122      	str	r2, [r4, #16]
 800961a:	b1a5      	cbz	r5, 8009646 <__d2b+0x92>
 800961c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009620:	4405      	add	r5, r0
 8009622:	603d      	str	r5, [r7, #0]
 8009624:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009628:	6030      	str	r0, [r6, #0]
 800962a:	4620      	mov	r0, r4
 800962c:	b003      	add	sp, #12
 800962e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009632:	6161      	str	r1, [r4, #20]
 8009634:	e7ea      	b.n	800960c <__d2b+0x58>
 8009636:	a801      	add	r0, sp, #4
 8009638:	f7ff fd61 	bl	80090fe <__lo0bits>
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	6163      	str	r3, [r4, #20]
 8009640:	3020      	adds	r0, #32
 8009642:	2201      	movs	r2, #1
 8009644:	e7e8      	b.n	8009618 <__d2b+0x64>
 8009646:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800964a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800964e:	6038      	str	r0, [r7, #0]
 8009650:	6918      	ldr	r0, [r3, #16]
 8009652:	f7ff fd35 	bl	80090c0 <__hi0bits>
 8009656:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800965a:	e7e5      	b.n	8009628 <__d2b+0x74>
 800965c:	0800bb9c 	.word	0x0800bb9c
 8009660:	0800bbad 	.word	0x0800bbad

08009664 <__ssputs_r>:
 8009664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009668:	688e      	ldr	r6, [r1, #8]
 800966a:	461f      	mov	r7, r3
 800966c:	42be      	cmp	r6, r7
 800966e:	680b      	ldr	r3, [r1, #0]
 8009670:	4682      	mov	sl, r0
 8009672:	460c      	mov	r4, r1
 8009674:	4690      	mov	r8, r2
 8009676:	d82d      	bhi.n	80096d4 <__ssputs_r+0x70>
 8009678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800967c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009680:	d026      	beq.n	80096d0 <__ssputs_r+0x6c>
 8009682:	6965      	ldr	r5, [r4, #20]
 8009684:	6909      	ldr	r1, [r1, #16]
 8009686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800968a:	eba3 0901 	sub.w	r9, r3, r1
 800968e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009692:	1c7b      	adds	r3, r7, #1
 8009694:	444b      	add	r3, r9
 8009696:	106d      	asrs	r5, r5, #1
 8009698:	429d      	cmp	r5, r3
 800969a:	bf38      	it	cc
 800969c:	461d      	movcc	r5, r3
 800969e:	0553      	lsls	r3, r2, #21
 80096a0:	d527      	bpl.n	80096f2 <__ssputs_r+0x8e>
 80096a2:	4629      	mov	r1, r5
 80096a4:	f7ff fbd8 	bl	8008e58 <_malloc_r>
 80096a8:	4606      	mov	r6, r0
 80096aa:	b360      	cbz	r0, 8009706 <__ssputs_r+0xa2>
 80096ac:	6921      	ldr	r1, [r4, #16]
 80096ae:	464a      	mov	r2, r9
 80096b0:	f7fe fcf5 	bl	800809e <memcpy>
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80096ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096be:	81a3      	strh	r3, [r4, #12]
 80096c0:	6126      	str	r6, [r4, #16]
 80096c2:	6165      	str	r5, [r4, #20]
 80096c4:	444e      	add	r6, r9
 80096c6:	eba5 0509 	sub.w	r5, r5, r9
 80096ca:	6026      	str	r6, [r4, #0]
 80096cc:	60a5      	str	r5, [r4, #8]
 80096ce:	463e      	mov	r6, r7
 80096d0:	42be      	cmp	r6, r7
 80096d2:	d900      	bls.n	80096d6 <__ssputs_r+0x72>
 80096d4:	463e      	mov	r6, r7
 80096d6:	6820      	ldr	r0, [r4, #0]
 80096d8:	4632      	mov	r2, r6
 80096da:	4641      	mov	r1, r8
 80096dc:	f000 fb9c 	bl	8009e18 <memmove>
 80096e0:	68a3      	ldr	r3, [r4, #8]
 80096e2:	1b9b      	subs	r3, r3, r6
 80096e4:	60a3      	str	r3, [r4, #8]
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	4433      	add	r3, r6
 80096ea:	6023      	str	r3, [r4, #0]
 80096ec:	2000      	movs	r0, #0
 80096ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f2:	462a      	mov	r2, r5
 80096f4:	f000 fbfe 	bl	8009ef4 <_realloc_r>
 80096f8:	4606      	mov	r6, r0
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d1e0      	bne.n	80096c0 <__ssputs_r+0x5c>
 80096fe:	6921      	ldr	r1, [r4, #16]
 8009700:	4650      	mov	r0, sl
 8009702:	f7ff fb35 	bl	8008d70 <_free_r>
 8009706:	230c      	movs	r3, #12
 8009708:	f8ca 3000 	str.w	r3, [sl]
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009712:	81a3      	strh	r3, [r4, #12]
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	e7e9      	b.n	80096ee <__ssputs_r+0x8a>
	...

0800971c <_svfiprintf_r>:
 800971c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009720:	4698      	mov	r8, r3
 8009722:	898b      	ldrh	r3, [r1, #12]
 8009724:	061b      	lsls	r3, r3, #24
 8009726:	b09d      	sub	sp, #116	@ 0x74
 8009728:	4607      	mov	r7, r0
 800972a:	460d      	mov	r5, r1
 800972c:	4614      	mov	r4, r2
 800972e:	d510      	bpl.n	8009752 <_svfiprintf_r+0x36>
 8009730:	690b      	ldr	r3, [r1, #16]
 8009732:	b973      	cbnz	r3, 8009752 <_svfiprintf_r+0x36>
 8009734:	2140      	movs	r1, #64	@ 0x40
 8009736:	f7ff fb8f 	bl	8008e58 <_malloc_r>
 800973a:	6028      	str	r0, [r5, #0]
 800973c:	6128      	str	r0, [r5, #16]
 800973e:	b930      	cbnz	r0, 800974e <_svfiprintf_r+0x32>
 8009740:	230c      	movs	r3, #12
 8009742:	603b      	str	r3, [r7, #0]
 8009744:	f04f 30ff 	mov.w	r0, #4294967295
 8009748:	b01d      	add	sp, #116	@ 0x74
 800974a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974e:	2340      	movs	r3, #64	@ 0x40
 8009750:	616b      	str	r3, [r5, #20]
 8009752:	2300      	movs	r3, #0
 8009754:	9309      	str	r3, [sp, #36]	@ 0x24
 8009756:	2320      	movs	r3, #32
 8009758:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800975c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009760:	2330      	movs	r3, #48	@ 0x30
 8009762:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009900 <_svfiprintf_r+0x1e4>
 8009766:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800976a:	f04f 0901 	mov.w	r9, #1
 800976e:	4623      	mov	r3, r4
 8009770:	469a      	mov	sl, r3
 8009772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009776:	b10a      	cbz	r2, 800977c <_svfiprintf_r+0x60>
 8009778:	2a25      	cmp	r2, #37	@ 0x25
 800977a:	d1f9      	bne.n	8009770 <_svfiprintf_r+0x54>
 800977c:	ebba 0b04 	subs.w	fp, sl, r4
 8009780:	d00b      	beq.n	800979a <_svfiprintf_r+0x7e>
 8009782:	465b      	mov	r3, fp
 8009784:	4622      	mov	r2, r4
 8009786:	4629      	mov	r1, r5
 8009788:	4638      	mov	r0, r7
 800978a:	f7ff ff6b 	bl	8009664 <__ssputs_r>
 800978e:	3001      	adds	r0, #1
 8009790:	f000 80a7 	beq.w	80098e2 <_svfiprintf_r+0x1c6>
 8009794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009796:	445a      	add	r2, fp
 8009798:	9209      	str	r2, [sp, #36]	@ 0x24
 800979a:	f89a 3000 	ldrb.w	r3, [sl]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 809f 	beq.w	80098e2 <_svfiprintf_r+0x1c6>
 80097a4:	2300      	movs	r3, #0
 80097a6:	f04f 32ff 	mov.w	r2, #4294967295
 80097aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ae:	f10a 0a01 	add.w	sl, sl, #1
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	9307      	str	r3, [sp, #28]
 80097b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80097bc:	4654      	mov	r4, sl
 80097be:	2205      	movs	r2, #5
 80097c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c4:	484e      	ldr	r0, [pc, #312]	@ (8009900 <_svfiprintf_r+0x1e4>)
 80097c6:	f7f6 fd0b 	bl	80001e0 <memchr>
 80097ca:	9a04      	ldr	r2, [sp, #16]
 80097cc:	b9d8      	cbnz	r0, 8009806 <_svfiprintf_r+0xea>
 80097ce:	06d0      	lsls	r0, r2, #27
 80097d0:	bf44      	itt	mi
 80097d2:	2320      	movmi	r3, #32
 80097d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097d8:	0711      	lsls	r1, r2, #28
 80097da:	bf44      	itt	mi
 80097dc:	232b      	movmi	r3, #43	@ 0x2b
 80097de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097e2:	f89a 3000 	ldrb.w	r3, [sl]
 80097e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80097e8:	d015      	beq.n	8009816 <_svfiprintf_r+0xfa>
 80097ea:	9a07      	ldr	r2, [sp, #28]
 80097ec:	4654      	mov	r4, sl
 80097ee:	2000      	movs	r0, #0
 80097f0:	f04f 0c0a 	mov.w	ip, #10
 80097f4:	4621      	mov	r1, r4
 80097f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097fa:	3b30      	subs	r3, #48	@ 0x30
 80097fc:	2b09      	cmp	r3, #9
 80097fe:	d94b      	bls.n	8009898 <_svfiprintf_r+0x17c>
 8009800:	b1b0      	cbz	r0, 8009830 <_svfiprintf_r+0x114>
 8009802:	9207      	str	r2, [sp, #28]
 8009804:	e014      	b.n	8009830 <_svfiprintf_r+0x114>
 8009806:	eba0 0308 	sub.w	r3, r0, r8
 800980a:	fa09 f303 	lsl.w	r3, r9, r3
 800980e:	4313      	orrs	r3, r2
 8009810:	9304      	str	r3, [sp, #16]
 8009812:	46a2      	mov	sl, r4
 8009814:	e7d2      	b.n	80097bc <_svfiprintf_r+0xa0>
 8009816:	9b03      	ldr	r3, [sp, #12]
 8009818:	1d19      	adds	r1, r3, #4
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	9103      	str	r1, [sp, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	bfbb      	ittet	lt
 8009822:	425b      	neglt	r3, r3
 8009824:	f042 0202 	orrlt.w	r2, r2, #2
 8009828:	9307      	strge	r3, [sp, #28]
 800982a:	9307      	strlt	r3, [sp, #28]
 800982c:	bfb8      	it	lt
 800982e:	9204      	strlt	r2, [sp, #16]
 8009830:	7823      	ldrb	r3, [r4, #0]
 8009832:	2b2e      	cmp	r3, #46	@ 0x2e
 8009834:	d10a      	bne.n	800984c <_svfiprintf_r+0x130>
 8009836:	7863      	ldrb	r3, [r4, #1]
 8009838:	2b2a      	cmp	r3, #42	@ 0x2a
 800983a:	d132      	bne.n	80098a2 <_svfiprintf_r+0x186>
 800983c:	9b03      	ldr	r3, [sp, #12]
 800983e:	1d1a      	adds	r2, r3, #4
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	9203      	str	r2, [sp, #12]
 8009844:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009848:	3402      	adds	r4, #2
 800984a:	9305      	str	r3, [sp, #20]
 800984c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009910 <_svfiprintf_r+0x1f4>
 8009850:	7821      	ldrb	r1, [r4, #0]
 8009852:	2203      	movs	r2, #3
 8009854:	4650      	mov	r0, sl
 8009856:	f7f6 fcc3 	bl	80001e0 <memchr>
 800985a:	b138      	cbz	r0, 800986c <_svfiprintf_r+0x150>
 800985c:	9b04      	ldr	r3, [sp, #16]
 800985e:	eba0 000a 	sub.w	r0, r0, sl
 8009862:	2240      	movs	r2, #64	@ 0x40
 8009864:	4082      	lsls	r2, r0
 8009866:	4313      	orrs	r3, r2
 8009868:	3401      	adds	r4, #1
 800986a:	9304      	str	r3, [sp, #16]
 800986c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009870:	4824      	ldr	r0, [pc, #144]	@ (8009904 <_svfiprintf_r+0x1e8>)
 8009872:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009876:	2206      	movs	r2, #6
 8009878:	f7f6 fcb2 	bl	80001e0 <memchr>
 800987c:	2800      	cmp	r0, #0
 800987e:	d036      	beq.n	80098ee <_svfiprintf_r+0x1d2>
 8009880:	4b21      	ldr	r3, [pc, #132]	@ (8009908 <_svfiprintf_r+0x1ec>)
 8009882:	bb1b      	cbnz	r3, 80098cc <_svfiprintf_r+0x1b0>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	3307      	adds	r3, #7
 8009888:	f023 0307 	bic.w	r3, r3, #7
 800988c:	3308      	adds	r3, #8
 800988e:	9303      	str	r3, [sp, #12]
 8009890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009892:	4433      	add	r3, r6
 8009894:	9309      	str	r3, [sp, #36]	@ 0x24
 8009896:	e76a      	b.n	800976e <_svfiprintf_r+0x52>
 8009898:	fb0c 3202 	mla	r2, ip, r2, r3
 800989c:	460c      	mov	r4, r1
 800989e:	2001      	movs	r0, #1
 80098a0:	e7a8      	b.n	80097f4 <_svfiprintf_r+0xd8>
 80098a2:	2300      	movs	r3, #0
 80098a4:	3401      	adds	r4, #1
 80098a6:	9305      	str	r3, [sp, #20]
 80098a8:	4619      	mov	r1, r3
 80098aa:	f04f 0c0a 	mov.w	ip, #10
 80098ae:	4620      	mov	r0, r4
 80098b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098b4:	3a30      	subs	r2, #48	@ 0x30
 80098b6:	2a09      	cmp	r2, #9
 80098b8:	d903      	bls.n	80098c2 <_svfiprintf_r+0x1a6>
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0c6      	beq.n	800984c <_svfiprintf_r+0x130>
 80098be:	9105      	str	r1, [sp, #20]
 80098c0:	e7c4      	b.n	800984c <_svfiprintf_r+0x130>
 80098c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098c6:	4604      	mov	r4, r0
 80098c8:	2301      	movs	r3, #1
 80098ca:	e7f0      	b.n	80098ae <_svfiprintf_r+0x192>
 80098cc:	ab03      	add	r3, sp, #12
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	462a      	mov	r2, r5
 80098d2:	4b0e      	ldr	r3, [pc, #56]	@ (800990c <_svfiprintf_r+0x1f0>)
 80098d4:	a904      	add	r1, sp, #16
 80098d6:	4638      	mov	r0, r7
 80098d8:	f7fd fe72 	bl	80075c0 <_printf_float>
 80098dc:	1c42      	adds	r2, r0, #1
 80098de:	4606      	mov	r6, r0
 80098e0:	d1d6      	bne.n	8009890 <_svfiprintf_r+0x174>
 80098e2:	89ab      	ldrh	r3, [r5, #12]
 80098e4:	065b      	lsls	r3, r3, #25
 80098e6:	f53f af2d 	bmi.w	8009744 <_svfiprintf_r+0x28>
 80098ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098ec:	e72c      	b.n	8009748 <_svfiprintf_r+0x2c>
 80098ee:	ab03      	add	r3, sp, #12
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	462a      	mov	r2, r5
 80098f4:	4b05      	ldr	r3, [pc, #20]	@ (800990c <_svfiprintf_r+0x1f0>)
 80098f6:	a904      	add	r1, sp, #16
 80098f8:	4638      	mov	r0, r7
 80098fa:	f7fe f8f9 	bl	8007af0 <_printf_i>
 80098fe:	e7ed      	b.n	80098dc <_svfiprintf_r+0x1c0>
 8009900:	0800bc06 	.word	0x0800bc06
 8009904:	0800bc10 	.word	0x0800bc10
 8009908:	080075c1 	.word	0x080075c1
 800990c:	08009665 	.word	0x08009665
 8009910:	0800bc0c 	.word	0x0800bc0c

08009914 <__sfputc_r>:
 8009914:	6893      	ldr	r3, [r2, #8]
 8009916:	3b01      	subs	r3, #1
 8009918:	2b00      	cmp	r3, #0
 800991a:	b410      	push	{r4}
 800991c:	6093      	str	r3, [r2, #8]
 800991e:	da08      	bge.n	8009932 <__sfputc_r+0x1e>
 8009920:	6994      	ldr	r4, [r2, #24]
 8009922:	42a3      	cmp	r3, r4
 8009924:	db01      	blt.n	800992a <__sfputc_r+0x16>
 8009926:	290a      	cmp	r1, #10
 8009928:	d103      	bne.n	8009932 <__sfputc_r+0x1e>
 800992a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800992e:	f000 b9df 	b.w	8009cf0 <__swbuf_r>
 8009932:	6813      	ldr	r3, [r2, #0]
 8009934:	1c58      	adds	r0, r3, #1
 8009936:	6010      	str	r0, [r2, #0]
 8009938:	7019      	strb	r1, [r3, #0]
 800993a:	4608      	mov	r0, r1
 800993c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009940:	4770      	bx	lr

08009942 <__sfputs_r>:
 8009942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009944:	4606      	mov	r6, r0
 8009946:	460f      	mov	r7, r1
 8009948:	4614      	mov	r4, r2
 800994a:	18d5      	adds	r5, r2, r3
 800994c:	42ac      	cmp	r4, r5
 800994e:	d101      	bne.n	8009954 <__sfputs_r+0x12>
 8009950:	2000      	movs	r0, #0
 8009952:	e007      	b.n	8009964 <__sfputs_r+0x22>
 8009954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009958:	463a      	mov	r2, r7
 800995a:	4630      	mov	r0, r6
 800995c:	f7ff ffda 	bl	8009914 <__sfputc_r>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d1f3      	bne.n	800994c <__sfputs_r+0xa>
 8009964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009968 <_vfiprintf_r>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	460d      	mov	r5, r1
 800996e:	b09d      	sub	sp, #116	@ 0x74
 8009970:	4614      	mov	r4, r2
 8009972:	4698      	mov	r8, r3
 8009974:	4606      	mov	r6, r0
 8009976:	b118      	cbz	r0, 8009980 <_vfiprintf_r+0x18>
 8009978:	6a03      	ldr	r3, [r0, #32]
 800997a:	b90b      	cbnz	r3, 8009980 <_vfiprintf_r+0x18>
 800997c:	f7fe fa62 	bl	8007e44 <__sinit>
 8009980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009982:	07d9      	lsls	r1, r3, #31
 8009984:	d405      	bmi.n	8009992 <_vfiprintf_r+0x2a>
 8009986:	89ab      	ldrh	r3, [r5, #12]
 8009988:	059a      	lsls	r2, r3, #22
 800998a:	d402      	bmi.n	8009992 <_vfiprintf_r+0x2a>
 800998c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800998e:	f7fe fb84 	bl	800809a <__retarget_lock_acquire_recursive>
 8009992:	89ab      	ldrh	r3, [r5, #12]
 8009994:	071b      	lsls	r3, r3, #28
 8009996:	d501      	bpl.n	800999c <_vfiprintf_r+0x34>
 8009998:	692b      	ldr	r3, [r5, #16]
 800999a:	b99b      	cbnz	r3, 80099c4 <_vfiprintf_r+0x5c>
 800999c:	4629      	mov	r1, r5
 800999e:	4630      	mov	r0, r6
 80099a0:	f000 f9e4 	bl	8009d6c <__swsetup_r>
 80099a4:	b170      	cbz	r0, 80099c4 <_vfiprintf_r+0x5c>
 80099a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099a8:	07dc      	lsls	r4, r3, #31
 80099aa:	d504      	bpl.n	80099b6 <_vfiprintf_r+0x4e>
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	b01d      	add	sp, #116	@ 0x74
 80099b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b6:	89ab      	ldrh	r3, [r5, #12]
 80099b8:	0598      	lsls	r0, r3, #22
 80099ba:	d4f7      	bmi.n	80099ac <_vfiprintf_r+0x44>
 80099bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099be:	f7fe fb6d 	bl	800809c <__retarget_lock_release_recursive>
 80099c2:	e7f3      	b.n	80099ac <_vfiprintf_r+0x44>
 80099c4:	2300      	movs	r3, #0
 80099c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80099c8:	2320      	movs	r3, #32
 80099ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80099d2:	2330      	movs	r3, #48	@ 0x30
 80099d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b84 <_vfiprintf_r+0x21c>
 80099d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099dc:	f04f 0901 	mov.w	r9, #1
 80099e0:	4623      	mov	r3, r4
 80099e2:	469a      	mov	sl, r3
 80099e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099e8:	b10a      	cbz	r2, 80099ee <_vfiprintf_r+0x86>
 80099ea:	2a25      	cmp	r2, #37	@ 0x25
 80099ec:	d1f9      	bne.n	80099e2 <_vfiprintf_r+0x7a>
 80099ee:	ebba 0b04 	subs.w	fp, sl, r4
 80099f2:	d00b      	beq.n	8009a0c <_vfiprintf_r+0xa4>
 80099f4:	465b      	mov	r3, fp
 80099f6:	4622      	mov	r2, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	4630      	mov	r0, r6
 80099fc:	f7ff ffa1 	bl	8009942 <__sfputs_r>
 8009a00:	3001      	adds	r0, #1
 8009a02:	f000 80a7 	beq.w	8009b54 <_vfiprintf_r+0x1ec>
 8009a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a08:	445a      	add	r2, fp
 8009a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 809f 	beq.w	8009b54 <_vfiprintf_r+0x1ec>
 8009a16:	2300      	movs	r3, #0
 8009a18:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a20:	f10a 0a01 	add.w	sl, sl, #1
 8009a24:	9304      	str	r3, [sp, #16]
 8009a26:	9307      	str	r3, [sp, #28]
 8009a28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a2e:	4654      	mov	r4, sl
 8009a30:	2205      	movs	r2, #5
 8009a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a36:	4853      	ldr	r0, [pc, #332]	@ (8009b84 <_vfiprintf_r+0x21c>)
 8009a38:	f7f6 fbd2 	bl	80001e0 <memchr>
 8009a3c:	9a04      	ldr	r2, [sp, #16]
 8009a3e:	b9d8      	cbnz	r0, 8009a78 <_vfiprintf_r+0x110>
 8009a40:	06d1      	lsls	r1, r2, #27
 8009a42:	bf44      	itt	mi
 8009a44:	2320      	movmi	r3, #32
 8009a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a4a:	0713      	lsls	r3, r2, #28
 8009a4c:	bf44      	itt	mi
 8009a4e:	232b      	movmi	r3, #43	@ 0x2b
 8009a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a54:	f89a 3000 	ldrb.w	r3, [sl]
 8009a58:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a5a:	d015      	beq.n	8009a88 <_vfiprintf_r+0x120>
 8009a5c:	9a07      	ldr	r2, [sp, #28]
 8009a5e:	4654      	mov	r4, sl
 8009a60:	2000      	movs	r0, #0
 8009a62:	f04f 0c0a 	mov.w	ip, #10
 8009a66:	4621      	mov	r1, r4
 8009a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a6c:	3b30      	subs	r3, #48	@ 0x30
 8009a6e:	2b09      	cmp	r3, #9
 8009a70:	d94b      	bls.n	8009b0a <_vfiprintf_r+0x1a2>
 8009a72:	b1b0      	cbz	r0, 8009aa2 <_vfiprintf_r+0x13a>
 8009a74:	9207      	str	r2, [sp, #28]
 8009a76:	e014      	b.n	8009aa2 <_vfiprintf_r+0x13a>
 8009a78:	eba0 0308 	sub.w	r3, r0, r8
 8009a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a80:	4313      	orrs	r3, r2
 8009a82:	9304      	str	r3, [sp, #16]
 8009a84:	46a2      	mov	sl, r4
 8009a86:	e7d2      	b.n	8009a2e <_vfiprintf_r+0xc6>
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	1d19      	adds	r1, r3, #4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	9103      	str	r1, [sp, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	bfbb      	ittet	lt
 8009a94:	425b      	neglt	r3, r3
 8009a96:	f042 0202 	orrlt.w	r2, r2, #2
 8009a9a:	9307      	strge	r3, [sp, #28]
 8009a9c:	9307      	strlt	r3, [sp, #28]
 8009a9e:	bfb8      	it	lt
 8009aa0:	9204      	strlt	r2, [sp, #16]
 8009aa2:	7823      	ldrb	r3, [r4, #0]
 8009aa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009aa6:	d10a      	bne.n	8009abe <_vfiprintf_r+0x156>
 8009aa8:	7863      	ldrb	r3, [r4, #1]
 8009aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aac:	d132      	bne.n	8009b14 <_vfiprintf_r+0x1ac>
 8009aae:	9b03      	ldr	r3, [sp, #12]
 8009ab0:	1d1a      	adds	r2, r3, #4
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	9203      	str	r2, [sp, #12]
 8009ab6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009aba:	3402      	adds	r4, #2
 8009abc:	9305      	str	r3, [sp, #20]
 8009abe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b94 <_vfiprintf_r+0x22c>
 8009ac2:	7821      	ldrb	r1, [r4, #0]
 8009ac4:	2203      	movs	r2, #3
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	f7f6 fb8a 	bl	80001e0 <memchr>
 8009acc:	b138      	cbz	r0, 8009ade <_vfiprintf_r+0x176>
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	eba0 000a 	sub.w	r0, r0, sl
 8009ad4:	2240      	movs	r2, #64	@ 0x40
 8009ad6:	4082      	lsls	r2, r0
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	3401      	adds	r4, #1
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae2:	4829      	ldr	r0, [pc, #164]	@ (8009b88 <_vfiprintf_r+0x220>)
 8009ae4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ae8:	2206      	movs	r2, #6
 8009aea:	f7f6 fb79 	bl	80001e0 <memchr>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d03f      	beq.n	8009b72 <_vfiprintf_r+0x20a>
 8009af2:	4b26      	ldr	r3, [pc, #152]	@ (8009b8c <_vfiprintf_r+0x224>)
 8009af4:	bb1b      	cbnz	r3, 8009b3e <_vfiprintf_r+0x1d6>
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	3307      	adds	r3, #7
 8009afa:	f023 0307 	bic.w	r3, r3, #7
 8009afe:	3308      	adds	r3, #8
 8009b00:	9303      	str	r3, [sp, #12]
 8009b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b04:	443b      	add	r3, r7
 8009b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b08:	e76a      	b.n	80099e0 <_vfiprintf_r+0x78>
 8009b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b0e:	460c      	mov	r4, r1
 8009b10:	2001      	movs	r0, #1
 8009b12:	e7a8      	b.n	8009a66 <_vfiprintf_r+0xfe>
 8009b14:	2300      	movs	r3, #0
 8009b16:	3401      	adds	r4, #1
 8009b18:	9305      	str	r3, [sp, #20]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	f04f 0c0a 	mov.w	ip, #10
 8009b20:	4620      	mov	r0, r4
 8009b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b26:	3a30      	subs	r2, #48	@ 0x30
 8009b28:	2a09      	cmp	r2, #9
 8009b2a:	d903      	bls.n	8009b34 <_vfiprintf_r+0x1cc>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0c6      	beq.n	8009abe <_vfiprintf_r+0x156>
 8009b30:	9105      	str	r1, [sp, #20]
 8009b32:	e7c4      	b.n	8009abe <_vfiprintf_r+0x156>
 8009b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b38:	4604      	mov	r4, r0
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e7f0      	b.n	8009b20 <_vfiprintf_r+0x1b8>
 8009b3e:	ab03      	add	r3, sp, #12
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	462a      	mov	r2, r5
 8009b44:	4b12      	ldr	r3, [pc, #72]	@ (8009b90 <_vfiprintf_r+0x228>)
 8009b46:	a904      	add	r1, sp, #16
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f7fd fd39 	bl	80075c0 <_printf_float>
 8009b4e:	4607      	mov	r7, r0
 8009b50:	1c78      	adds	r0, r7, #1
 8009b52:	d1d6      	bne.n	8009b02 <_vfiprintf_r+0x19a>
 8009b54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b56:	07d9      	lsls	r1, r3, #31
 8009b58:	d405      	bmi.n	8009b66 <_vfiprintf_r+0x1fe>
 8009b5a:	89ab      	ldrh	r3, [r5, #12]
 8009b5c:	059a      	lsls	r2, r3, #22
 8009b5e:	d402      	bmi.n	8009b66 <_vfiprintf_r+0x1fe>
 8009b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b62:	f7fe fa9b 	bl	800809c <__retarget_lock_release_recursive>
 8009b66:	89ab      	ldrh	r3, [r5, #12]
 8009b68:	065b      	lsls	r3, r3, #25
 8009b6a:	f53f af1f 	bmi.w	80099ac <_vfiprintf_r+0x44>
 8009b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b70:	e71e      	b.n	80099b0 <_vfiprintf_r+0x48>
 8009b72:	ab03      	add	r3, sp, #12
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	462a      	mov	r2, r5
 8009b78:	4b05      	ldr	r3, [pc, #20]	@ (8009b90 <_vfiprintf_r+0x228>)
 8009b7a:	a904      	add	r1, sp, #16
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7fd ffb7 	bl	8007af0 <_printf_i>
 8009b82:	e7e4      	b.n	8009b4e <_vfiprintf_r+0x1e6>
 8009b84:	0800bc06 	.word	0x0800bc06
 8009b88:	0800bc10 	.word	0x0800bc10
 8009b8c:	080075c1 	.word	0x080075c1
 8009b90:	08009943 	.word	0x08009943
 8009b94:	0800bc0c 	.word	0x0800bc0c

08009b98 <__sflush_r>:
 8009b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba0:	0716      	lsls	r6, r2, #28
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	d454      	bmi.n	8009c52 <__sflush_r+0xba>
 8009ba8:	684b      	ldr	r3, [r1, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	dc02      	bgt.n	8009bb4 <__sflush_r+0x1c>
 8009bae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	dd48      	ble.n	8009c46 <__sflush_r+0xae>
 8009bb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bb6:	2e00      	cmp	r6, #0
 8009bb8:	d045      	beq.n	8009c46 <__sflush_r+0xae>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bc0:	682f      	ldr	r7, [r5, #0]
 8009bc2:	6a21      	ldr	r1, [r4, #32]
 8009bc4:	602b      	str	r3, [r5, #0]
 8009bc6:	d030      	beq.n	8009c2a <__sflush_r+0x92>
 8009bc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	0759      	lsls	r1, r3, #29
 8009bce:	d505      	bpl.n	8009bdc <__sflush_r+0x44>
 8009bd0:	6863      	ldr	r3, [r4, #4]
 8009bd2:	1ad2      	subs	r2, r2, r3
 8009bd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bd6:	b10b      	cbz	r3, 8009bdc <__sflush_r+0x44>
 8009bd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bda:	1ad2      	subs	r2, r2, r3
 8009bdc:	2300      	movs	r3, #0
 8009bde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009be0:	6a21      	ldr	r1, [r4, #32]
 8009be2:	4628      	mov	r0, r5
 8009be4:	47b0      	blx	r6
 8009be6:	1c43      	adds	r3, r0, #1
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	d106      	bne.n	8009bfa <__sflush_r+0x62>
 8009bec:	6829      	ldr	r1, [r5, #0]
 8009bee:	291d      	cmp	r1, #29
 8009bf0:	d82b      	bhi.n	8009c4a <__sflush_r+0xb2>
 8009bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c9c <__sflush_r+0x104>)
 8009bf4:	40ca      	lsrs	r2, r1
 8009bf6:	07d6      	lsls	r6, r2, #31
 8009bf8:	d527      	bpl.n	8009c4a <__sflush_r+0xb2>
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	6062      	str	r2, [r4, #4]
 8009bfe:	04d9      	lsls	r1, r3, #19
 8009c00:	6922      	ldr	r2, [r4, #16]
 8009c02:	6022      	str	r2, [r4, #0]
 8009c04:	d504      	bpl.n	8009c10 <__sflush_r+0x78>
 8009c06:	1c42      	adds	r2, r0, #1
 8009c08:	d101      	bne.n	8009c0e <__sflush_r+0x76>
 8009c0a:	682b      	ldr	r3, [r5, #0]
 8009c0c:	b903      	cbnz	r3, 8009c10 <__sflush_r+0x78>
 8009c0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c12:	602f      	str	r7, [r5, #0]
 8009c14:	b1b9      	cbz	r1, 8009c46 <__sflush_r+0xae>
 8009c16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c1a:	4299      	cmp	r1, r3
 8009c1c:	d002      	beq.n	8009c24 <__sflush_r+0x8c>
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f7ff f8a6 	bl	8008d70 <_free_r>
 8009c24:	2300      	movs	r3, #0
 8009c26:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c28:	e00d      	b.n	8009c46 <__sflush_r+0xae>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b0      	blx	r6
 8009c30:	4602      	mov	r2, r0
 8009c32:	1c50      	adds	r0, r2, #1
 8009c34:	d1c9      	bne.n	8009bca <__sflush_r+0x32>
 8009c36:	682b      	ldr	r3, [r5, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d0c6      	beq.n	8009bca <__sflush_r+0x32>
 8009c3c:	2b1d      	cmp	r3, #29
 8009c3e:	d001      	beq.n	8009c44 <__sflush_r+0xac>
 8009c40:	2b16      	cmp	r3, #22
 8009c42:	d11e      	bne.n	8009c82 <__sflush_r+0xea>
 8009c44:	602f      	str	r7, [r5, #0]
 8009c46:	2000      	movs	r0, #0
 8009c48:	e022      	b.n	8009c90 <__sflush_r+0xf8>
 8009c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c4e:	b21b      	sxth	r3, r3
 8009c50:	e01b      	b.n	8009c8a <__sflush_r+0xf2>
 8009c52:	690f      	ldr	r7, [r1, #16]
 8009c54:	2f00      	cmp	r7, #0
 8009c56:	d0f6      	beq.n	8009c46 <__sflush_r+0xae>
 8009c58:	0793      	lsls	r3, r2, #30
 8009c5a:	680e      	ldr	r6, [r1, #0]
 8009c5c:	bf08      	it	eq
 8009c5e:	694b      	ldreq	r3, [r1, #20]
 8009c60:	600f      	str	r7, [r1, #0]
 8009c62:	bf18      	it	ne
 8009c64:	2300      	movne	r3, #0
 8009c66:	eba6 0807 	sub.w	r8, r6, r7
 8009c6a:	608b      	str	r3, [r1, #8]
 8009c6c:	f1b8 0f00 	cmp.w	r8, #0
 8009c70:	dde9      	ble.n	8009c46 <__sflush_r+0xae>
 8009c72:	6a21      	ldr	r1, [r4, #32]
 8009c74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c76:	4643      	mov	r3, r8
 8009c78:	463a      	mov	r2, r7
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b0      	blx	r6
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	dc08      	bgt.n	8009c94 <__sflush_r+0xfc>
 8009c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c8a:	81a3      	strh	r3, [r4, #12]
 8009c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c94:	4407      	add	r7, r0
 8009c96:	eba8 0800 	sub.w	r8, r8, r0
 8009c9a:	e7e7      	b.n	8009c6c <__sflush_r+0xd4>
 8009c9c:	20400001 	.word	0x20400001

08009ca0 <_fflush_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	690b      	ldr	r3, [r1, #16]
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	b913      	cbnz	r3, 8009cb0 <_fflush_r+0x10>
 8009caa:	2500      	movs	r5, #0
 8009cac:	4628      	mov	r0, r5
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	b118      	cbz	r0, 8009cba <_fflush_r+0x1a>
 8009cb2:	6a03      	ldr	r3, [r0, #32]
 8009cb4:	b90b      	cbnz	r3, 8009cba <_fflush_r+0x1a>
 8009cb6:	f7fe f8c5 	bl	8007e44 <__sinit>
 8009cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0f3      	beq.n	8009caa <_fflush_r+0xa>
 8009cc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cc4:	07d0      	lsls	r0, r2, #31
 8009cc6:	d404      	bmi.n	8009cd2 <_fflush_r+0x32>
 8009cc8:	0599      	lsls	r1, r3, #22
 8009cca:	d402      	bmi.n	8009cd2 <_fflush_r+0x32>
 8009ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cce:	f7fe f9e4 	bl	800809a <__retarget_lock_acquire_recursive>
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	f7ff ff5f 	bl	8009b98 <__sflush_r>
 8009cda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cdc:	07da      	lsls	r2, r3, #31
 8009cde:	4605      	mov	r5, r0
 8009ce0:	d4e4      	bmi.n	8009cac <_fflush_r+0xc>
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	059b      	lsls	r3, r3, #22
 8009ce6:	d4e1      	bmi.n	8009cac <_fflush_r+0xc>
 8009ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cea:	f7fe f9d7 	bl	800809c <__retarget_lock_release_recursive>
 8009cee:	e7dd      	b.n	8009cac <_fflush_r+0xc>

08009cf0 <__swbuf_r>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	460e      	mov	r6, r1
 8009cf4:	4614      	mov	r4, r2
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	b118      	cbz	r0, 8009d02 <__swbuf_r+0x12>
 8009cfa:	6a03      	ldr	r3, [r0, #32]
 8009cfc:	b90b      	cbnz	r3, 8009d02 <__swbuf_r+0x12>
 8009cfe:	f7fe f8a1 	bl	8007e44 <__sinit>
 8009d02:	69a3      	ldr	r3, [r4, #24]
 8009d04:	60a3      	str	r3, [r4, #8]
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	071a      	lsls	r2, r3, #28
 8009d0a:	d501      	bpl.n	8009d10 <__swbuf_r+0x20>
 8009d0c:	6923      	ldr	r3, [r4, #16]
 8009d0e:	b943      	cbnz	r3, 8009d22 <__swbuf_r+0x32>
 8009d10:	4621      	mov	r1, r4
 8009d12:	4628      	mov	r0, r5
 8009d14:	f000 f82a 	bl	8009d6c <__swsetup_r>
 8009d18:	b118      	cbz	r0, 8009d22 <__swbuf_r+0x32>
 8009d1a:	f04f 37ff 	mov.w	r7, #4294967295
 8009d1e:	4638      	mov	r0, r7
 8009d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	6922      	ldr	r2, [r4, #16]
 8009d26:	1a98      	subs	r0, r3, r2
 8009d28:	6963      	ldr	r3, [r4, #20]
 8009d2a:	b2f6      	uxtb	r6, r6
 8009d2c:	4283      	cmp	r3, r0
 8009d2e:	4637      	mov	r7, r6
 8009d30:	dc05      	bgt.n	8009d3e <__swbuf_r+0x4e>
 8009d32:	4621      	mov	r1, r4
 8009d34:	4628      	mov	r0, r5
 8009d36:	f7ff ffb3 	bl	8009ca0 <_fflush_r>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d1ed      	bne.n	8009d1a <__swbuf_r+0x2a>
 8009d3e:	68a3      	ldr	r3, [r4, #8]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	60a3      	str	r3, [r4, #8]
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	6022      	str	r2, [r4, #0]
 8009d4a:	701e      	strb	r6, [r3, #0]
 8009d4c:	6962      	ldr	r2, [r4, #20]
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d004      	beq.n	8009d5e <__swbuf_r+0x6e>
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	07db      	lsls	r3, r3, #31
 8009d58:	d5e1      	bpl.n	8009d1e <__swbuf_r+0x2e>
 8009d5a:	2e0a      	cmp	r6, #10
 8009d5c:	d1df      	bne.n	8009d1e <__swbuf_r+0x2e>
 8009d5e:	4621      	mov	r1, r4
 8009d60:	4628      	mov	r0, r5
 8009d62:	f7ff ff9d 	bl	8009ca0 <_fflush_r>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d0d9      	beq.n	8009d1e <__swbuf_r+0x2e>
 8009d6a:	e7d6      	b.n	8009d1a <__swbuf_r+0x2a>

08009d6c <__swsetup_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4b29      	ldr	r3, [pc, #164]	@ (8009e14 <__swsetup_r+0xa8>)
 8009d70:	4605      	mov	r5, r0
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	460c      	mov	r4, r1
 8009d76:	b118      	cbz	r0, 8009d80 <__swsetup_r+0x14>
 8009d78:	6a03      	ldr	r3, [r0, #32]
 8009d7a:	b90b      	cbnz	r3, 8009d80 <__swsetup_r+0x14>
 8009d7c:	f7fe f862 	bl	8007e44 <__sinit>
 8009d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d84:	0719      	lsls	r1, r3, #28
 8009d86:	d422      	bmi.n	8009dce <__swsetup_r+0x62>
 8009d88:	06da      	lsls	r2, r3, #27
 8009d8a:	d407      	bmi.n	8009d9c <__swsetup_r+0x30>
 8009d8c:	2209      	movs	r2, #9
 8009d8e:	602a      	str	r2, [r5, #0]
 8009d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d94:	81a3      	strh	r3, [r4, #12]
 8009d96:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9a:	e033      	b.n	8009e04 <__swsetup_r+0x98>
 8009d9c:	0758      	lsls	r0, r3, #29
 8009d9e:	d512      	bpl.n	8009dc6 <__swsetup_r+0x5a>
 8009da0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009da2:	b141      	cbz	r1, 8009db6 <__swsetup_r+0x4a>
 8009da4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009da8:	4299      	cmp	r1, r3
 8009daa:	d002      	beq.n	8009db2 <__swsetup_r+0x46>
 8009dac:	4628      	mov	r0, r5
 8009dae:	f7fe ffdf 	bl	8008d70 <_free_r>
 8009db2:	2300      	movs	r3, #0
 8009db4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6063      	str	r3, [r4, #4]
 8009dc2:	6923      	ldr	r3, [r4, #16]
 8009dc4:	6023      	str	r3, [r4, #0]
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	f043 0308 	orr.w	r3, r3, #8
 8009dcc:	81a3      	strh	r3, [r4, #12]
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	b94b      	cbnz	r3, 8009de6 <__swsetup_r+0x7a>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ddc:	d003      	beq.n	8009de6 <__swsetup_r+0x7a>
 8009dde:	4621      	mov	r1, r4
 8009de0:	4628      	mov	r0, r5
 8009de2:	f000 f8fb 	bl	8009fdc <__smakebuf_r>
 8009de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dea:	f013 0201 	ands.w	r2, r3, #1
 8009dee:	d00a      	beq.n	8009e06 <__swsetup_r+0x9a>
 8009df0:	2200      	movs	r2, #0
 8009df2:	60a2      	str	r2, [r4, #8]
 8009df4:	6962      	ldr	r2, [r4, #20]
 8009df6:	4252      	negs	r2, r2
 8009df8:	61a2      	str	r2, [r4, #24]
 8009dfa:	6922      	ldr	r2, [r4, #16]
 8009dfc:	b942      	cbnz	r2, 8009e10 <__swsetup_r+0xa4>
 8009dfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e02:	d1c5      	bne.n	8009d90 <__swsetup_r+0x24>
 8009e04:	bd38      	pop	{r3, r4, r5, pc}
 8009e06:	0799      	lsls	r1, r3, #30
 8009e08:	bf58      	it	pl
 8009e0a:	6962      	ldrpl	r2, [r4, #20]
 8009e0c:	60a2      	str	r2, [r4, #8]
 8009e0e:	e7f4      	b.n	8009dfa <__swsetup_r+0x8e>
 8009e10:	2000      	movs	r0, #0
 8009e12:	e7f7      	b.n	8009e04 <__swsetup_r+0x98>
 8009e14:	20000028 	.word	0x20000028

08009e18 <memmove>:
 8009e18:	4288      	cmp	r0, r1
 8009e1a:	b510      	push	{r4, lr}
 8009e1c:	eb01 0402 	add.w	r4, r1, r2
 8009e20:	d902      	bls.n	8009e28 <memmove+0x10>
 8009e22:	4284      	cmp	r4, r0
 8009e24:	4623      	mov	r3, r4
 8009e26:	d807      	bhi.n	8009e38 <memmove+0x20>
 8009e28:	1e43      	subs	r3, r0, #1
 8009e2a:	42a1      	cmp	r1, r4
 8009e2c:	d008      	beq.n	8009e40 <memmove+0x28>
 8009e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e36:	e7f8      	b.n	8009e2a <memmove+0x12>
 8009e38:	4402      	add	r2, r0
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	428a      	cmp	r2, r1
 8009e3e:	d100      	bne.n	8009e42 <memmove+0x2a>
 8009e40:	bd10      	pop	{r4, pc}
 8009e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e4a:	e7f7      	b.n	8009e3c <memmove+0x24>

08009e4c <_sbrk_r>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4d06      	ldr	r5, [pc, #24]	@ (8009e68 <_sbrk_r+0x1c>)
 8009e50:	2300      	movs	r3, #0
 8009e52:	4604      	mov	r4, r0
 8009e54:	4608      	mov	r0, r1
 8009e56:	602b      	str	r3, [r5, #0]
 8009e58:	f7f9 fc4a 	bl	80036f0 <_sbrk>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d102      	bne.n	8009e66 <_sbrk_r+0x1a>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b103      	cbz	r3, 8009e66 <_sbrk_r+0x1a>
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	20000954 	.word	0x20000954

08009e6c <__assert_func>:
 8009e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e6e:	4614      	mov	r4, r2
 8009e70:	461a      	mov	r2, r3
 8009e72:	4b09      	ldr	r3, [pc, #36]	@ (8009e98 <__assert_func+0x2c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4605      	mov	r5, r0
 8009e78:	68d8      	ldr	r0, [r3, #12]
 8009e7a:	b14c      	cbz	r4, 8009e90 <__assert_func+0x24>
 8009e7c:	4b07      	ldr	r3, [pc, #28]	@ (8009e9c <__assert_func+0x30>)
 8009e7e:	9100      	str	r1, [sp, #0]
 8009e80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e84:	4906      	ldr	r1, [pc, #24]	@ (8009ea0 <__assert_func+0x34>)
 8009e86:	462b      	mov	r3, r5
 8009e88:	f000 f870 	bl	8009f6c <fiprintf>
 8009e8c:	f000 f904 	bl	800a098 <abort>
 8009e90:	4b04      	ldr	r3, [pc, #16]	@ (8009ea4 <__assert_func+0x38>)
 8009e92:	461c      	mov	r4, r3
 8009e94:	e7f3      	b.n	8009e7e <__assert_func+0x12>
 8009e96:	bf00      	nop
 8009e98:	20000028 	.word	0x20000028
 8009e9c:	0800bc21 	.word	0x0800bc21
 8009ea0:	0800bc2e 	.word	0x0800bc2e
 8009ea4:	0800bc5c 	.word	0x0800bc5c

08009ea8 <_calloc_r>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	fba1 5402 	umull	r5, r4, r1, r2
 8009eae:	b934      	cbnz	r4, 8009ebe <_calloc_r+0x16>
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	f7fe ffd1 	bl	8008e58 <_malloc_r>
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	b928      	cbnz	r0, 8009ec6 <_calloc_r+0x1e>
 8009eba:	4630      	mov	r0, r6
 8009ebc:	bd70      	pop	{r4, r5, r6, pc}
 8009ebe:	220c      	movs	r2, #12
 8009ec0:	6002      	str	r2, [r0, #0]
 8009ec2:	2600      	movs	r6, #0
 8009ec4:	e7f9      	b.n	8009eba <_calloc_r+0x12>
 8009ec6:	462a      	mov	r2, r5
 8009ec8:	4621      	mov	r1, r4
 8009eca:	f7fe f868 	bl	8007f9e <memset>
 8009ece:	e7f4      	b.n	8009eba <_calloc_r+0x12>

08009ed0 <__ascii_mbtowc>:
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	b901      	cbnz	r1, 8009ed6 <__ascii_mbtowc+0x6>
 8009ed4:	a901      	add	r1, sp, #4
 8009ed6:	b142      	cbz	r2, 8009eea <__ascii_mbtowc+0x1a>
 8009ed8:	b14b      	cbz	r3, 8009eee <__ascii_mbtowc+0x1e>
 8009eda:	7813      	ldrb	r3, [r2, #0]
 8009edc:	600b      	str	r3, [r1, #0]
 8009ede:	7812      	ldrb	r2, [r2, #0]
 8009ee0:	1e10      	subs	r0, r2, #0
 8009ee2:	bf18      	it	ne
 8009ee4:	2001      	movne	r0, #1
 8009ee6:	b002      	add	sp, #8
 8009ee8:	4770      	bx	lr
 8009eea:	4610      	mov	r0, r2
 8009eec:	e7fb      	b.n	8009ee6 <__ascii_mbtowc+0x16>
 8009eee:	f06f 0001 	mvn.w	r0, #1
 8009ef2:	e7f8      	b.n	8009ee6 <__ascii_mbtowc+0x16>

08009ef4 <_realloc_r>:
 8009ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef8:	4607      	mov	r7, r0
 8009efa:	4614      	mov	r4, r2
 8009efc:	460d      	mov	r5, r1
 8009efe:	b921      	cbnz	r1, 8009f0a <_realloc_r+0x16>
 8009f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f04:	4611      	mov	r1, r2
 8009f06:	f7fe bfa7 	b.w	8008e58 <_malloc_r>
 8009f0a:	b92a      	cbnz	r2, 8009f18 <_realloc_r+0x24>
 8009f0c:	f7fe ff30 	bl	8008d70 <_free_r>
 8009f10:	4625      	mov	r5, r4
 8009f12:	4628      	mov	r0, r5
 8009f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f18:	f000 f8c5 	bl	800a0a6 <_malloc_usable_size_r>
 8009f1c:	4284      	cmp	r4, r0
 8009f1e:	4606      	mov	r6, r0
 8009f20:	d802      	bhi.n	8009f28 <_realloc_r+0x34>
 8009f22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f26:	d8f4      	bhi.n	8009f12 <_realloc_r+0x1e>
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	f7fe ff94 	bl	8008e58 <_malloc_r>
 8009f30:	4680      	mov	r8, r0
 8009f32:	b908      	cbnz	r0, 8009f38 <_realloc_r+0x44>
 8009f34:	4645      	mov	r5, r8
 8009f36:	e7ec      	b.n	8009f12 <_realloc_r+0x1e>
 8009f38:	42b4      	cmp	r4, r6
 8009f3a:	4622      	mov	r2, r4
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	bf28      	it	cs
 8009f40:	4632      	movcs	r2, r6
 8009f42:	f7fe f8ac 	bl	800809e <memcpy>
 8009f46:	4629      	mov	r1, r5
 8009f48:	4638      	mov	r0, r7
 8009f4a:	f7fe ff11 	bl	8008d70 <_free_r>
 8009f4e:	e7f1      	b.n	8009f34 <_realloc_r+0x40>

08009f50 <__ascii_wctomb>:
 8009f50:	4603      	mov	r3, r0
 8009f52:	4608      	mov	r0, r1
 8009f54:	b141      	cbz	r1, 8009f68 <__ascii_wctomb+0x18>
 8009f56:	2aff      	cmp	r2, #255	@ 0xff
 8009f58:	d904      	bls.n	8009f64 <__ascii_wctomb+0x14>
 8009f5a:	228a      	movs	r2, #138	@ 0x8a
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f62:	4770      	bx	lr
 8009f64:	700a      	strb	r2, [r1, #0]
 8009f66:	2001      	movs	r0, #1
 8009f68:	4770      	bx	lr
	...

08009f6c <fiprintf>:
 8009f6c:	b40e      	push	{r1, r2, r3}
 8009f6e:	b503      	push	{r0, r1, lr}
 8009f70:	4601      	mov	r1, r0
 8009f72:	ab03      	add	r3, sp, #12
 8009f74:	4805      	ldr	r0, [pc, #20]	@ (8009f8c <fiprintf+0x20>)
 8009f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f7a:	6800      	ldr	r0, [r0, #0]
 8009f7c:	9301      	str	r3, [sp, #4]
 8009f7e:	f7ff fcf3 	bl	8009968 <_vfiprintf_r>
 8009f82:	b002      	add	sp, #8
 8009f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f88:	b003      	add	sp, #12
 8009f8a:	4770      	bx	lr
 8009f8c:	20000028 	.word	0x20000028

08009f90 <__swhatbuf_r>:
 8009f90:	b570      	push	{r4, r5, r6, lr}
 8009f92:	460c      	mov	r4, r1
 8009f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f98:	2900      	cmp	r1, #0
 8009f9a:	b096      	sub	sp, #88	@ 0x58
 8009f9c:	4615      	mov	r5, r2
 8009f9e:	461e      	mov	r6, r3
 8009fa0:	da0d      	bge.n	8009fbe <__swhatbuf_r+0x2e>
 8009fa2:	89a3      	ldrh	r3, [r4, #12]
 8009fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009fa8:	f04f 0100 	mov.w	r1, #0
 8009fac:	bf14      	ite	ne
 8009fae:	2340      	movne	r3, #64	@ 0x40
 8009fb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	6031      	str	r1, [r6, #0]
 8009fb8:	602b      	str	r3, [r5, #0]
 8009fba:	b016      	add	sp, #88	@ 0x58
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
 8009fbe:	466a      	mov	r2, sp
 8009fc0:	f000 f848 	bl	800a054 <_fstat_r>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	dbec      	blt.n	8009fa2 <__swhatbuf_r+0x12>
 8009fc8:	9901      	ldr	r1, [sp, #4]
 8009fca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009fce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009fd2:	4259      	negs	r1, r3
 8009fd4:	4159      	adcs	r1, r3
 8009fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fda:	e7eb      	b.n	8009fb4 <__swhatbuf_r+0x24>

08009fdc <__smakebuf_r>:
 8009fdc:	898b      	ldrh	r3, [r1, #12]
 8009fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fe0:	079d      	lsls	r5, r3, #30
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	d507      	bpl.n	8009ff8 <__smakebuf_r+0x1c>
 8009fe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	6123      	str	r3, [r4, #16]
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	6163      	str	r3, [r4, #20]
 8009ff4:	b003      	add	sp, #12
 8009ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ff8:	ab01      	add	r3, sp, #4
 8009ffa:	466a      	mov	r2, sp
 8009ffc:	f7ff ffc8 	bl	8009f90 <__swhatbuf_r>
 800a000:	9f00      	ldr	r7, [sp, #0]
 800a002:	4605      	mov	r5, r0
 800a004:	4639      	mov	r1, r7
 800a006:	4630      	mov	r0, r6
 800a008:	f7fe ff26 	bl	8008e58 <_malloc_r>
 800a00c:	b948      	cbnz	r0, 800a022 <__smakebuf_r+0x46>
 800a00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a012:	059a      	lsls	r2, r3, #22
 800a014:	d4ee      	bmi.n	8009ff4 <__smakebuf_r+0x18>
 800a016:	f023 0303 	bic.w	r3, r3, #3
 800a01a:	f043 0302 	orr.w	r3, r3, #2
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	e7e2      	b.n	8009fe8 <__smakebuf_r+0xc>
 800a022:	89a3      	ldrh	r3, [r4, #12]
 800a024:	6020      	str	r0, [r4, #0]
 800a026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a02a:	81a3      	strh	r3, [r4, #12]
 800a02c:	9b01      	ldr	r3, [sp, #4]
 800a02e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a032:	b15b      	cbz	r3, 800a04c <__smakebuf_r+0x70>
 800a034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a038:	4630      	mov	r0, r6
 800a03a:	f000 f81d 	bl	800a078 <_isatty_r>
 800a03e:	b128      	cbz	r0, 800a04c <__smakebuf_r+0x70>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	f023 0303 	bic.w	r3, r3, #3
 800a046:	f043 0301 	orr.w	r3, r3, #1
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	431d      	orrs	r5, r3
 800a050:	81a5      	strh	r5, [r4, #12]
 800a052:	e7cf      	b.n	8009ff4 <__smakebuf_r+0x18>

0800a054 <_fstat_r>:
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4d07      	ldr	r5, [pc, #28]	@ (800a074 <_fstat_r+0x20>)
 800a058:	2300      	movs	r3, #0
 800a05a:	4604      	mov	r4, r0
 800a05c:	4608      	mov	r0, r1
 800a05e:	4611      	mov	r1, r2
 800a060:	602b      	str	r3, [r5, #0]
 800a062:	f7f9 fb1c 	bl	800369e <_fstat>
 800a066:	1c43      	adds	r3, r0, #1
 800a068:	d102      	bne.n	800a070 <_fstat_r+0x1c>
 800a06a:	682b      	ldr	r3, [r5, #0]
 800a06c:	b103      	cbz	r3, 800a070 <_fstat_r+0x1c>
 800a06e:	6023      	str	r3, [r4, #0]
 800a070:	bd38      	pop	{r3, r4, r5, pc}
 800a072:	bf00      	nop
 800a074:	20000954 	.word	0x20000954

0800a078 <_isatty_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4d06      	ldr	r5, [pc, #24]	@ (800a094 <_isatty_r+0x1c>)
 800a07c:	2300      	movs	r3, #0
 800a07e:	4604      	mov	r4, r0
 800a080:	4608      	mov	r0, r1
 800a082:	602b      	str	r3, [r5, #0]
 800a084:	f7f9 fb1b 	bl	80036be <_isatty>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_isatty_r+0x1a>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_isatty_r+0x1a>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	20000954 	.word	0x20000954

0800a098 <abort>:
 800a098:	b508      	push	{r3, lr}
 800a09a:	2006      	movs	r0, #6
 800a09c:	f000 f834 	bl	800a108 <raise>
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	f7f9 faac 	bl	80035fe <_exit>

0800a0a6 <_malloc_usable_size_r>:
 800a0a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0aa:	1f18      	subs	r0, r3, #4
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	bfbc      	itt	lt
 800a0b0:	580b      	ldrlt	r3, [r1, r0]
 800a0b2:	18c0      	addlt	r0, r0, r3
 800a0b4:	4770      	bx	lr

0800a0b6 <_raise_r>:
 800a0b6:	291f      	cmp	r1, #31
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	460c      	mov	r4, r1
 800a0be:	d904      	bls.n	800a0ca <_raise_r+0x14>
 800a0c0:	2316      	movs	r3, #22
 800a0c2:	6003      	str	r3, [r0, #0]
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a0cc:	b112      	cbz	r2, 800a0d4 <_raise_r+0x1e>
 800a0ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0d2:	b94b      	cbnz	r3, 800a0e8 <_raise_r+0x32>
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f000 f831 	bl	800a13c <_getpid_r>
 800a0da:	4622      	mov	r2, r4
 800a0dc:	4601      	mov	r1, r0
 800a0de:	4628      	mov	r0, r5
 800a0e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0e4:	f000 b818 	b.w	800a118 <_kill_r>
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d00a      	beq.n	800a102 <_raise_r+0x4c>
 800a0ec:	1c59      	adds	r1, r3, #1
 800a0ee:	d103      	bne.n	800a0f8 <_raise_r+0x42>
 800a0f0:	2316      	movs	r3, #22
 800a0f2:	6003      	str	r3, [r0, #0]
 800a0f4:	2001      	movs	r0, #1
 800a0f6:	e7e7      	b.n	800a0c8 <_raise_r+0x12>
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0fe:	4620      	mov	r0, r4
 800a100:	4798      	blx	r3
 800a102:	2000      	movs	r0, #0
 800a104:	e7e0      	b.n	800a0c8 <_raise_r+0x12>
	...

0800a108 <raise>:
 800a108:	4b02      	ldr	r3, [pc, #8]	@ (800a114 <raise+0xc>)
 800a10a:	4601      	mov	r1, r0
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	f7ff bfd2 	b.w	800a0b6 <_raise_r>
 800a112:	bf00      	nop
 800a114:	20000028 	.word	0x20000028

0800a118 <_kill_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d07      	ldr	r5, [pc, #28]	@ (800a138 <_kill_r+0x20>)
 800a11c:	2300      	movs	r3, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	4611      	mov	r1, r2
 800a124:	602b      	str	r3, [r5, #0]
 800a126:	f7f9 fa5a 	bl	80035de <_kill>
 800a12a:	1c43      	adds	r3, r0, #1
 800a12c:	d102      	bne.n	800a134 <_kill_r+0x1c>
 800a12e:	682b      	ldr	r3, [r5, #0]
 800a130:	b103      	cbz	r3, 800a134 <_kill_r+0x1c>
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	bd38      	pop	{r3, r4, r5, pc}
 800a136:	bf00      	nop
 800a138:	20000954 	.word	0x20000954

0800a13c <_getpid_r>:
 800a13c:	f7f9 ba47 	b.w	80035ce <_getpid>

0800a140 <log>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	ed2d 8b02 	vpush	{d8}
 800a146:	ec55 4b10 	vmov	r4, r5, d0
 800a14a:	f000 f841 	bl	800a1d0 <__ieee754_log>
 800a14e:	4622      	mov	r2, r4
 800a150:	462b      	mov	r3, r5
 800a152:	4620      	mov	r0, r4
 800a154:	4629      	mov	r1, r5
 800a156:	eeb0 8a40 	vmov.f32	s16, s0
 800a15a:	eef0 8a60 	vmov.f32	s17, s1
 800a15e:	f7f6 fced 	bl	8000b3c <__aeabi_dcmpun>
 800a162:	b998      	cbnz	r0, 800a18c <log+0x4c>
 800a164:	2200      	movs	r2, #0
 800a166:	2300      	movs	r3, #0
 800a168:	4620      	mov	r0, r4
 800a16a:	4629      	mov	r1, r5
 800a16c:	f7f6 fcdc 	bl	8000b28 <__aeabi_dcmpgt>
 800a170:	b960      	cbnz	r0, 800a18c <log+0x4c>
 800a172:	2200      	movs	r2, #0
 800a174:	2300      	movs	r3, #0
 800a176:	4620      	mov	r0, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	f7f6 fcad 	bl	8000ad8 <__aeabi_dcmpeq>
 800a17e:	b160      	cbz	r0, 800a19a <log+0x5a>
 800a180:	f7fd ff60 	bl	8008044 <__errno>
 800a184:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800a1b0 <log+0x70>
 800a188:	2322      	movs	r3, #34	@ 0x22
 800a18a:	6003      	str	r3, [r0, #0]
 800a18c:	eeb0 0a48 	vmov.f32	s0, s16
 800a190:	eef0 0a68 	vmov.f32	s1, s17
 800a194:	ecbd 8b02 	vpop	{d8}
 800a198:	bd38      	pop	{r3, r4, r5, pc}
 800a19a:	f7fd ff53 	bl	8008044 <__errno>
 800a19e:	ecbd 8b02 	vpop	{d8}
 800a1a2:	2321      	movs	r3, #33	@ 0x21
 800a1a4:	6003      	str	r3, [r0, #0]
 800a1a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1aa:	4803      	ldr	r0, [pc, #12]	@ (800a1b8 <log+0x78>)
 800a1ac:	f000 b808 	b.w	800a1c0 <nan>
 800a1b0:	00000000 	.word	0x00000000
 800a1b4:	fff00000 	.word	0xfff00000
 800a1b8:	0800bc5c 	.word	0x0800bc5c
 800a1bc:	00000000 	.word	0x00000000

0800a1c0 <nan>:
 800a1c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a1c8 <nan+0x8>
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	00000000 	.word	0x00000000
 800a1cc:	7ff80000 	.word	0x7ff80000

0800a1d0 <__ieee754_log>:
 800a1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	ec51 0b10 	vmov	r0, r1, d0
 800a1d8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800a1dc:	b087      	sub	sp, #28
 800a1de:	460d      	mov	r5, r1
 800a1e0:	da26      	bge.n	800a230 <__ieee754_log+0x60>
 800a1e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a1e6:	4303      	orrs	r3, r0
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	d10a      	bne.n	800a202 <__ieee754_log+0x32>
 800a1ec:	49ce      	ldr	r1, [pc, #824]	@ (800a528 <__ieee754_log+0x358>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	f7f6 fb32 	bl	800085c <__aeabi_ddiv>
 800a1f8:	ec41 0b10 	vmov	d0, r0, r1
 800a1fc:	b007      	add	sp, #28
 800a1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a202:	2900      	cmp	r1, #0
 800a204:	da05      	bge.n	800a212 <__ieee754_log+0x42>
 800a206:	460b      	mov	r3, r1
 800a208:	f7f6 f846 	bl	8000298 <__aeabi_dsub>
 800a20c:	2200      	movs	r2, #0
 800a20e:	2300      	movs	r3, #0
 800a210:	e7f0      	b.n	800a1f4 <__ieee754_log+0x24>
 800a212:	4bc6      	ldr	r3, [pc, #792]	@ (800a52c <__ieee754_log+0x35c>)
 800a214:	2200      	movs	r2, #0
 800a216:	f7f6 f9f7 	bl	8000608 <__aeabi_dmul>
 800a21a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800a21e:	460d      	mov	r5, r1
 800a220:	4ac3      	ldr	r2, [pc, #780]	@ (800a530 <__ieee754_log+0x360>)
 800a222:	4295      	cmp	r5, r2
 800a224:	dd06      	ble.n	800a234 <__ieee754_log+0x64>
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	f7f6 f837 	bl	800029c <__adddf3>
 800a22e:	e7e3      	b.n	800a1f8 <__ieee754_log+0x28>
 800a230:	2300      	movs	r3, #0
 800a232:	e7f5      	b.n	800a220 <__ieee754_log+0x50>
 800a234:	152c      	asrs	r4, r5, #20
 800a236:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800a23a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a23e:	441c      	add	r4, r3
 800a240:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800a244:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800a248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a24c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800a250:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800a254:	ea42 0105 	orr.w	r1, r2, r5
 800a258:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a25c:	2200      	movs	r2, #0
 800a25e:	4bb5      	ldr	r3, [pc, #724]	@ (800a534 <__ieee754_log+0x364>)
 800a260:	f7f6 f81a 	bl	8000298 <__aeabi_dsub>
 800a264:	1cab      	adds	r3, r5, #2
 800a266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	4682      	mov	sl, r0
 800a26e:	468b      	mov	fp, r1
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	dc53      	bgt.n	800a31e <__ieee754_log+0x14e>
 800a276:	2300      	movs	r3, #0
 800a278:	f7f6 fc2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a27c:	b1d0      	cbz	r0, 800a2b4 <__ieee754_log+0xe4>
 800a27e:	2c00      	cmp	r4, #0
 800a280:	f000 8120 	beq.w	800a4c4 <__ieee754_log+0x2f4>
 800a284:	4620      	mov	r0, r4
 800a286:	f7f6 f955 	bl	8000534 <__aeabi_i2d>
 800a28a:	a391      	add	r3, pc, #580	@ (adr r3, 800a4d0 <__ieee754_log+0x300>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	4606      	mov	r6, r0
 800a292:	460f      	mov	r7, r1
 800a294:	f7f6 f9b8 	bl	8000608 <__aeabi_dmul>
 800a298:	a38f      	add	r3, pc, #572	@ (adr r3, 800a4d8 <__ieee754_log+0x308>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	4604      	mov	r4, r0
 800a2a0:	460d      	mov	r5, r1
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	f7f6 f9af 	bl	8000608 <__aeabi_dmul>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	e7ba      	b.n	800a22a <__ieee754_log+0x5a>
 800a2b4:	a38a      	add	r3, pc, #552	@ (adr r3, 800a4e0 <__ieee754_log+0x310>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	4650      	mov	r0, sl
 800a2bc:	4659      	mov	r1, fp
 800a2be:	f7f6 f9a3 	bl	8000608 <__aeabi_dmul>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	499b      	ldr	r1, [pc, #620]	@ (800a538 <__ieee754_log+0x368>)
 800a2ca:	f7f5 ffe5 	bl	8000298 <__aeabi_dsub>
 800a2ce:	4652      	mov	r2, sl
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	460f      	mov	r7, r1
 800a2d4:	465b      	mov	r3, fp
 800a2d6:	4650      	mov	r0, sl
 800a2d8:	4659      	mov	r1, fp
 800a2da:	f7f6 f995 	bl	8000608 <__aeabi_dmul>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	4639      	mov	r1, r7
 800a2e6:	f7f6 f98f 	bl	8000608 <__aeabi_dmul>
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	460f      	mov	r7, r1
 800a2ee:	b914      	cbnz	r4, 800a2f6 <__ieee754_log+0x126>
 800a2f0:	4632      	mov	r2, r6
 800a2f2:	463b      	mov	r3, r7
 800a2f4:	e0a0      	b.n	800a438 <__ieee754_log+0x268>
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f7f6 f91c 	bl	8000534 <__aeabi_i2d>
 800a2fc:	a374      	add	r3, pc, #464	@ (adr r3, 800a4d0 <__ieee754_log+0x300>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	4680      	mov	r8, r0
 800a304:	4689      	mov	r9, r1
 800a306:	f7f6 f97f 	bl	8000608 <__aeabi_dmul>
 800a30a:	a373      	add	r3, pc, #460	@ (adr r3, 800a4d8 <__ieee754_log+0x308>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	4604      	mov	r4, r0
 800a312:	460d      	mov	r5, r1
 800a314:	4640      	mov	r0, r8
 800a316:	4649      	mov	r1, r9
 800a318:	f7f6 f976 	bl	8000608 <__aeabi_dmul>
 800a31c:	e0a5      	b.n	800a46a <__ieee754_log+0x29a>
 800a31e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a322:	f7f5 ffbb 	bl	800029c <__adddf3>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4650      	mov	r0, sl
 800a32c:	4659      	mov	r1, fp
 800a32e:	f7f6 fa95 	bl	800085c <__aeabi_ddiv>
 800a332:	e9cd 0100 	strd	r0, r1, [sp]
 800a336:	4620      	mov	r0, r4
 800a338:	f7f6 f8fc 	bl	8000534 <__aeabi_i2d>
 800a33c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a344:	4610      	mov	r0, r2
 800a346:	4619      	mov	r1, r3
 800a348:	f7f6 f95e 	bl	8000608 <__aeabi_dmul>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a354:	f7f6 f958 	bl	8000608 <__aeabi_dmul>
 800a358:	a363      	add	r3, pc, #396	@ (adr r3, 800a4e8 <__ieee754_log+0x318>)
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	4680      	mov	r8, r0
 800a360:	4689      	mov	r9, r1
 800a362:	f7f6 f951 	bl	8000608 <__aeabi_dmul>
 800a366:	a362      	add	r3, pc, #392	@ (adr r3, 800a4f0 <__ieee754_log+0x320>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f5 ff96 	bl	800029c <__adddf3>
 800a370:	4642      	mov	r2, r8
 800a372:	464b      	mov	r3, r9
 800a374:	f7f6 f948 	bl	8000608 <__aeabi_dmul>
 800a378:	a35f      	add	r3, pc, #380	@ (adr r3, 800a4f8 <__ieee754_log+0x328>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	f7f5 ff8d 	bl	800029c <__adddf3>
 800a382:	4642      	mov	r2, r8
 800a384:	464b      	mov	r3, r9
 800a386:	f7f6 f93f 	bl	8000608 <__aeabi_dmul>
 800a38a:	a35d      	add	r3, pc, #372	@ (adr r3, 800a500 <__ieee754_log+0x330>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f5 ff84 	bl	800029c <__adddf3>
 800a394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a398:	f7f6 f936 	bl	8000608 <__aeabi_dmul>
 800a39c:	a35a      	add	r3, pc, #360	@ (adr r3, 800a508 <__ieee754_log+0x338>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	f7f6 f92d 	bl	8000608 <__aeabi_dmul>
 800a3ae:	a358      	add	r3, pc, #352	@ (adr r3, 800a510 <__ieee754_log+0x340>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7f5 ff72 	bl	800029c <__adddf3>
 800a3b8:	4642      	mov	r2, r8
 800a3ba:	464b      	mov	r3, r9
 800a3bc:	f7f6 f924 	bl	8000608 <__aeabi_dmul>
 800a3c0:	a355      	add	r3, pc, #340	@ (adr r3, 800a518 <__ieee754_log+0x348>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7f5 ff69 	bl	800029c <__adddf3>
 800a3ca:	4642      	mov	r2, r8
 800a3cc:	464b      	mov	r3, r9
 800a3ce:	f7f6 f91b 	bl	8000608 <__aeabi_dmul>
 800a3d2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800a3de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3e2:	f7f5 ff5b 	bl	800029c <__adddf3>
 800a3e6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800a3ea:	3551      	adds	r5, #81	@ 0x51
 800a3ec:	4335      	orrs	r5, r6
 800a3ee:	2d00      	cmp	r5, #0
 800a3f0:	4680      	mov	r8, r0
 800a3f2:	4689      	mov	r9, r1
 800a3f4:	dd48      	ble.n	800a488 <__ieee754_log+0x2b8>
 800a3f6:	4b50      	ldr	r3, [pc, #320]	@ (800a538 <__ieee754_log+0x368>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4650      	mov	r0, sl
 800a3fc:	4659      	mov	r1, fp
 800a3fe:	f7f6 f903 	bl	8000608 <__aeabi_dmul>
 800a402:	4652      	mov	r2, sl
 800a404:	465b      	mov	r3, fp
 800a406:	f7f6 f8ff 	bl	8000608 <__aeabi_dmul>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	4606      	mov	r6, r0
 800a410:	460f      	mov	r7, r1
 800a412:	4640      	mov	r0, r8
 800a414:	4649      	mov	r1, r9
 800a416:	f7f5 ff41 	bl	800029c <__adddf3>
 800a41a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a41e:	f7f6 f8f3 	bl	8000608 <__aeabi_dmul>
 800a422:	4680      	mov	r8, r0
 800a424:	4689      	mov	r9, r1
 800a426:	b964      	cbnz	r4, 800a442 <__ieee754_log+0x272>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4630      	mov	r0, r6
 800a42e:	4639      	mov	r1, r7
 800a430:	f7f5 ff32 	bl	8000298 <__aeabi_dsub>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4650      	mov	r0, sl
 800a43a:	4659      	mov	r1, fp
 800a43c:	f7f5 ff2c 	bl	8000298 <__aeabi_dsub>
 800a440:	e6da      	b.n	800a1f8 <__ieee754_log+0x28>
 800a442:	a323      	add	r3, pc, #140	@ (adr r3, 800a4d0 <__ieee754_log+0x300>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a44c:	f7f6 f8dc 	bl	8000608 <__aeabi_dmul>
 800a450:	a321      	add	r3, pc, #132	@ (adr r3, 800a4d8 <__ieee754_log+0x308>)
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	4604      	mov	r4, r0
 800a458:	460d      	mov	r5, r1
 800a45a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a45e:	f7f6 f8d3 	bl	8000608 <__aeabi_dmul>
 800a462:	4642      	mov	r2, r8
 800a464:	464b      	mov	r3, r9
 800a466:	f7f5 ff19 	bl	800029c <__adddf3>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	4630      	mov	r0, r6
 800a470:	4639      	mov	r1, r7
 800a472:	f7f5 ff11 	bl	8000298 <__aeabi_dsub>
 800a476:	4652      	mov	r2, sl
 800a478:	465b      	mov	r3, fp
 800a47a:	f7f5 ff0d 	bl	8000298 <__aeabi_dsub>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	4620      	mov	r0, r4
 800a484:	4629      	mov	r1, r5
 800a486:	e7d9      	b.n	800a43c <__ieee754_log+0x26c>
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4650      	mov	r0, sl
 800a48e:	4659      	mov	r1, fp
 800a490:	f7f5 ff02 	bl	8000298 <__aeabi_dsub>
 800a494:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a498:	f7f6 f8b6 	bl	8000608 <__aeabi_dmul>
 800a49c:	4606      	mov	r6, r0
 800a49e:	460f      	mov	r7, r1
 800a4a0:	2c00      	cmp	r4, #0
 800a4a2:	f43f af25 	beq.w	800a2f0 <__ieee754_log+0x120>
 800a4a6:	a30a      	add	r3, pc, #40	@ (adr r3, 800a4d0 <__ieee754_log+0x300>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4b0:	f7f6 f8aa 	bl	8000608 <__aeabi_dmul>
 800a4b4:	a308      	add	r3, pc, #32	@ (adr r3, 800a4d8 <__ieee754_log+0x308>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	460d      	mov	r5, r1
 800a4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4c2:	e729      	b.n	800a318 <__ieee754_log+0x148>
 800a4c4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800a520 <__ieee754_log+0x350>
 800a4c8:	e698      	b.n	800a1fc <__ieee754_log+0x2c>
 800a4ca:	bf00      	nop
 800a4cc:	f3af 8000 	nop.w
 800a4d0:	fee00000 	.word	0xfee00000
 800a4d4:	3fe62e42 	.word	0x3fe62e42
 800a4d8:	35793c76 	.word	0x35793c76
 800a4dc:	3dea39ef 	.word	0x3dea39ef
 800a4e0:	55555555 	.word	0x55555555
 800a4e4:	3fd55555 	.word	0x3fd55555
 800a4e8:	df3e5244 	.word	0xdf3e5244
 800a4ec:	3fc2f112 	.word	0x3fc2f112
 800a4f0:	96cb03de 	.word	0x96cb03de
 800a4f4:	3fc74664 	.word	0x3fc74664
 800a4f8:	94229359 	.word	0x94229359
 800a4fc:	3fd24924 	.word	0x3fd24924
 800a500:	55555593 	.word	0x55555593
 800a504:	3fe55555 	.word	0x3fe55555
 800a508:	d078c69f 	.word	0xd078c69f
 800a50c:	3fc39a09 	.word	0x3fc39a09
 800a510:	1d8e78af 	.word	0x1d8e78af
 800a514:	3fcc71c5 	.word	0x3fcc71c5
 800a518:	9997fa04 	.word	0x9997fa04
 800a51c:	3fd99999 	.word	0x3fd99999
	...
 800a528:	c3500000 	.word	0xc3500000
 800a52c:	43500000 	.word	0x43500000
 800a530:	7fefffff 	.word	0x7fefffff
 800a534:	3ff00000 	.word	0x3ff00000
 800a538:	3fe00000 	.word	0x3fe00000

0800a53c <_init>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	bf00      	nop
 800a540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a542:	bc08      	pop	{r3}
 800a544:	469e      	mov	lr, r3
 800a546:	4770      	bx	lr

0800a548 <_fini>:
 800a548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54a:	bf00      	nop
 800a54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a54e:	bc08      	pop	{r3}
 800a550:	469e      	mov	lr, r3
 800a552:	4770      	bx	lr
